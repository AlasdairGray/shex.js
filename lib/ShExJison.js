/* parser generated by jison 0.4.16 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ShExJison = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[7,18,19,20,21,22,30,165,176,177],$V1=[1,11],$V2=[1,25],$V3=[1,12],$V4=[1,27],$V5=[1,13],$V6=[1,19],$V7=[1,24],$V8=[1,26],$V9=[1,28],$Va=[7,18,19,20,21,22,30,176,177],$Vb=[105,113,116,160],$Vc=[2,116],$Vd=[1,66],$Ve=[1,68],$Vf=[1,63],$Vg=[1,45],$Vh=[1,48],$Vi=[1,49],$Vj=[1,56],$Vk=[1,57],$Vl=[1,58],$Vm=[1,50],$Vn=[1,59],$Vo=[1,60],$Vp=[1,61],$Vq=[1,73],$Vr=[1,74],$Vs=[1,77],$Vt=[1,78],$Vu=[1,79],$Vv=[1,80],$Vw=[1,81],$Vx=[1,82],$Vy=[1,83],$Vz=[1,84],$VA=[1,85],$VB=[1,69],$VC=[1,67],$VD=[7,18,19,20,21,22,26,30,37,44,51,56,60,61,62,66,67,68,70,80,81,82,86,88,89,90,91,98,99,100,101,102,103,105,107,113,116,124,129,130,144,145,146,147,152,160,161,165,176,177],$VE=[7,18,19,20,21,22,26,27,30,37,44,51,56,60,61,62,66,67,68,70,80,81,82,85,86,88,89,90,91,95,96,98,99,100,101,102,103,105,107,113,116,124,129,130,144,145,146,147,148,152,159,160,161,165,166,169,170,171,172,173,174,175,176,177],$VF=[19,21,27,176],$VG=[7,18,19,20,21,22,30,61,176,177],$VH=[7,18,19,20,21,22,30,44,61,176,177],$VI=[7,18,19,20,21,22,30,44,51,61,176,177],$VJ=[7,18,19,20,21,22,30,44,51,61,66,67,68,86,88,89,90,91,98,99,100,101,102,103,105,107,113,116,124,129,130,144,145,146,147,160,161,165,176,177],$VK=[2,81],$VL=[7,18,19,20,21,22,30,44,51,61,66,67,68,105,107,113,116,124,129,130,144,145,146,147,160,161,165,176,177],$VM=[7,18,19,20,21,22,30,44,51,61,66,67,68,86,88,89,90,91,105,107,113,116,124,129,130,144,145,146,147,160,161,165,176,177],$VN=[19,21,27,62,85,95,96,152,169,170,172,173,174,175,176],$VO=[1,110],$VP=[1,112],$VQ=[1,111],$VR=[7,18,19,20,21,22,26,27,30,44,51,56,60,61,62,66,67,68,70,80,81,82,85,86,88,89,90,91,95,96,98,99,100,101,102,103,105,107,113,116,124,129,130,144,145,146,147,152,160,161,165,169,170,171,172,173,174,175,176,177],$VS=[1,115],$VT=[1,116],$VU=[1,117],$VV=[1,118],$VW=[85,95,96,172,173,174,175],$VX=[1,148],$VY=[1,149],$VZ=[1,150],$V_=[1,146],$V$=[1,147],$V01=[1,165],$V11=[2,118],$V21=[1,160],$V31=[1,162],$V41=[1,169],$V51=[1,166],$V61=[1,168],$V71=[7,18,19,20,21,22,27,30,44,51,61,62,66,67,68,85,86,88,89,90,91,95,96,97,98,99,100,101,102,103,105,107,113,116,124,129,130,144,145,146,147,152,160,161,165,167,169,170,172,173,174,175,176,177],$V81=[7,18,19,20,21,22,30,44,51,61,107,124,129,130,165,176,177],$V91=[1,182],$Va1=[7,18,19,20,21,22,27,30,44,51,61,62,85,95,96,107,124,129,130,152,161,165,169,170,172,173,174,175,176,177],$Vb1=[1,188],$Vc1=[61,107,124],$Vd1=[2,136],$Ve1=[1,190],$Vf1=[1,191],$Vg1=[61,107,124,129,130],$Vh1=[1,203],$Vi1=[1,206],$Vj1=[1,207],$Vk1=[1,209],$Vl1=[1,210],$Vm1=[1,211],$Vn1=[19,21,26,56,60,62,66,67,68,70,80,81,82,85,86,88,89,90,91,95,96,98,99,100,101,102,103,105,113,116,152,160,169,170,171,172,173,174,175,176],$Vo1=[19,21,105,113,116,160,176,177],$Vp1=[19,21,105,113,116,152,160,171,176],$Vq1=[19,21,27,62,85,95,96,152,159,169,170,172,173,174,175,176],$Vr1=[2,120],$Vs1=[2,140],$Vt1=[1,234],$Vu1=[1,235],$Vv1=[19,21,60,148,152,171,176],$Vw1=[61,107,124,129,130,161,165],$Vx1=[2,155],$Vy1=[1,238],$Vz1=[1,239],$VA1=[1,240],$VB1=[1,241],$VC1=[61,107,124,129,130,144,145,146,147,161,165],$VD1=[44,61,107,124,129,130,144,145,146,147,161,165],$VE1=[44,51,61,107,124,129,130,144,145,146,147,161,165],$VF1=[19,21,26,44,51,61,70,80,81,82,86,88,89,90,91,98,99,100,101,102,103,107,124,129,130,144,145,146,147,152,161,165,176],$VG1=[2,188],$VH1=[1,259],$VI1=[2,139],$VJ1=[7,18,19,20,21,22,30,44,51,61,107,124,129,130,161,165,176,177],$VK1=[61,107,124,129,130,165];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"shexDoc":3,"initParser":4,"Qdirective_E_Star":5,"Q_O_QnotStartAction_E_Or_QstartActions_E_S_Qstatement_E_Star_C_E_Opt":6,"EOF":7,"directive":8,"O_QnotStartAction_E_Or_QstartActions_E_C":9,"notStartAction":10,"startActions":11,"Qstatement_E_Star":12,"statement":13,"O_QnotStartAction_E_Or_QstartActions_E_S_Qstatement_E_Star_C":14,"baseDecl":15,"prefixDecl":16,"labelDecl":17,"IT_BASE":18,"IRIREF":19,"IT_PREFIX":20,"PNAME_NS":21,"IT_LABEL":22,"O_Qiri_E_Or_QGT_LBRACKET_E_S_Qiri_E_Star_S_QGT_RBRACKET_E_C":23,"Qiri_E_Star":24,"iri":25,"[":26,"]":27,"start":28,"shapeExprDecl":29,"IT_start":30,"=":31,"shapeExpression":32,"QcodeDecl_E_Plus":33,"codeDecl":34,"shapeLabel":35,"O_QshapeExpression_E_Or_QIT_EXTERNAL_E_C":36,"IT_EXTERNAL":37,"shapeOr":38,"inlineShapeExpression":39,"inlineShapeOr":40,"shapeAnd":41,"Q_O_QIT_OR_E_S_QshapeAnd_E_C_E_Star":42,"O_QIT_OR_E_S_QshapeAnd_E_C":43,"IT_OR":44,"inlineShapeAnd":45,"Q_O_QIT_OR_E_S_QinlineShapeAnd_E_C_E_Star":46,"O_QIT_OR_E_S_QinlineShapeAnd_E_C":47,"shapeNot":48,"Q_O_QIT_AND_E_S_QshapeNot_E_C_E_Star":49,"O_QIT_AND_E_S_QshapeNot_E_C":50,"IT_AND":51,"inlineShapeNot":52,"Q_O_QIT_AND_E_S_QinlineShapeNot_E_C_E_Star":53,"O_QIT_AND_E_S_QinlineShapeNot_E_C":54,"shapeAtom":55,"IT_NOT":56,"inlineShapeAtom":57,"nodeConstraint":58,"shapeOrRef":59,"(":60,")":61,".":62,"inlineShapeOrRef":63,"QnodeConstraint_E_Opt":64,"shapeDefinition":65,"ATPNAME_LN":66,"ATPNAME_NS":67,"@":68,"inlineShapeDefinition":69,"IT_LITERAL":70,"QxsFacet_E_Star":71,"nonLiteralKind":72,"QstringFacet_E_Plus":73,"datatype":74,"valueSet":75,"QxsFacet_E_Plus":76,"xsFacet":77,"QstringFacet_E_Star":78,"stringFacet":79,"IT_IRI":80,"IT_BNODE":81,"IT_NONLITERAL":82,"numericFacet":83,"stringLength":84,"INTEGER":85,"IT_PATTERN":86,"string":87,"~":88,"IT_LENGTH":89,"IT_MINLENGTH":90,"IT_MAXLENGTH":91,"numericRange":92,"rawNumeric":93,"numericLength":94,"DECIMAL":95,"DOUBLE":96,"^^":97,"IT_MININCLUSIVE":98,"IT_MINEXCLUSIVE":99,"IT_MAXINCLUSIVE":100,"IT_MAXEXCLUSIVE":101,"IT_TOTALDIGITS":102,"IT_FRACTIONDIGITS":103,"Q_O_QincludeSet_E_Or_QextraPropertySet_E_Or_QIT_CLOSED_E_C_E_Star":104,"{":105,"QtripleExpression_E_Opt":106,"}":107,"Qannotation_E_Star":108,"semanticActions":109,"O_QincludeSet_E_Or_QextraPropertySet_E_Or_QIT_CLOSED_E_C":110,"includeSet":111,"extraPropertySet":112,"IT_CLOSED":113,"tripleExpression":114,"annotation":115,"IT_EXTRA":116,"Qpredicate_E_Plus":117,"predicate":118,"oneOfTripleExpr":119,"groupTripleExpr":120,"multiElementOneOf":121,"Q_O_QGT_PIPE_E_S_QgroupTripleExpr_E_C_E_Plus":122,"O_QGT_PIPE_E_S_QgroupTripleExpr_E_C":123,"|":124,"innerTripleExpr":125,"multiElementGroup":126,"unaryTripleExpr":127,"groupTripleExpr_right":128,",":129,";":130,"Q_O_QGT_COMMA_E_S_QunaryTripleExpr_E_C_E_Plus":131,"QGT_COMMA_E_Opt":132,"O_QGT_COMMA_E_S_QunaryTripleExpr_E_C":133,"productionLabel":134,"tripleConstraint":135,"bracketedTripleExpr":136,"valueConstraint":137,"include":138,"Qcardinality_E_Opt":139,"cardinality":140,"$":141,"blankNode":142,"senseFlags":143,"*":144,"+":145,"?":146,"REPEAT_RANGE":147,"^":148,"QvalueSetValue_E_Star":149,"valueSetValue":150,"iriRange":151,"STRING_GRAVE":152,"literal":153,"Q_O_Q_TILDE_E_S_Qexclusion_E_Star_C_E_Opt":154,"Qexclusion_E_Plus":155,"Qexclusion_E_Star":156,"exclusion":157,"O_Q_TILDE_E_S_Qexclusion_E_Star_C":158,"-":159,"&":160,"//":161,"O_QiriOrLabel_E_Or_Qliteral_E_C":162,"iriOrLabel":163,"QcodeDecl_E_Star":164,"%":165,"CODE":166,"LANGTAG":167,"numericLiteral":168,"IT_true":169,"IT_false":170,"a":171,"STRING_LITERAL1":172,"STRING_LITERAL_LONG1":173,"STRING_LITERAL2":174,"STRING_LITERAL_LONG2":175,"PNAME_LN":176,"BLANK_NODE_LABEL":177,"QshapeLabel_E_Plus":178,"$accept":0,"$end":1},
terminals_: {2:"error",7:"EOF",18:"IT_BASE",19:"IRIREF",20:"IT_PREFIX",21:"PNAME_NS",22:"IT_LABEL",26:"[",27:"]",30:"IT_start",31:"=",37:"IT_EXTERNAL",44:"IT_OR",51:"IT_AND",56:"IT_NOT",60:"(",61:")",62:".",66:"ATPNAME_LN",67:"ATPNAME_NS",68:"@",70:"IT_LITERAL",80:"IT_IRI",81:"IT_BNODE",82:"IT_NONLITERAL",85:"INTEGER",86:"IT_PATTERN",88:"~",89:"IT_LENGTH",90:"IT_MINLENGTH",91:"IT_MAXLENGTH",95:"DECIMAL",96:"DOUBLE",97:"^^",98:"IT_MININCLUSIVE",99:"IT_MINEXCLUSIVE",100:"IT_MAXINCLUSIVE",101:"IT_MAXEXCLUSIVE",102:"IT_TOTALDIGITS",103:"IT_FRACTIONDIGITS",105:"{",107:"}",113:"IT_CLOSED",116:"IT_EXTRA",124:"|",129:",",130:";",137:"valueConstraint",141:"$",144:"*",145:"+",146:"?",147:"REPEAT_RANGE",148:"^",152:"STRING_GRAVE",159:"-",160:"&",161:"//",165:"%",166:"CODE",167:"LANGTAG",169:"IT_true",170:"IT_false",171:"a",172:"STRING_LITERAL1",173:"STRING_LITERAL_LONG1",174:"STRING_LITERAL2",175:"STRING_LITERAL_LONG2",176:"PNAME_LN",177:"BLANK_NODE_LABEL"},
productions_: [0,[3,4],[4,0],[5,0],[5,2],[9,1],[9,1],[12,0],[12,2],[14,2],[6,0],[6,1],[8,1],[8,1],[8,1],[15,2],[16,3],[17,2],[24,0],[24,2],[23,1],[23,3],[10,1],[10,1],[28,3],[11,1],[33,1],[33,2],[13,1],[13,1],[29,2],[36,1],[36,1],[32,1],[39,1],[38,2],[43,2],[42,0],[42,2],[40,2],[47,2],[46,0],[46,2],[41,2],[50,2],[49,0],[49,2],[45,2],[54,2],[53,0],[53,2],[48,1],[48,2],[52,1],[52,2],[55,1],[55,2],[55,1],[55,3],[55,1],[57,1],[57,2],[57,2],[57,3],[57,1],[64,0],[64,1],[59,1],[59,1],[59,1],[59,2],[63,1],[63,1],[63,1],[63,2],[58,2],[58,1],[58,2],[58,2],[58,2],[58,1],[71,0],[71,2],[78,0],[78,2],[76,1],[76,2],[72,1],[72,1],[72,1],[73,1],[73,2],[77,1],[77,1],[79,2],[79,2],[79,2],[84,1],[84,1],[84,1],[83,2],[83,2],[93,1],[93,1],[93,1],[93,3],[92,1],[92,1],[92,1],[92,1],[94,1],[94,1],[65,6],[110,1],[110,1],[110,1],[104,0],[104,2],[106,0],[106,1],[108,0],[108,2],[69,4],[112,2],[117,1],[117,2],[114,1],[119,1],[119,1],[121,2],[123,2],[122,1],[122,2],[125,1],[125,1],[120,2],[128,0],[128,1],[128,1],[128,2],[132,0],[132,1],[132,1],[126,3],[133,2],[133,2],[131,1],[131,2],[127,2],[127,1],[127,2],[127,1],[127,1],[127,1],[136,6],[139,0],[139,1],[134,2],[134,2],[135,5],[135,6],[140,1],[140,1],[140,1],[140,1],[143,1],[75,3],[149,0],[149,2],[150,1],[150,1],[150,1],[151,2],[151,2],[156,0],[156,2],[158,2],[154,0],[154,1],[155,1],[155,2],[157,2],[157,3],[138,2],[115,3],[162,1],[162,1],[109,1],[164,0],[164,2],[34,3],[34,3],[153,1],[153,2],[153,3],[153,1],[153,1],[153,1],[118,1],[118,1],[74,1],[35,1],[35,1],[168,1],[168,1],[168,1],[87,1],[87,1],[87,1],[87,1],[25,1],[25,1],[25,1],[163,1],[163,1],[163,1],[163,1],[142,1],[111,2],[178,1],[178,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        var valueExprDefns = Parser.valueExprDefns ? { valueExprDefns: Parser.valueExprDefns } : {};
        var startObj = Parser.start ? { start: Parser.start } : {};
        var startActs = Parser.startActs ? { startActs: Parser.startActs } : {};
        var ret = extend({ type: "Schema"},
                         Object.keys(Parser._prefixes).length ? { prefixes: Parser._prefixes } : {}, // Build return object from
                         valueExprDefns, startActs, startObj,                  // components in parser state
                         Parser.shapes ? {shapes: Parser.shapes} : {});        // maintaining intuitve order.
        if (Parser._base !== null)
          ret.base = Parser._base;
        Parser.reset();
        return ret;
      
break;
case 2:
 yy.parser.yy = { lexer: yy.lexer} ; 
break;
case 15:
 // t: @@
        Parser._setBase(Parser._base === null ||
                    absoluteIRI.test($$[$0].slice(1, -1)) ? $$[$0].slice(1, -1) : _resolveIRI($$[$0].slice(1, -1)));
      
break;
case 16:
 // t: ShExParser-test.js/with pre-defined prefixes
        var prefixIRI;
        if (this._base === null || absoluteIRI.test($$[$0].slice(1, -1)))
          prefixIRI = $$[$0].slice(1, -1);
        else
          prefixIRI = _resolveIRI($$[$0].slice(1, -1));
        Parser._prefixes[$$[$0-1].slice(0, -1)] = prefixIRI;
      
break;
case 17:

        $$[$0].forEach(function (elt) {
	  Parser._termResolver.add(elt);
        });
      
break;
case 18: case 37: case 41: case 45: case 49:
this.$ = [];
break;
case 19: case 38: case 42: case 46: case 50:
this.$ = $$[$0-1].concat($$[$0]);
break;
case 20:
this.$ = [$$[$0]];
break;
case 21: case 139:
this.$ = $$[$0-1];
break;
case 24:

        if (Parser.start)
          error("Parse error: start alread defined as " + Parser.start);
        Parser.start = $$[$0]; // t: startInline
      
break;
case 25:

        Parser.startActs = $$[$0]; // t: startCode1
      
break;
case 26:
this.$ = [$$[$0]] // t: startCode1;
break;
case 27:
this.$ = appendTo($$[$0-1], $$[$0]) // t: startCode3;
break;
case 30:
 // t: 1dot 1val1vsMinusiri3??
        addShape($$[$0-1],  $$[$0]);
      
break;
case 31:

        this.$ = $$[$0];
      
break;
case 32:
this.$ = { type: "ShapeExternal" };
break;
case 35: case 39:
this.$ = shapeJunction("ShapeOr", $$[$0-1], $$[$0]);
break;
case 36: case 40: case 44: case 48:
this.$ = $$[$0];
break;
case 43: case 47:
this.$ = shapeJunction("ShapeAnd", $$[$0-1], $$[$0]);
break;
case 52: case 54:
this.$ = { type: "ShapeNot", "shapeExpr": $$[$0] };
break;
case 56: case 61:

        this.$ = $$[$0] === EmptyShape ?
          extend({ type: "NodeConstraint"}, $$[$0-1]) :
          { type: "ShapeAnd", shapeExprs: [ extend({ type: "NodeConstraint" }, $$[$0-1]), $$[$0] ] }
      
break;
case 58: case 63:
this.$ = $$[$0-1] // t: 1val1vsMinusiri3;
break;
case 59: case 64:
this.$ = EmptyShape // t: 1dot;
break;
case 62:
this.$ = $$[$0] ? { type: "ShapeAnd", shapeExprs: [ extend({ type: "NodeConstraint" }, $$[$0-1]), $$[$0] ] } : $$[$0-1] // t: !! look to 1dotRef1;
break;
case 68: case 72:
 // t: 1dotRefLNex
        $$[$0] = $$[$0].substr(1, $$[$0].length-1);
        var namePos = $$[$0].indexOf(':');
        this.$ = { type: "ShapeRef", reference: expandPrefix($$[$0].substr(0, namePos)) + $$[$0].substr(namePos + 1) };
      
break;
case 69: case 73:
 // t: 1dotRefNS1
        $$[$0] = $$[$0].substr(1, $$[$0].length-1);
        this.$ = { type: "ShapeRef", reference: expandPrefix($$[$0].substr(0, $$[$0].length - 1)) };
      
break;
case 70: case 74:
this.$ = { type: "ShapeRef", reference: $$[$0] } // t: 1dotRef1, 1dotRefSpaceLNex, 1dotRefSpaceNS1;
break;
case 75:
this.$ = extend({ type: "NodeConstraint", nodeKind: "literal" }, $$[$0]) // t: 1literalPattern;
break;
case 76:
this.$ = extend({ type: "NodeConstraint" }, $$[$0]) // t: 1iriPattern;
break;
case 77:
this.$ = extend({ type: "NodeConstraint"}, $$[$0-1], $$[$0]) // t: 1iriPattern;
break;
case 78:

        if (numericDatatypes.indexOf($$[$0-1]) === -1)
          numericFacets.forEach(function (facet) {
            if (facet in $$[$0])
              error("Parse error: facet " + facet + " not allowed for unknown datatype " + $$[$0-1]);
          });
        this.$ = extend({ type: "NodeConstraint", datatype: $$[$0-1] }, $$[$0]) // t: 1datatype
      
break;
case 79:
this.$ = { type: "NodeConstraint", values: $$[$0-1] } // t: 1val1IRIREF;
break;
case 80:
this.$ = extend({ type: "NodeConstraint"}, $$[$0]);
break;
case 81:
this.$ = {} // t: 1literalPattern;
break;
case 82:

        if (Object.keys($$[$0-1]).indexOf(Object.keys($$[$0])[0]) !== -1) {
          error("Parse error: facet "+Object.keys($$[$0])[0]+" defined multiple times");
        }
        this.$ = extend($$[$0-1], $$[$0]) // t: 1literalLength
      
break;
case 83:
this.$ = {};
break;
case 84: case 91:

        if (Object.keys($$[$0-1]).indexOf(Object.keys($$[$0])[0]) !== -1) {
          error("Parse error: facet "+Object.keys($$[$0])[0]+" defined multiple times");
        }
        this.$ = extend($$[$0-1], $$[$0])
      
break;
case 86:

        if (Object.keys($$[$0-1]).indexOf(Object.keys($$[$0])[0]) !== -1) {
          error("Parse error: facet "+Object.keys($$[$0])[0]+" defined multiple times");
        }
        this.$ = extend($$[$0-1], $$[$0]) // t: !! look to 1literalLength
      
break;
case 87:
this.$ = { nodeKind: "iri" } // t: 1iriPattern;
break;
case 88:
this.$ = { nodeKind: "bnode" } // t: 1bnodeLength;
break;
case 89:
this.$ = { nodeKind: "nonliteral" } // t: 1nonliteralLength;
break;
case 94:
this.$ = keyValObject($$[$0-1], parseInt($$[$0], 10)) // t: 1literalLength;
break;
case 95: case 96:
this.$ = { pattern: $$[$0].substr(1, $$[$0].length-2) } // t: 1literalPattern;
break;
case 97:
this.$ = "length" // t: 1literalLength;
break;
case 98:
this.$ = "minlength" // t: 1literalMinlength;
break;
case 99:
this.$ = "maxlength" // t: 1literalMaxlength;
break;
case 100:
this.$ = keyValObject($$[$0-1], $$[$0]) // t: 1literalMininclusive;
break;
case 101:
this.$ = keyValObject($$[$0-1], parseInt($$[$0], 10)) // t: 1literalTotaldigits;
break;
case 102:
this.$ = parseInt($$[$0], 10);;
break;
case 103: case 104:
this.$ = parseFloat($$[$0]);;
break;
case 105:

        $$[$0-2] = $$[$0-2].substr(1, $$[$0-2].length - 2);
        if ($$[$0] === XSD_DECIMAL || $$[$0] === XSD_FLOAT || $$[$0] === XSD_DOUBLE)
          this.$ = parseFloat($$[$0-2]);
        else if (numericDatatypes.indexOf($$[$0]) !== -1)
          this.$ = parseInt($$[$0-2])
        else
          error("Parse error: numeric range facet expected numeric datatype instead of " + $$[$0]);
      
break;
case 106:
this.$ = "mininclusive" // t: 1literalMininclusive;
break;
case 107:
this.$ = "minexclusive" // t: 1literalMinexclusive;
break;
case 108:
this.$ = "maxinclusive" // t: 1literalMaxinclusive;
break;
case 109:
this.$ = "maxexclusive" // t: 1literalMaxexclusive;
break;
case 110:
this.$ = "totaldigits" // t: 1literalTotaldigits;
break;
case 111:
this.$ = "fractiondigits" // t: 1literalFractiondigits;
break;
case 112:
 // t: 1dotInherit3
        var exprObj = $$[$0-3] ? { expression: $$[$0-3] } : EmptyObject; // t: 0, 0Inherit1
        this.$ = (exprObj === EmptyObject && $$[$0-5] === EmptyObject) ?
	  EmptyShape :
	  extend({ type: "Shape" }, exprObj, $$[$0-5]);
        if ($$[$0-1].length) { this.$.annotations = $$[$0-1]; } // t: !! look to open3groupdotcloseAnnot3, open3groupdotclosecard23Annot3Code2
        if ($$[$0]) { this.$.semActs = $$[$0].semActs; } // t: !! look to open3groupdotcloseCode1, !open1dotOr1dot
      
break;
case 113:
this.$ = [ "inherit", $$[$0] ] // t: 1dotInherit1;
break;
case 114:
this.$ = [ "extra", $$[$0] ] // t: 1dotExtra1, 3groupdot3Extra, 3groupdotExtra3;
break;
case 115:
this.$ = [ "closed", true ] // t: 1dotClosed;
break;
case 116:
this.$ = EmptyObject;
break;
case 117:

      if ($$[$0-1] === EmptyObject)
	$$[$0-1] = {};
      if ($$[$0][0] === "closed")
        $$[$0-1]["closed"] = true; // t: 1dotClosed
      else if ($$[$0][0] in $$[$0-1])
        $$[$0-1][$$[$0][0]] = unionAll($$[$0-1][$$[$0][0]], $$[$0][1]); // t: 1dotInherit3, 3groupdot3Extra, 3groupdotExtra3
      else
        $$[$0-1][$$[$0][0]] = $$[$0][1]; // t: 1dotInherit1
      this.$ = $$[$0-1];
    
break;
case 120:
this.$ = [] // t: 1dot, 1dotAnnot3;
break;
case 121:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1dotAnnot3;
break;
case 122:
 // t: 1dotInherit3
        var exprObj = $$[$0-1] ? { expression: $$[$0-1] } : EmptyObject; // t: 0, 0Inherit1
        this.$ = (exprObj === EmptyObject && $$[$0-3] === EmptyObject) ?
	  EmptyShape :
	  extend({ type: "Shape" }, exprObj, $$[$0-3]);
      
break;
case 123:
this.$ = $$[$0] // t: 1dotExtra1, 3groupdot3Extra;
break;
case 124:
this.$ = [$$[$0]] // t: 1dotExtra1, 3groupdot3Extra, 3groupdotExtra3;
break;
case 125:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 3groupdotExtra3;
break;
case 129:
this.$ = { type: "OneOf", expressions: unionAll([$$[$0-1]], $$[$0]) } // t: 2oneOfdot;
break;
case 130:
this.$ = $$[$0] // t: 2oneOfdot;
break;
case 131:
this.$ = [$$[$0]] // t: 2oneOfdot;
break;
case 132:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 2oneOfdot;
break;
case 135:
this.$ = $$[$0] ? { type: "EachOf", expressions: unionAll([$$[$0-1]], $$[$0]) } : $$[$0-1] // t: 2groupOfdot;
break;
case 136: case 137: case 138:
this.$ = null;
break;
case 143:
this.$ = { type: "EachOf", expressions: unionAll([$$[$0-2]], $$[$0-1]) } // t: 2groupOfdot;
break;
case 144: case 145:
this.$ = $$[$0] // t: 2groupOfdot;
break;
case 146:
this.$ = [$$[$0]] // t: 2groupOfdot;
break;
case 147:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 2groupOfdot;
break;
case 148: case 150:
this.$ = extend({ productionLabel: $$[$0-1] }, $$[$0]);
break;
case 154:

        // t: open1dotOr1dot, !openopen1dotcloseCode1closeCode2
        this.$ = $$[$0-4];
        // Copy all of the new attributes into the encapsulated shape.
        if ("min" in $$[$0-2]) { this.$.min = $$[$0-2].min; } // t: open3groupdotclosecard23Annot3Code2
        if ("max" in $$[$0-2]) { this.$.max = $$[$0-2].max; } // t: open3groupdotclosecard23Annot3Code2
        if ($$[$0-1].length) { this.$.annotations = $$[$0-1]; } // t: open3groupdotcloseAnnot3, open3groupdotclosecard23Annot3Code2
        if ($$[$0]) { this.$.semActs = "semActs" in $$[$0-4] ? $$[$0-4].semActs.concat($$[$0].semActs) : $$[$0].semActs; } // t: open3groupdotcloseCode1, !open1dotOr1dot
      
break;
case 155:
this.$ = {} // t: 1dot;
break;
case 157:
this.$ = $$[$0] // t: 1val1vcrefIRIREF;
break;
case 158:
this.$ = $$[$0] // t: 1val1vcrefbnode;
break;
case 159:

        // $$[$0]: t: 1dotCode1
	if ($$[$0-3] !== EmptyShape && false) {
	  var t = blank();
	  addShape(t, $$[$0-3]);
	  $$[$0-3] = { type: "ShapeRef", reference: t };
	}
        this.$ = extend({ type: "TripleConstraint", predicate: $$[$0-4]}, ($$[$0-3] === EmptyShape ? {} : { valueExpr: $$[$0-3] }), $$[$0-2], $$[$0]); // t: 1dot
        if ($$[$0-1].length)
          this.$["annotations"] = $$[$0-1]; // t: 1dotAnnot3
      
break;
case 160:

        // %6: t: 1inversedotCode1
        this.$ = extend({ type: "TripleConstraint" }, $$[$0-5], { predicate: $$[$0-4] }, ($$[$0-3] === EmptyShape ? {} : { valueExpr: $$[$0-3] }), $$[$0-2], $$[$0]); // t: 1inversedot
        if ($$[$0-1].length)
          this.$["annotations"] = $$[$0-1]; // t: 1inversedotAnnot3
      
break;
case 161:
this.$ = { min:0, max:"*" } // t: 1cardStar;
break;
case 162:
this.$ = { min:1, max:"*" } // t: 1cardPlus;
break;
case 163:
this.$ = { min:0, max:1 } // t: 1cardOpt;
break;
case 164:

        $$[$0] = $$[$0].substr(1, $$[$0].length-2);
        var nums = $$[$0].match(/(\d+)/g);
        this.$ = { min: parseInt(nums[0], 10) }; // t: 1card2blank, 1card2Star
        if (nums.length === 2)
            this.$["max"] = parseInt(nums[1], 10); // t: 1card23
        else if ($$[$0].indexOf(',') === -1) // t: 1card2
            this.$["max"] = parseInt(nums[0], 10);
        else
            this.$["max"] = "*";
      
break;
case 165:
this.$ = { inverse: true } // t: 1inversedot;
break;
case 166:
this.$ = $$[$0-1] // t: 1val1IRIREF;
break;
case 167:
this.$ = [] // t: 1val1IRIREF;
break;
case 168:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1val1IRIREF;
break;
case 170:
this.$ = Parser._termResolver.resolve(unescapeString($$[$0], 1));
break;
case 172:

        if ($$[$0]) {
          this.$ = {  // t: 1val1iriStem, 1val1iriStemMinusiri3
            type: "StemRange",
            stem: $$[$0-1]
          };
          if ($$[$0].length)
            this.$["exclusions"] = $$[$0]; // t: 1val1iriStemMinusiri3
        } else {
          this.$ = $$[$0-1]; // t: 1val1IRIREF, 1AvalA
        }
      
break;
case 173:
this.$ = { type: "StemRange", stem: { type: "Wildcard" }, exclusions: $$[$0] } // t:1val1dotMinusiri3, 1val1dotMinusiriStem3;
break;
case 174:
this.$ = [] // t: 1val1iriStem, 1val1iriStemMinusiri3;
break;
case 175:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1val1iriStemMinusiri3;
break;
case 176: case 181:
this.$ = $$[$0] // t: 1val1iriStemMinusiri3;
break;
case 179:
this.$ = [$$[$0]] // t:1val1dotMinusiri3, 1val1dotMinusiriStem3;
break;
case 180:
this.$ = appendTo($$[$0-1], $$[$0]) // t:1val1dotMinusiri3, 1val1dotMinusiriStem3;
break;
case 182:
this.$ = { type: "Stem", stem: $$[$0-1] } // t: 1val1iriStemMinusiriStem3;
break;
case 183:
this.$ = { type: "Inclusion", "include": $$[$0] } // t: 2groupInclude1;
break;
case 184:
this.$ = { type: "Annotation", predicate: $$[$0-1], object: $$[$0] } // t: 1dotAnnotIRIREF;
break;
case 187:
this.$ = $$[$0].length ? { semActs: $$[$0] } : null; // t: 1dotCode1/2oneOfDot;
break;
case 188:
this.$ = [] // t: 1dot, 1dotCode1;
break;
case 189:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1dotCode1;
break;
case 190:
this.$ = unescapeSemanticAction($$[$0-1], $$[$0]) // t: 1dotCode1;
break;
case 191:
this.$ = { type: "SemAct", name: $$[$0-1] } // t: @@;
break;
case 193:
this.$ = $$[$0-1] + lowercase($$[$0]) // t: 1val1LANGTAG;
break;
case 194:
this.$ = $$[$0-2] + '^^' + $$[$0] // t: 1val1Datatype;
break;
case 196:
this.$ = XSD_TRUE // t: 1val1true;
break;
case 197:
this.$ = XSD_FALSE // t: 1val1false;
break;
case 199:
this.$ = RDF_TYPE // t: 1AvalA;
break;
case 203:
this.$ = createLiteral($$[$0], XSD_INTEGER) // t: 1val1INTEGER;
break;
case 204:
this.$ = createLiteral($$[$0], XSD_DECIMAL) // t: 1val1DECIMAL;
break;
case 205:
this.$ = createLiteral($$[$0], XSD_DOUBLE) // t: 1val1DOUBLE;
break;
case 206:
this.$ = unescapeString($$[$0], 1) // t: 1val1STRING_LITERAL1;
break;
case 207:
this.$ = unescapeString($$[$0], 3) // t: 1val1STRING_LITERAL_LONG1;
break;
case 208:
this.$ = unescapeString($$[$0], 1) // t: 1val1STRING_LITERAL2;
break;
case 209:
this.$ = unescapeString($$[$0], 3) // t: 1val1STRING_LITERAL_LONG2;
break;
case 210: case 213:
this.$ = this._base === null || absoluteIRI.test($$[$0].slice(1, -1)) ? unescape($$[$0].slice(1,-1), irirefEscapeSequence) : _resolveIRI(unescape($$[$0].slice(1,-1), irirefEscapeSequence)) // t: 1dot;
break;
case 211: case 214:
 // t:1dotPNex, 1dotPNdefault, ShExParser-test.js/with pre-defined prefixes
        var namePos = $$[$0].indexOf(':');
        this.$ = expandPrefix($$[$0].substr(0, namePos)) + $$[$0].substr(namePos + 1);
    
break;
case 212: case 215:
 // t: 1dotNS2, 1dotNSdefault, ShExParser-test.js/PNAME_NS with pre-defined prefixes
        this.$ = expandPrefix($$[$0].substr(0, $$[$0].length - 1));
    
break;
case 216:

        this.$ = Parser._termResolver.resolve(unescapeString($$[$0], 1));
    
break;
case 218:
this.$ = $$[$0] // t: 1dotInherit1, 1dot3Inherit, 1dotInherit3;
break;
case 219:
this.$ = [$$[$0]] // t: 1dotInherit1, 1dot3Inherit, 1dotInherit3;
break;
case 220:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1dotInherit3;
break;
}
},
table: [o($V0,[2,2],{3:1,4:2}),{1:[3]},o($V0,[2,3],{5:3}),{6:4,7:[2,10],8:5,9:10,10:14,11:15,14:6,15:7,16:8,17:9,18:$V1,19:$V2,20:$V3,21:$V4,22:$V5,25:22,28:16,29:17,30:$V6,33:18,34:21,35:20,142:23,165:$V7,176:$V8,177:$V9},{7:[1,29]},o($V0,[2,4]),{7:[2,11]},o($V0,[2,12]),o($V0,[2,13]),o($V0,[2,14]),o($Va,[2,7],{12:30}),{19:[1,31]},{21:[1,32]},{19:$V2,21:$V4,23:33,25:34,26:[1,35],176:$V8},o($Va,[2,5]),o($Va,[2,6]),o($Va,[2,22]),o($Va,[2,23]),o($Va,[2,25],{34:36,165:$V7}),{31:[1,37]},o($Vb,$Vc,{36:38,32:39,38:41,41:42,48:43,55:44,58:46,59:47,72:51,74:52,75:53,76:54,65:55,163:62,77:64,104:65,79:70,83:71,84:72,92:75,94:76,19:$Vd,21:$Ve,26:$Vf,37:[1,40],56:$Vg,60:$Vh,62:$Vi,66:$Vj,67:$Vk,68:$Vl,70:$Vm,80:$Vn,81:$Vo,82:$Vp,86:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,98:$Vv,99:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA,152:$VB,176:$VC}),o($V0,[2,26]),o($VD,[2,201]),o($VD,[2,202]),{19:$V2,21:$V4,25:86,176:$V8},o($VE,[2,210]),o($VE,[2,211]),o($VE,[2,212]),o([7,18,19,20,21,22,26,30,37,44,51,56,60,61,62,66,67,68,70,80,81,82,86,88,89,90,91,98,99,100,101,102,103,105,107,113,116,124,129,130,144,145,146,147,148,152,160,161,165,171,176,177],[2,217]),{1:[2,1]},{7:[2,9],8:88,10:89,13:87,15:7,16:8,17:9,18:$V1,19:$V2,20:$V3,21:$V4,22:$V5,25:22,28:16,29:17,30:$V6,35:20,142:23,176:$V8,177:$V9},o($V0,[2,15]),{19:[1,90]},o($V0,[2,17]),o($V0,[2,20]),o($VF,[2,18],{24:91}),o($V0,[2,27]),o($Vb,$Vc,{38:41,41:42,48:43,55:44,58:46,59:47,72:51,74:52,75:53,76:54,65:55,163:62,77:64,104:65,79:70,83:71,84:72,92:75,94:76,32:92,19:$Vd,21:$Ve,26:$Vf,56:$Vg,60:$Vh,62:$Vi,66:$Vj,67:$Vk,68:$Vl,70:$Vm,80:$Vn,81:$Vo,82:$Vp,86:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,98:$Vv,99:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA,152:$VB,176:$VC}),o($Va,[2,30]),o($Va,[2,31]),o($Va,[2,32]),o($VG,[2,33]),o($VH,[2,37],{42:93}),o($VI,[2,45],{49:94}),o($VI,[2,51]),o($Vb,$Vc,{58:46,59:47,72:51,74:52,75:53,76:54,65:55,163:62,77:64,104:65,79:70,83:71,84:72,92:75,94:76,55:95,19:$Vd,21:$Ve,26:$Vf,60:$Vh,62:$Vi,66:$Vj,67:$Vk,68:$Vl,70:$Vm,80:$Vn,81:$Vo,82:$Vp,86:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,98:$Vv,99:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA,152:$VB,176:$VC}),o($VI,[2,55],{65:55,104:65,59:96,66:$Vj,67:$Vk,68:$Vl,105:$Vc,113:$Vc,116:$Vc,160:$Vc}),o($VI,[2,57]),o($Vb,$Vc,{38:41,41:42,48:43,55:44,58:46,59:47,72:51,74:52,75:53,76:54,65:55,163:62,77:64,104:65,79:70,83:71,84:72,92:75,94:76,32:97,19:$Vd,21:$Ve,26:$Vf,56:$Vg,60:$Vh,62:$Vi,66:$Vj,67:$Vk,68:$Vl,70:$Vm,80:$Vn,81:$Vo,82:$Vp,86:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,98:$Vv,99:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA,152:$VB,176:$VC}),o($VI,[2,59]),o($VJ,$VK,{71:98}),o($VL,[2,76],{84:72,73:99,79:100,86:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu}),o($VJ,$VK,{71:101}),o($VJ,$VK,{71:102}),o($VL,[2,80],{79:70,83:71,84:72,92:75,94:76,77:103,86:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,98:$Vv,99:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA}),o($VI,[2,67]),o($VI,[2,68]),o($VI,[2,69]),{19:$V2,21:$V4,25:22,35:104,142:23,176:$V8,177:$V9},o($VM,[2,87]),o($VM,[2,88]),o($VM,[2,89]),o([7,18,19,20,21,22,27,30,44,51,61,62,66,67,68,85,86,88,89,90,91,95,96,98,99,100,101,102,103,105,107,113,116,124,129,130,144,145,146,147,152,160,161,165,169,170,172,173,174,175,176,177],[2,200]),o($VN,[2,167],{149:105}),o($VJ,[2,85]),{105:[1,106],110:107,111:108,112:109,113:$VO,116:$VP,160:$VQ},o($VR,[2,213]),o($VR,[2,214]),o($VR,[2,215]),o($VR,[2,216]),o($VJ,[2,92]),o($VJ,[2,93]),{85:[1,113]},{87:114,172:$VS,173:$VT,174:$VU,175:$VV},{87:119,172:$VS,173:$VT,174:$VU,175:$VV},{85:[1,121],87:124,93:120,95:[1,122],96:[1,123],172:$VS,173:$VT,174:$VU,175:$VV},{85:[1,125]},{85:[2,97]},{85:[2,98]},{85:[2,99]},o($VW,[2,106]),o($VW,[2,107]),o($VW,[2,108]),o($VW,[2,109]),{85:[2,110]},{85:[2,111]},{165:[1,127],166:[1,126]},o($Va,[2,8]),o($Va,[2,28]),o($Va,[2,29]),o($V0,[2,16]),{19:$V2,21:$V4,25:129,27:[1,128],176:$V8},o($Va,[2,24]),o($VG,[2,35],{43:130,44:[1,131]}),o($VH,[2,43],{50:132,51:[1,133]}),o($VI,[2,52]),o($VI,[2,56]),{61:[1,134]},o($VL,[2,75],{79:70,83:71,84:72,92:75,94:76,77:135,86:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,98:$Vv,99:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA}),o($VL,[2,77],{84:72,79:136,86:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu}),o($VM,[2,90]),o($VL,[2,78],{79:70,83:71,84:72,92:75,94:76,77:135,86:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,98:$Vv,99:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA}),o($VL,[2,79],{79:70,83:71,84:72,92:75,94:76,77:135,86:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,98:$Vv,99:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA}),o($VJ,[2,86]),o($VI,[2,70]),{19:$V2,21:$V4,25:142,27:[1,137],62:[1,143],85:$VX,87:144,95:$VY,96:$VZ,150:138,151:139,152:[1,140],153:141,168:145,169:$V_,170:$V$,172:$VS,173:$VT,174:$VU,175:$VV,176:$V8},{19:$Vd,21:$Ve,60:$V01,106:151,107:$V11,114:152,118:163,119:153,120:154,121:155,127:156,134:157,135:158,136:159,137:$V21,138:161,141:$V31,143:164,148:$V41,152:$VB,160:$V51,163:167,171:$V61,176:$VC},o($Vb,[2,117]),o($Vb,[2,113]),o($Vb,[2,114]),o($Vb,[2,115]),{19:$V2,21:$V4,25:22,35:171,142:23,176:$V8,177:$V9,178:170},{19:$Vd,21:$Ve,117:172,118:173,152:$VB,163:167,171:$V61,176:$VC},o($VJ,[2,94]),o($VJ,[2,95]),o($V71,[2,206]),o($V71,[2,207]),o($V71,[2,208]),o($V71,[2,209]),o($VJ,[2,96]),o($VJ,[2,100]),o($VJ,[2,102]),o($VJ,[2,103]),o($VJ,[2,104]),{97:[1,174]},o($VJ,[2,101]),o($V81,[2,190]),o($V81,[2,191]),o($V0,[2,21]),o($VF,[2,19]),o($VH,[2,38]),o($Vb,$Vc,{48:43,55:44,58:46,59:47,72:51,74:52,75:53,76:54,65:55,163:62,77:64,104:65,79:70,83:71,84:72,92:75,94:76,41:175,19:$Vd,21:$Ve,26:$Vf,56:$Vg,60:$Vh,62:$Vi,66:$Vj,67:$Vk,68:$Vl,70:$Vm,80:$Vn,81:$Vo,82:$Vp,86:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,98:$Vv,99:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA,152:$VB,176:$VC}),o($VI,[2,46]),o($Vb,$Vc,{55:44,58:46,59:47,72:51,74:52,75:53,76:54,65:55,163:62,77:64,104:65,79:70,83:71,84:72,92:75,94:76,48:176,19:$Vd,21:$Ve,26:$Vf,56:$Vg,60:$Vh,62:$Vi,66:$Vj,67:$Vk,68:$Vl,70:$Vm,80:$Vn,81:$Vo,82:$Vp,86:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,98:$Vv,99:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA,152:$VB,176:$VC}),o($VI,[2,58]),o($VJ,[2,82]),o($VM,[2,91]),o($VJ,[2,166]),o($VN,[2,168]),o($VN,[2,169]),o($VN,[2,170]),o($VN,[2,171]),o($VN,[2,177],{154:177,158:178,88:[1,179]}),{155:180,157:181,159:$V91},o($Va1,[2,192],{97:[1,184],167:[1,183]}),o($Va1,[2,195]),o($Va1,[2,196]),o($Va1,[2,197]),o($Va1,[2,203]),o($Va1,[2,204]),o($Va1,[2,205]),{107:[1,185]},{107:[2,119]},{107:[2,126]},{107:[2,127],122:186,123:187,124:$Vb1},{107:[2,128]},o($Vc1,$Vd1,{128:189,131:192,133:193,129:$Ve1,130:$Vf1}),{19:$Vd,21:$Ve,60:$V01,118:163,135:194,136:195,143:164,148:$V41,152:$VB,163:167,171:$V61,176:$VC},o($Vg1,[2,149]),o($Vg1,[2,151]),o($Vg1,[2,152]),o($Vg1,[2,153]),{19:$V2,21:$V4,25:196,142:197,176:$V8,177:$V9},o($Vb,$Vc,{72:51,74:52,75:53,76:54,163:62,77:64,79:70,83:71,84:72,92:75,94:76,39:198,40:199,45:200,52:201,57:202,58:204,63:205,69:208,104:212,19:$Vd,21:$Ve,26:$Vf,56:$Vh1,60:$Vi1,62:$Vj1,66:$Vk1,67:$Vl1,68:$Vm1,70:$Vm,80:$Vn,81:$Vo,82:$Vp,86:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,98:$Vv,99:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA,152:$VB,176:$VC}),{19:$Vd,21:$Ve,118:213,152:$VB,163:167,171:$V61,176:$VC},{19:$Vd,21:$Ve,60:$V01,118:163,120:218,121:216,125:214,126:215,127:217,134:157,135:158,136:159,137:$V21,138:161,141:$V31,143:164,148:$V41,152:$VB,160:$V51,163:167,171:$V61,176:$VC},{19:$V2,21:$V4,25:22,35:219,142:23,176:$V8,177:$V9},o($Vn1,[2,198]),o($Vn1,[2,199]),o([19,21,152,171,176],[2,165]),o($Vb,[2,218],{25:22,142:23,35:220,19:$V2,21:$V4,176:$V8,177:$V9}),o($Vo1,[2,219]),o($Vb,[2,123],{163:167,118:221,19:$Vd,21:$Ve,152:$VB,171:$V61,176:$VC}),o($Vp1,[2,124]),{19:$Vd,21:$Ve,74:222,152:$VB,163:62,176:$VC},o($VH,[2,36]),o($VI,[2,44]),o($VN,[2,172]),o($VN,[2,178]),o($Vq1,[2,174],{156:223}),o($VN,[2,173],{157:224,159:$V91}),o($Vq1,[2,179]),{19:$V2,21:$V4,25:225,176:$V8},o($Va1,[2,193]),{19:$Vd,21:$Ve,74:226,152:$VB,163:62,176:$VC},o([7,18,19,20,21,22,30,44,51,61,161,165,176,177],$Vr1,{108:227}),o([61,107],[2,129],{123:228,124:$Vb1}),o($Vc1,[2,131]),{19:$Vd,21:$Ve,60:$V01,118:163,120:229,127:156,134:157,135:158,136:159,137:$V21,138:161,141:$V31,143:164,148:$V41,152:$VB,160:$V51,163:167,171:$V61,176:$VC},o($Vc1,[2,135]),o($Vc1,[2,137],{134:157,135:158,136:159,138:161,118:163,143:164,163:167,127:230,19:$Vd,21:$Ve,60:$V01,137:$V21,141:$V31,148:$V41,152:$VB,160:$V51,171:$V61,176:$VC}),o($Vc1,[2,138],{134:157,135:158,136:159,138:161,118:163,143:164,163:167,127:231,19:$Vd,21:$Ve,60:$V01,137:$V21,141:$V31,148:$V41,152:$VB,160:$V51,171:$V61,176:$VC}),o($Vc1,$Vs1,{132:232,133:233,129:$Vt1,130:$Vu1}),o($Vg1,[2,146]),o($Vg1,[2,148]),o($Vg1,[2,150]),o($Vv1,[2,157]),o($Vv1,[2,158]),o($Vw1,$Vx1,{139:236,140:237,144:$Vy1,145:$Vz1,146:$VA1,147:$VB1}),o($VC1,[2,34]),o($VD1,[2,41],{46:242}),o($VE1,[2,49],{53:243}),o($VE1,[2,53]),o($Vb,$Vc,{72:51,74:52,75:53,76:54,163:62,77:64,79:70,83:71,84:72,92:75,94:76,58:204,63:205,69:208,104:212,57:244,19:$Vd,21:$Ve,26:$Vf,60:$Vi1,62:$Vj1,66:$Vk1,67:$Vl1,68:$Vm1,70:$Vm,80:$Vn,81:$Vo,82:$Vp,86:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,98:$Vv,99:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA,152:$VB,176:$VC}),o($VE1,[2,60],{69:208,104:212,63:245,66:$Vk1,67:$Vl1,68:$Vm1,105:$Vc,113:$Vc,116:$Vc,160:$Vc}),o($VE1,[2,65],{72:51,74:52,75:53,76:54,163:62,77:64,79:70,83:71,84:72,92:75,94:76,64:246,58:247,19:$Vd,21:$Ve,26:$Vf,70:$Vm,80:$Vn,81:$Vo,82:$Vp,86:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,98:$Vv,99:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA,152:$VB,176:$VC}),o($Vb,$Vc,{38:41,41:42,48:43,55:44,58:46,59:47,72:51,74:52,75:53,76:54,65:55,163:62,77:64,104:65,79:70,83:71,84:72,92:75,94:76,32:248,19:$Vd,21:$Ve,26:$Vf,56:$Vg,60:$Vh,62:$Vi,66:$Vj,67:$Vk,68:$Vl,70:$Vm,80:$Vn,81:$Vo,82:$Vp,86:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,98:$Vv,99:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA,152:$VB,176:$VC}),o($VE1,[2,64]),o($VF1,[2,71]),o($VF1,[2,72]),o($VF1,[2,73]),{19:$V2,21:$V4,25:22,35:249,142:23,176:$V8,177:$V9},{105:[1,250],110:107,111:108,112:109,113:$VO,116:$VP,160:$VQ},o($Vb,$Vc,{72:51,74:52,75:53,76:54,163:62,77:64,79:70,83:71,84:72,92:75,94:76,40:199,45:200,52:201,57:202,58:204,63:205,69:208,104:212,39:251,19:$Vd,21:$Ve,26:$Vf,56:$Vh1,60:$Vi1,62:$Vj1,66:$Vk1,67:$Vl1,68:$Vm1,70:$Vm,80:$Vn,81:$Vo,82:$Vp,86:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,98:$Vv,99:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA,152:$VB,176:$VC}),{61:[1,252]},{61:[2,133]},{61:[2,134]},{124:$Vd1,128:189,129:$Ve1,130:$Vf1,131:253,133:193},{122:186,123:187,124:$Vb1},o($Vg1,[2,183]),o($Vo1,[2,220]),o($Vp1,[2,125]),o($VJ,[2,105]),o($VN,[2,176],{157:254,159:$V91}),o($Vq1,[2,180]),o($Vq1,[2,181],{88:[1,255]}),o($Va1,[2,194]),o([7,18,19,20,21,22,30,44,51,61,165,176,177],$VG1,{109:256,115:257,164:258,161:$VH1}),o($Vc1,[2,132]),o($Vc1,[2,130]),o($Vg1,[2,144]),o($Vg1,[2,145]),o($Vc1,$VI1),o($Vg1,[2,147]),o($Vc1,[2,141],{134:157,135:158,136:159,138:161,118:163,143:164,163:167,127:230,19:$Vd,21:$Ve,60:$V01,137:$V21,141:$V31,148:$V41,152:$VB,160:$V51,171:$V61,176:$VC}),o($Vc1,[2,142],{134:157,135:158,136:159,138:161,118:163,143:164,163:167,127:231,19:$Vd,21:$Ve,60:$V01,137:$V21,141:$V31,148:$V41,152:$VB,160:$V51,171:$V61,176:$VC}),o($Vw1,$Vr1,{108:260}),o($Vw1,[2,156]),o($Vw1,[2,161]),o($Vw1,[2,162]),o($Vw1,[2,163]),o($Vw1,[2,164]),o($VC1,[2,39],{47:261,44:[1,262]}),o($VD1,[2,47],{54:263,51:[1,264]}),o($VE1,[2,54]),o($VE1,[2,61]),o($VE1,[2,62]),o($VE1,[2,66]),{61:[1,265]},o($VF1,[2,74]),{19:$Vd,21:$Ve,60:$V01,106:266,107:$V11,114:152,118:163,119:153,120:154,121:155,127:156,134:157,135:158,136:159,137:$V21,138:161,141:$V31,143:164,148:$V41,152:$VB,160:$V51,163:167,171:$V61,176:$VC},o($Vw1,$Vx1,{140:237,139:267,144:$Vy1,145:$Vz1,146:$VA1,147:$VB1}),o($Vw1,$Vx1,{140:237,139:268,144:$Vy1,145:$Vz1,146:$VA1,147:$VB1}),o([61,124],$Vs1,{133:233,132:269,129:$Vt1,130:$Vu1}),o($Vq1,[2,175]),o($Vq1,[2,182]),o($VI,[2,112]),o($VJ1,[2,121]),o([7,18,19,20,21,22,30,44,51,61,107,124,129,130,176,177],[2,187],{34:270,165:$V7}),{19:$Vd,21:$Ve,118:271,152:$VB,163:167,171:$V61,176:$VC},o($VK1,$VG1,{115:257,164:258,109:272,161:$VH1}),o($VD1,[2,42]),o($Vb,$Vc,{72:51,74:52,75:53,76:54,163:62,77:64,79:70,83:71,84:72,92:75,94:76,52:201,57:202,58:204,63:205,69:208,104:212,45:273,19:$Vd,21:$Ve,26:$Vf,56:$Vh1,60:$Vi1,62:$Vj1,66:$Vk1,67:$Vl1,68:$Vm1,70:$Vm,80:$Vn,81:$Vo,82:$Vp,86:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,98:$Vv,99:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA,152:$VB,176:$VC}),o($VE1,[2,50]),o($Vb,$Vc,{72:51,74:52,75:53,76:54,163:62,77:64,79:70,83:71,84:72,92:75,94:76,57:202,58:204,63:205,69:208,104:212,52:274,19:$Vd,21:$Ve,26:$Vf,56:$Vh1,60:$Vi1,62:$Vj1,66:$Vk1,67:$Vl1,68:$Vm1,70:$Vm,80:$Vn,81:$Vo,82:$Vp,86:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,98:$Vv,99:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA,152:$VB,176:$VC}),o($VE1,[2,63]),{107:[1,275]},o($Vw1,$Vr1,{108:276}),o($Vw1,$Vr1,{108:277}),{61:[2,143],124:$VI1},o($V81,[2,189]),{19:$Vd,21:$Ve,85:$VX,87:144,95:$VY,96:$VZ,152:$VB,153:280,162:278,163:279,168:145,169:$V_,170:$V$,172:$VS,173:$VT,174:$VU,175:$VV,176:$VC},o($Vg1,[2,159]),o($VD1,[2,40]),o($VE1,[2,48]),o($VF1,[2,122]),o($VK1,$VG1,{115:257,164:258,109:281,161:$VH1}),o($VK1,$VG1,{115:257,164:258,109:282,161:$VH1}),o($VJ1,[2,184]),o($VJ1,[2,185]),o($VJ1,[2,186]),o($Vg1,[2,160]),o($Vg1,[2,154])],
defaultActions: {6:[2,11],29:[2,1],77:[2,97],78:[2,98],79:[2,99],84:[2,110],85:[2,111],152:[2,119],153:[2,126],155:[2,128],215:[2,133],216:[2,134]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = new Error();

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  /*
    ShEx parser in the Jison parser generator format.
  */

  // Common namespaces and entities
  var RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
      RDF_TYPE  = RDF + 'type',
      RDF_FIRST = RDF + 'first',
      RDF_REST  = RDF + 'rest',
      RDF_NIL   = RDF + 'nil',
      XSD = 'http://www.w3.org/2001/XMLSchema#',
      XSD_INTEGER  = XSD + 'integer',
      XSD_DECIMAL  = XSD + 'decimal',
      XSD_FLOAT   = XSD + 'float',
      XSD_DOUBLE   = XSD + 'double',
      XSD_BOOLEAN  = XSD + 'boolean',
      XSD_TRUE =  '"true"^^'  + XSD_BOOLEAN,
      XSD_FALSE = '"false"^^' + XSD_BOOLEAN,
      XSD_PATTERN        = XSD + 'pattern',
      XSD_MININCLUSIVE   = XSD + 'minInclusive',
      XSD_MINEXCLUSIVE   = XSD + 'minExclusive',
      XSD_MAXINCLUSIVE   = XSD + 'maxInclusive',
      XSD_MAXEXCLUSIVE   = XSD + 'maxExclusive',
      XSD_LENGTH         = XSD + 'length',
      XSD_MINLENGTH      = XSD + 'minLength',
      XSD_MAXLENGTH      = XSD + 'maxLength',
      XSD_TOTALDIGITS    = XSD + 'totalDigits',
      XSD_FRACTIONDIGITS = XSD + 'fractionDigits';

  var numericDatatypes = [
      XSD + "integer",
      XSD + "decimal",
      XSD + "float",
      XSD + "double",
      XSD + "string",
      XSD + "boolean",
      XSD + "dateTime",
      XSD + "nonPositiveInteger",
      XSD + "negativeInteger",
      XSD + "long",
      XSD + "int",
      XSD + "short",
      XSD + "byte",
      XSD + "nonNegativeInteger",
      XSD + "unsignedLong",
      XSD + "unsignedInt",
      XSD + "unsignedShort",
      XSD + "unsignedByte",
      XSD + "positiveInteger"
  ];

  var absoluteIRI = /^[a-z][a-z0-9+.-]*:/i,
    schemeAuthority = /^(?:([a-z][a-z0-9+.-]*:))?(?:\/\/[^\/]*)?/i,
    dotSegments = /(?:^|\/)\.\.?(?:$|[\/#?])/;

  var numericFacets = ["mininclusive", "minexclusive",
                       "maxinclusive", "maxexclusive"];

  // Returns a lowercase version of the given string
  function lowercase(string) {
    return string.toLowerCase();
  }

  // Appends the item to the array and returns the array
  function appendTo(array, item) {
    return array.push(item), array;
  }

  // Appends the items to the array and returns the array
  function appendAllTo(array, items) {
    return array.push.apply(array, items), array;
  }

  // Extends a base object with properties of other objects
  function extend(base) {
    if (!base) base = {};
    for (var i = 1, l = arguments.length, arg; i < l && (arg = arguments[i] || {}); i++)
      for (var name in arg)
        base[name] = arg[name];
    return base;
  }

  // Creates an array that contains all items of the given arrays
  function unionAll() {
    var union = [];
    for (var i = 0, l = arguments.length; i < l; i++)
      union = union.concat.apply(union, arguments[i]);
    return union;
  }

  // N3.js:lib/N3Parser.js<0.4.5>:58 with
  //   s/this\./Parser./g
  // ### `_setBase` sets the base IRI to resolve relative IRIs.
  Parser._setBase = function (baseIRI) {
    if (!baseIRI)
      baseIRI = null;

    // baseIRI '#' check disabled to allow -x 'data:text/shex,...#'
    // else if (baseIRI.indexOf('#') >= 0)
    //   throw new Error('Invalid base IRI ' + baseIRI);

    // Set base IRI and its components
    if (Parser._base = baseIRI) {
      Parser._basePath   = baseIRI.replace(/[^\/?]*(?:\?.*)?$/, '');
      baseIRI = baseIRI.match(schemeAuthority);
      Parser._baseRoot   = baseIRI[0];
      Parser._baseScheme = baseIRI[1];
    }
  }

  // N3.js:lib/N3Parser.js<0.4.5>:576 with
  //   s/this\./Parser./g
  //   s/token/iri/
  // ### `_resolveIRI` resolves a relative IRI token against the base path,
  // assuming that a base path has been set and that the IRI is indeed relative.
  function _resolveIRI (iri) {
    switch (iri[0]) {
    // An empty relative IRI indicates the base IRI
    case undefined: return Parser._base;
    // Resolve relative fragment IRIs against the base IRI
    case '#': return Parser._base + iri;
    // Resolve relative query string IRIs by replacing the query string
    case '?': return Parser._base.replace(/(?:\?.*)?$/, iri);
    // Resolve root-relative IRIs at the root of the base IRI
    case '/':
      // Resolve scheme-relative IRIs to the scheme
      return (iri[1] === '/' ? Parser._baseScheme : Parser._baseRoot) + _removeDotSegments(iri);
    // Resolve all other IRIs at the base IRI's path
    default: {
      return _removeDotSegments(Parser._basePath + iri);
    }
    }
  }

  // ### `_removeDotSegments` resolves './' and '../' path segments in an IRI as per RFC3986.
  function _removeDotSegments (iri) {
    // Don't modify the IRI if it does not contain any dot segments
    if (!dotSegments.test(iri))
      return iri;

    // Start with an imaginary slash before the IRI in order to resolve trailing './' and '../'
    var result = '', length = iri.length, i = -1, pathStart = -1, segmentStart = 0, next = '/';

    while (i < length) {
      switch (next) {
      // The path starts with the first slash after the authority
      case ':':
        if (pathStart < 0) {
          // Skip two slashes before the authority
          if (iri[++i] === '/' && iri[++i] === '/')
            // Skip to slash after the authority
            while ((pathStart = i + 1) < length && iri[pathStart] !== '/')
              i = pathStart;
        }
        break;
      // Don't modify a query string or fragment
      case '?':
      case '#':
        i = length;
        break;
      // Handle '/.' or '/..' path segments
      case '/':
        if (iri[i + 1] === '.') {
          next = iri[++i + 1];
          switch (next) {
          // Remove a '/.' segment
          case '/':
            result += iri.substring(segmentStart, i - 1);
            segmentStart = i + 1;
            break;
          // Remove a trailing '/.' segment
          case undefined:
          case '?':
          case '#':
            return result + iri.substring(segmentStart, i) + iri.substr(i + 1);
          // Remove a '/..' segment
          case '.':
            next = iri[++i + 1];
            if (next === undefined || next === '/' || next === '?' || next === '#') {
              result += iri.substring(segmentStart, i - 2);
              // Try to remove the parent path from result
              if ((segmentStart = result.lastIndexOf('/')) >= pathStart)
                result = result.substr(0, segmentStart);
              // Remove a trailing '/..' segment
              if (next !== '/')
                return result + '/' + iri.substr(i + 1);
              segmentStart = i + 1;
            }
          }
        }
      }
      next = iri[++i];
    }
    return result + iri.substring(segmentStart);
  }

  Parser._setTermResolver = function (res) {
    Parser._termResolver = res;
  }

  // Creates an expression with the given type and attributes
  function expression(expr, attr) {
    var expression = { expression: expr };
    if (attr)
      for (var a in attr)
        expression[a] = attr[a];
    return expression;
  }

  // Creates a path with the given type and items
  function path(type, items) {
    return { type: 'path', pathType: type, items: items };
  }

  // Creates a literal with the given value and type
  function createLiteral(value, type) {
    return '"' + value + '"^^' + type;
  }

  // Creates a new blank node identifier
  function blank() {
    return '_:b' + blankId++;
  };
  var blankId = 0;
  Parser._resetBlanks = function () { blankId = 0; }
  Parser.reset = function () {
    Parser._prefixes = Parser._termResolver = Parser.valueExprDefns = Parser.shapes = Parser.start = Parser.startActs = null; // Reset state.
    Parser._base = Parser._baseIRI = Parser._baseIRIPath = Parser._baseIRIRoot = null;
  }
  var _fileName; // for debugging
  Parser._setFileName = function (fn) { _fileName = fn; }

  // Regular expression and replacement strings to escape strings
  var stringEscapeSequence = /\\u([a-fA-F0-9]{4})|\\U([a-fA-F0-9]{8})|\\(.)/g,
      irirefEscapeSequence = /\\u([a-fA-F0-9]{4})|\\U([a-fA-F0-9]{8})/g,
      stringEscapeReplacements = { '\\': '\\', "'": "'", '"': '"',
                             't': '\t', 'b': '\b', 'n': '\n', 'r': '\r', 'f': '\f' },
      semactEscapeReplacements = { '\\': '\\', '%': '%' },
      fromCharCode = String.fromCharCode;

  function unescape(string, regex, replacements) {
    try {
      string = string.replace(regex, function (sequence, unicode4, unicode8, escapedChar) {
        var charCode;
        if (unicode4) {
          charCode = parseInt(unicode4, 16);
          if (isNaN(charCode)) throw new Error(); // can never happen (regex), but helps performance
          return fromCharCode(charCode);
        }
        else if (unicode8) {
          charCode = parseInt(unicode8, 16);
          if (isNaN(charCode)) throw new Error(); // can never happen (regex), but helps performance
          if (charCode < 0xFFFF) return fromCharCode(charCode);
          return fromCharCode(0xD800 + ((charCode -= 0x10000) >> 10), 0xDC00 + (charCode & 0x3FF));
        }
        else {
          var replacement = replacements[escapedChar];
          if (!replacement) throw new Error();
          return replacement;
        }
      });
      return string;
    }
    catch (error) { return ''; }
  };

  // Translates string escape codes in the string into their textual equivalent
  function unescapeString(string, trimLength) {
    string = string.substring(trimLength, string.length - trimLength);
    return '"' + unescape(string, stringEscapeSequence, stringEscapeReplacements) + '"';
  }

  // Convenience function to return object with p1 key, value p2
  function keyValObject(key, val) {
    var ret = {};
    ret[key] = val;
    return ret;
  }

  // Return object with p1 key, p2 string value
  function unescapeSemanticAction(key, string) {
    string = string.substring(1, string.length - 2);
    return {
      type: "SemAct",
      name: key,
      code: unescape(string, stringEscapeSequence, semactEscapeReplacements)
    };
  }

  function error (msg) {
    Parser._prefixes = Parser._termResolver = Parser.valueExprDefns = Parser.shapes = Parser.start = Parser.startActs = null; // Reset state.
    Parser._base = Parser._baseIRI = Parser._baseIRIPath = Parser._baseIRIRoot = '';
    throw new Error(msg);
  }

  // Expand declared prefix or throw Error
  function expandPrefix (prefix) {
    if (!(prefix in Parser._prefixes))
      error('Parse error; unknown prefix: ' + prefix);
    return Parser._prefixes[prefix];
  }

  // Add a shape to the map
  function addShape (label, shape) {
    if (!Parser.shapes)
      Parser.shapes = {};
    if (label in Parser.shapes) {
      if (Parser.options.duplicateShape === "abort")
        error("Parse error: "+label+" alread defined");
      else if (Parser.options.duplicateShape !== "ignore")
        Parser.shapes[label] = shape;
    } else
      Parser.shapes[label] = shape;
  }

  function shapeJunction (type, container, elts) {
    if (elts.length === 0) {
      return container;
    } else if (container.type === type) {
      container.shapeExprs = container.shapeExprs.concat(elts);
      return container;
    } else {
      return { type: type, shapeExprs: [container].concat(elts) };
    }
  }

  var EmptyObject = {  };
  var EmptyShape = { type: "Shape" };
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/**/
break;
case 1:return 66;
break;
case 2:return 67;
break;
case 3:return 167;
break;
case 4:return 68;
break;
case 5:return 176;
break;
case 6:return 147;
break;
case 7:return 96;
break;
case 8:return 95;
break;
case 9:return 85;
break;
case 10:return 'ANON';
break;
case 11:return 19;
break;
case 12:return 21;
break;
case 13:return 171;
break;
case 14:return 177;
break;
case 15:return 166;
break;
case 16:return 173;
break;
case 17:return 175;
break;
case 18:return 172;
break;
case 19:return 174;
break;
case 20:return 152;
break;
case 21:return 18;
break;
case 22:return 20;
break;
case 23:return 22;
break;
case 24:return 30;
break;
case 25:return 37;
break;
case 26:return 'IT_VIRTUAL';
break;
case 27:return 113;
break;
case 28:return 116;
break;
case 29:return 70;
break;
case 30:return 81;
break;
case 31:return 80;
break;
case 32:return 82;
break;
case 33:return 86;
break;
case 34:return 51;
break;
case 35:return 44;
break;
case 36:return 56;
break;
case 37:return 98;
break;
case 38:return 99;
break;
case 39:return 100;
break;
case 40:return 101;
break;
case 41:return 89;
break;
case 42:return 90;
break;
case 43:return 91;
break;
case 44:return 102;
break;
case 45:return 103;
break;
case 46:return 31;
break;
case 47:return 161;
break;
case 48:return 105;
break;
case 49:return 107;
break;
case 50:return 160;
break;
case 51:return '||';
break;
case 52:return 124;
break;
case 53:return 129;
break;
case 54:return 60;
break;
case 55:return 61;
break;
case 56:return 26;
break;
case 57:return 27;
break;
case 58:return 141;
break;
case 59:return '!';
break;
case 60:return 97;
break;
case 61:return 148;
break;
case 62:return 62;
break;
case 63:return 88;
break;
case 64:return 130;
break;
case 65:return 144;
break;
case 66:return 145;
break;
case 67:return 146;
break;
case 68:return 159;
break;
case 69:return 165;
break;
case 70:return 169;
break;
case 71:return 170;
break;
case 72:return 7;
break;
case 73:return 'invalid character '+yy_.yytext;
break;
}
},
rules: [/^(?:\s+|(#[^\u000a\u000d]*))/,/^(?:(@((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:)(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|:|[0-9]|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))*(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%)))))?)))/,/^(?:(@(([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:))/,/^(?:(@([A-Za-z])+((-([0-9A-Za-z])+))*))/,/^(?:@)/,/^(?:(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:)(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|:|[0-9]|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))*(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%)))))?)))/,/^(?:(\{((([+-])?([0-9])+))((,(((([+-])?([0-9])+))|\*)?))?\}))/,/^(?:(([+-])?((([0-9])+\.([0-9])*(([Ee]([+-])?([0-9])+)))|((\.)?([0-9])+(([Ee]([+-])?([0-9])+))))))/,/^(?:(([+-])?([0-9])*\.([0-9])+))/,/^(?:(([+-])?([0-9])+))/,/^(?:{ANON})/,/^(?:(<([^\u0000-\u0020<>\"{}|^`\\]|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*>))/,/^(?:((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:))/,/^(?:a\b)/,/^(?:(_:((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|[0-9])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?))/,/^(?:(\{([^%\\]|\\[%\\]|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*%\}))/,/^(?:('''(('|'')?([^\'\\]|(\\[\"\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*'''))/,/^(?:("""(("|"")?([^\"\\]|(\\[\"\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*"""))/,/^(?:('([^\u0027\u005c\u000a\u000d]|(\\[\"\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*'))/,/^(?:("([^\u0022\u005c\u000a\u000d]|(\\[\"\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*"))/,/^(?:(`([^\u0060\u005c\u000a\u000d]|(\\[\"\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*`))/,/^(?:([Bb][Aa][Ss][Ee]))/,/^(?:([Pp][Rr][Ee][Ff][Ii][Xx]))/,/^(?:([Ll][Aa][Bb][Ee][Ll]))/,/^(?:([sS][tT][aA][rR][tT]))/,/^(?:([eE][xX][tT][eE][rR][nN][aA][lL]))/,/^(?:([Vv][Ii][Rr][Tt][Uu][Aa][Ll]))/,/^(?:([Cc][Ll][Oo][Ss][Ee][Dd]))/,/^(?:([Ee][Xx][Tt][Rr][Aa]))/,/^(?:([Ll][Ii][Tt][Ee][Rr][Aa][Ll]))/,/^(?:([Bb][Nn][Oo][Dd][Ee]))/,/^(?:([Ii][Rr][Ii]))/,/^(?:([Nn][Oo][Nn][Ll][Ii][Tt][Ee][Rr][Aa][Ll]))/,/^(?:([Pp][Aa][Tt][Tt][Ee][Rr][Nn]))/,/^(?:([Aa][Nn][Dd]))/,/^(?:([Oo][Rr]))/,/^(?:([No][Oo][Tt]))/,/^(?:([Mm][Ii][Nn][Ii][Nn][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Mm][Ii][Nn][Ee][Xx][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Mm][Aa][Xx][Ii][Nn][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Mm][Aa][Xx][Ee][Xx][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Ll][Ee][Nn][Gg][Tt][Hh]))/,/^(?:([Mm][Ii][Nn][Ll][Ee][Nn][Gg][Tt][Hh]))/,/^(?:([Mm][Aa][Xx][Ll][Ee][Nn][Gg][Tt][Hh]))/,/^(?:([Tt][Oo][Tt][Aa][Ll][Dd][Ii][Gg][Ii][Tt][Ss]))/,/^(?:([Ff][Rr][Aa][Cc][Tt][Ii][Oo][Nn][Dd][Ii][Gg][Ii][Tt][Ss]))/,/^(?:=)/,/^(?:\/\/)/,/^(?:\{)/,/^(?:\})/,/^(?:&)/,/^(?:\|\|)/,/^(?:\|)/,/^(?:,)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\$)/,/^(?:!)/,/^(?:\^\^)/,/^(?:\^)/,/^(?:\.)/,/^(?:~)/,/^(?:;)/,/^(?:\*)/,/^(?:\+)/,/^(?:\?)/,/^(?:-)/,/^(?:%)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = ShExJison;
exports.Parser = ShExJison.Parser;
exports.parse = function () { return ShExJison.parse.apply(ShExJison, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}