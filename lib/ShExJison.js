/* parser generated by jison 0.4.16 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ShExJison = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[7,18,19,20,21,22,30,185,194,195],$V1=[1,11],$V2=[1,25],$V3=[1,12],$V4=[1,27],$V5=[1,13],$V6=[1,19],$V7=[1,24],$V8=[1,26],$V9=[1,28],$Va=[7,18,19,20,21,22,30,194,195],$Vb=[19,21,26,67,69,77,88,89,90,93,94,95,96,104,105,106,107,108,109,111,119,122,157,180,194],$Vc=[2,36],$Vd=[1,42],$Ve=[1,44],$Vf=[1,45],$Vg=[1,46],$Vh=[7,18,19,20,21,22,26,30,38,42,50,53,67,68,69,74,75,76,77,88,89,90,93,94,95,96,104,105,106,107,108,109,111,113,119,122,130,135,136,149,150,151,152,157,180,181,185,194,195],$Vi=[7,18,19,20,21,22,26,27,30,38,42,50,53,67,68,69,74,75,76,77,88,89,90,92,93,94,95,96,100,101,102,104,105,106,107,108,109,111,113,119,122,130,135,136,149,150,151,152,153,157,167,168,179,180,181,185,186,187,190,191,192,194,195],$Vj=[19,21,27,194],$Vk=[111,119,122,180],$Vl=[2,136],$Vm=[1,82],$Vn=[1,84],$Vo=[1,77],$Vp=[1,58],$Vq=[1,62],$Vr=[1,63],$Vs=[1,66],$Vt=[1,72],$Vu=[1,73],$Vv=[1,74],$Vw=[1,81],$Vx=[1,88],$Vy=[1,89],$Vz=[1,90],$VA=[1,91],$VB=[1,92],$VC=[1,93],$VD=[1,94],$VE=[1,95],$VF=[1,96],$VG=[1,85],$VH=[1,83],$VI=[1,110],$VJ=[1,111],$VK=[7,18,19,20,21,22,30,50,53,68,88,89,90,93,94,95,96,113,130,135,136,149,150,151,152,181,185,194,195],$VL=[7,18,19,20,21,22,30,68,113,130,135,136,149,150,151,152,181,185,194,195],$VM=[7,18,19,20,21,22,30,50,68,113,130,135,136,149,150,151,152,181,185,194,195],$VN=[7,18,19,20,21,22,30,50,53,68,113,130,135,136,149,150,151,152,181,185,194,195],$VO=[7,18,19,20,21,22,30,50,53,68,74,75,76,111,113,119,122,130,135,136,149,150,151,152,180,181,185,194,195],$VP=[7,18,19,20,21,22,30,50,53,68,93,94,95,96,104,105,106,107,108,109,113,130,135,136,149,150,151,152,181,185,194,195],$VQ=[2,99],$VR=[7,18,19,20,21,22,30,50,53,68,74,75,76,93,94,95,96,111,113,119,122,130,135,136,149,150,151,152,180,181,185,194,195],$VS=[19,21,27,69,92,100,101,102,157,179,187,190,191,194],$VT=[7,18,19,20,21,22,30,50,53,68,104,105,106,107,108,109,113,130,135,136,149,150,151,152,181,185,194,195],$VU=[1,135],$VV=[1,137],$VW=[1,136],$VX=[7,18,19,20,21,22,30,50,53,68,74,75,76,93,94,95,96,104,105,106,107,108,109,111,113,119,122,130,135,136,149,150,151,152,180,181,185,194,195],$VY=[7,18,19,20,21,22,26,27,30,42,50,53,67,68,69,74,75,76,77,88,89,90,92,93,94,95,96,100,101,102,104,105,106,107,108,109,111,113,119,122,130,135,136,149,150,151,152,157,167,168,179,180,181,185,187,190,191,192,194,195],$VZ=[92,100,101,102],$V_=[7,18,19,20,21,22,30,68,194,195],$V$=[2,38],$V01=[7,18,19,20,21,22,30,50,53,68,194,195],$V11=[7,18,19,20,21,22,30,50,68,194,195],$V21=[1,160],$V31=[1,164],$V41=[1,165],$V51=[7,18,19,20,21,22,30,50,53,68,88,89,90,93,94,95,96,113,130,135,136,185,194,195],$V61=[1,191],$V71=[1,192],$V81=[1,193],$V91=[1,186],$Va1=[1,190],$Vb1=[1,185],$Vc1=[1,188],$Vd1=[1,189],$Ve1=[1,207],$Vf1=[2,138],$Vg1=[1,200],$Vh1=[1,203],$Vi1=[1,211],$Vj1=[1,208],$Vk1=[1,210],$Vl1=[7,18,19,20,21,22,30,50,53,68,88,89,90,93,94,95,96,194,195],$Vm1=[7,18,19,20,21,22,27,30,50,53,68,69,88,89,90,92,93,94,95,96,100,101,102,113,130,135,136,157,167,168,179,181,185,187,190,191,194,195],$Vn1=[1,248],$Vo1=[68,113,130],$Vp1=[2,156],$Vq1=[1,250],$Vr1=[1,251],$Vs1=[68,113,130,135,136],$Vt1=[19,21,26,42,67,69,74,75,76,77,88,89,90,92,93,94,95,96,100,101,102,104,105,106,107,108,109,111,119,122,157,180,187,190,191,192,194],$Vu1=[19,21,111,119,122,180,194,195],$Vv1=[19,21,111,119,122,157,180,192,194],$Vw1=[1,272],$Vx1=[1,274],$Vy1=[1,276],$Vz1=[19,21,27,69,92,100,101,102,157,168,179,187,190,191,194],$VA1=[2,160],$VB1=[1,290],$VC1=[1,291],$VD1=[19,21,67,68,113,130,135,136,153,157,192,194],$VE1=[68,113,130,135,136,181,185],$VF1=[2,175],$VG1=[1,296],$VH1=[1,297],$VI1=[1,298],$VJ1=[1,299],$VK1=[2,140],$VL1=[2,159],$VM1=[2,230],$VN1=[1,317],$VO1=[68,113,130,135,136,185],$VP1=[7,18,19,20,21,22,30,50,53,68,88,89,90,93,94,95,96,113,130,135,136,181,185,194,195];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"shexDoc":3,"initParser":4,"Qdirective_E_Star":5,"Q_O_QnotStartAction_E_Or_QstartActions_E_S_Qstatement_E_Star_C_E_Opt":6,"EOF":7,"directive":8,"O_QnotStartAction_E_Or_QstartActions_E_C":9,"notStartAction":10,"startActions":11,"Qstatement_E_Star":12,"statement":13,"O_QnotStartAction_E_Or_QstartActions_E_S_Qstatement_E_Star_C":14,"baseDecl":15,"prefixDecl":16,"labelDecl":17,"IT_BASE":18,"IRIREF":19,"IT_PREFIX":20,"PNAME_NS":21,"IT_LABEL":22,"O_Qiri_E_Or_QGT_LBRACKET_E_S_Qiri_E_Star_S_QGT_RBRACKET_E_C":23,"Qiri_E_Star":24,"iri":25,"[":26,"]":27,"start":28,"shapeExprDecl":29,"IT_start":30,"=":31,"inlineShapeExpression":32,"QcodeDecl_E_Plus":33,"codeDecl":34,"shapeExprLabel":35,"O_QshapeExpression_E_Or_QIT_EXTERNAL_E_C":36,"shapeExpression":37,"IT_EXTERNAL":38,"QIT_NOT_E_Opt":39,"shapeAtomNoRef":40,"QshapeOr_E_Opt":41,"IT_NOT":42,"shapeRef":43,"shapeOr":44,"inlineShapeOr":45,"Q_O_QIT_OR_E_S_QshapeAnd_E_C_E_Plus":46,"Q_O_QIT_AND_E_S_QshapeNot_E_C_E_Plus":47,"Q_O_QIT_OR_E_S_QshapeAnd_E_C_E_Star":48,"O_QIT_OR_E_S_QshapeAnd_E_C":49,"IT_OR":50,"shapeAnd":51,"O_QIT_AND_E_S_QshapeNot_E_C":52,"IT_AND":53,"shapeNot":54,"inlineShapeAnd":55,"Q_O_QIT_OR_E_S_QinlineShapeAnd_E_C_E_Star":56,"O_QIT_OR_E_S_QinlineShapeAnd_E_C":57,"Q_O_QIT_AND_E_S_QshapeNot_E_C_E_Star":58,"inlineShapeNot":59,"Q_O_QIT_AND_E_S_QinlineShapeNot_E_C_E_Star":60,"O_QIT_AND_E_S_QinlineShapeNot_E_C":61,"shapeAtom":62,"inlineShapeAtom":63,"nonLitNodeConstraint":64,"shapeOrRef":65,"litNodeConstraint":66,"(":67,")":68,".":69,"QnonLitNodeConstraint_E_Opt":70,"shapeDefinition":71,"inlineShapeOrRef":72,"inlineShapeDefinition":73,"ATPNAME_LN":74,"ATPNAME_NS":75,"@":76,"IT_LITERAL":77,"QxsFacet_E_Star":78,"datatype":79,"valueSet":80,"QnumericFacet_E_Plus":81,"xsFacet":82,"nonLiteralKind":83,"QstringFacet_E_Plus":84,"numericFacet":85,"QstringFacet_E_Star":86,"stringFacet":87,"IT_IRI":88,"IT_BNODE":89,"IT_NONLITERAL":90,"stringLength":91,"INTEGER":92,"REGEXP":93,"IT_LENGTH":94,"IT_MINLENGTH":95,"IT_MAXLENGTH":96,"numericRange":97,"rawNumeric":98,"numericLength":99,"DECIMAL":100,"DOUBLE":101,"STRING":102,"^^":103,"IT_MININCLUSIVE":104,"IT_MINEXCLUSIVE":105,"IT_MAXINCLUSIVE":106,"IT_MAXEXCLUSIVE":107,"IT_TOTALDIGITS":108,"IT_FRACTIONDIGITS":109,"Q_O_QincludeSet_E_Or_QextraPropertySet_E_Or_QIT_CLOSED_E_C_E_Star":110,"{":111,"QtripleExpression_E_Opt":112,"}":113,"Qannotation_E_Star":114,"semanticActions":115,"O_QincludeSet_E_Or_QextraPropertySet_E_Or_QIT_CLOSED_E_C":116,"includeSet":117,"extraPropertySet":118,"IT_CLOSED":119,"tripleExpression":120,"annotation":121,"IT_EXTRA":122,"Qpredicate_E_Plus":123,"predicate":124,"oneOfTripleExpr":125,"groupTripleExpr":126,"multiElementOneOf":127,"Q_O_QGT_PIPE_E_S_QgroupTripleExpr_E_C_E_Plus":128,"O_QGT_PIPE_E_S_QgroupTripleExpr_E_C":129,"|":130,"innerTripleExpr":131,"multiElementGroup":132,"unaryTripleExpr":133,"groupTripleExpr_right":134,",":135,";":136,"Q_O_QGT_COMMA_E_S_QunaryTripleExpr_E_C_E_Plus":137,"QGT_COMMA_E_Opt":138,"O_QGT_COMMA_E_S_QunaryTripleExpr_E_C":139,"$":140,"tripleExprLabel":141,"tripleConstraint":142,"bracketedTripleExpr":143,"valueConstraint":144,"include":145,"Qcardinality_E_Opt":146,"cardinality":147,"senseFlags":148,"*":149,"+":150,"?":151,"REPEAT_RANGE":152,"^":153,"QvalueSetValue_E_Star":154,"valueSetValue":155,"iriRange":156,"STRING_GRAVE":157,"literalRange":158,"languageRange":159,"QiriExclusion_E_Plus":160,"QliteralExclusion_E_Plus":161,"QlanguageExclusion_E_Plus":162,"Q_O_Q_TILDE_E_S_QiriExclusion_E_Star_C_E_Opt":163,"QiriExclusion_E_Star":164,"iriExclusion":165,"O_Q_TILDE_E_S_QiriExclusion_E_Star_C":166,"~":167,"-":168,"literal":169,"Q_O_Q_TILDE_E_S_QliteralExclusion_E_Star_C_E_Opt":170,"QliteralExclusion_E_Star":171,"literalExclusion":172,"O_Q_TILDE_E_S_QliteralExclusion_E_Star_C":173,"language":174,"Q_O_Q_TILDE_E_S_QlanguageExclusion_E_Star_C_E_Opt":175,"QlanguageExclusion_E_Star":176,"languageExclusion":177,"O_Q_TILDE_E_S_QlanguageExclusion_E_Star_C":178,"LANGTAG":179,"&":180,"//":181,"O_QiriOrLabel_E_Or_Qliteral_E_C":182,"iriOrLabel":183,"QcodeDecl_E_Star":184,"%":185,"CODE":186,"LANG_STRING":187,"optDT":188,"numericLiteral":189,"IT_true":190,"IT_false":191,"a":192,"blankNode":193,"PNAME_LN":194,"BLANK_NODE_LABEL":195,"QshapeExprLabel_E_Plus":196,"$accept":0,"$end":1},
terminals_: {2:"error",7:"EOF",18:"IT_BASE",19:"IRIREF",20:"IT_PREFIX",21:"PNAME_NS",22:"IT_LABEL",26:"[",27:"]",30:"IT_start",31:"=",38:"IT_EXTERNAL",42:"IT_NOT",50:"IT_OR",53:"IT_AND",67:"(",68:")",69:".",74:"ATPNAME_LN",75:"ATPNAME_NS",76:"@",77:"IT_LITERAL",88:"IT_IRI",89:"IT_BNODE",90:"IT_NONLITERAL",92:"INTEGER",93:"REGEXP",94:"IT_LENGTH",95:"IT_MINLENGTH",96:"IT_MAXLENGTH",100:"DECIMAL",101:"DOUBLE",102:"STRING",103:"^^",104:"IT_MININCLUSIVE",105:"IT_MINEXCLUSIVE",106:"IT_MAXINCLUSIVE",107:"IT_MAXEXCLUSIVE",108:"IT_TOTALDIGITS",109:"IT_FRACTIONDIGITS",111:"{",113:"}",119:"IT_CLOSED",122:"IT_EXTRA",130:"|",135:",",136:";",140:"$",144:"valueConstraint",149:"*",150:"+",151:"?",152:"REPEAT_RANGE",153:"^",157:"STRING_GRAVE",167:"~",168:"-",179:"LANGTAG",180:"&",181:"//",185:"%",186:"CODE",187:"LANG_STRING",190:"IT_true",191:"IT_false",192:"a",194:"PNAME_LN",195:"BLANK_NODE_LABEL"},
productions_: [0,[3,4],[4,0],[5,0],[5,2],[9,1],[9,1],[12,0],[12,2],[14,2],[6,0],[6,1],[8,1],[8,1],[8,1],[15,2],[16,3],[17,2],[24,0],[24,2],[23,1],[23,3],[10,1],[10,1],[28,3],[11,1],[33,1],[33,2],[13,1],[13,1],[29,2],[36,1],[36,1],[37,3],[37,3],[37,2],[39,0],[39,1],[41,0],[41,1],[32,1],[44,1],[44,2],[49,2],[46,1],[46,2],[52,2],[47,1],[47,2],[48,0],[48,2],[45,2],[57,2],[56,0],[56,2],[51,2],[58,0],[58,2],[55,2],[61,2],[60,0],[60,2],[54,1],[54,2],[59,1],[59,2],[62,1],[62,2],[62,1],[62,1],[62,2],[62,3],[62,1],[70,0],[70,1],[40,1],[40,2],[40,1],[40,1],[40,2],[40,3],[40,1],[63,1],[63,2],[63,1],[63,2],[63,3],[63,1],[65,1],[65,1],[72,1],[72,1],[43,1],[43,1],[43,2],[66,2],[66,2],[66,2],[66,1],[78,0],[78,2],[64,1],[64,2],[64,1],[81,1],[81,2],[86,0],[86,2],[84,1],[84,2],[83,1],[83,1],[83,1],[82,1],[82,1],[87,2],[87,1],[91,1],[91,1],[91,1],[85,2],[85,2],[98,1],[98,1],[98,1],[98,3],[97,1],[97,1],[97,1],[97,1],[99,1],[99,1],[71,6],[116,1],[116,1],[116,1],[110,0],[110,2],[112,0],[112,1],[114,0],[114,2],[73,4],[118,2],[123,1],[123,2],[120,1],[125,1],[125,1],[127,2],[129,2],[128,1],[128,2],[131,1],[131,1],[126,2],[134,0],[134,1],[134,1],[134,2],[138,0],[138,1],[138,1],[132,3],[139,2],[139,2],[137,1],[137,2],[133,3],[133,1],[133,3],[133,1],[133,1],[133,1],[143,6],[146,0],[146,1],[142,5],[142,6],[147,1],[147,1],[147,1],[147,1],[148,1],[80,3],[154,0],[154,2],[155,1],[155,1],[155,1],[155,1],[155,2],[155,2],[155,2],[156,2],[164,0],[164,2],[166,2],[163,0],[163,1],[160,1],[160,2],[165,2],[165,3],[158,2],[171,0],[171,2],[173,2],[170,0],[170,1],[161,1],[161,2],[172,2],[172,3],[159,2],[176,0],[176,2],[178,2],[175,0],[175,1],[162,1],[162,2],[177,2],[177,3],[174,1],[145,2],[121,3],[182,1],[182,1],[115,1],[184,0],[184,2],[34,3],[34,3],[169,1],[169,2],[169,1],[169,1],[169,1],[188,0],[188,2],[124,1],[124,1],[79,1],[35,1],[35,1],[141,1],[141,1],[189,1],[189,1],[189,1],[25,1],[25,1],[25,1],[183,1],[183,1],[183,1],[183,1],[193,1],[117,2],[196,1],[196,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        var valueExprDefns = Parser.valueExprDefns ? { valueExprDefns: Parser.valueExprDefns } : {};
        var startObj = Parser.start ? { start: Parser.start } : {};
        var startActs = Parser.startActs ? { startActs: Parser.startActs } : {};
        var ret = extend({ type: "Schema"},
                         Object.keys(Parser._prefixes).length ? { prefixes: Parser._prefixes } : {}, // Build return object from
                         valueExprDefns, startActs, startObj,                  // components in parser state
                         Parser.shapes ? {shapes: Parser.shapes} : {},         // maintaining intuitve order.
                         Parser.productions ? {productions: Parser.productions} : {});
        if (Parser._base !== null)
          ret.base = Parser._base;
        Parser.reset();
//console.log(JSON.stringify(ret));
        return ret;
      
break;
case 2:
 yy.parser.yy = { lexer: yy.lexer} ; 
break;
case 15:
 // t: @@
        Parser._setBase(Parser._base === null ||
                    absoluteIRI.test($$[$0].slice(1, -1)) ? $$[$0].slice(1, -1) : _resolveIRI($$[$0].slice(1, -1)));
      
break;
case 16:
 // t: ShExParser-test.js/with pre-defined prefixes
        var prefixIRI;
        if (this._base === null || absoluteIRI.test($$[$0].slice(1, -1)))
          prefixIRI = $$[$0].slice(1, -1);
        else
          prefixIRI = _resolveIRI($$[$0].slice(1, -1));
        Parser._prefixes[$$[$0-1].slice(0, -1)] = prefixIRI;
      
break;
case 17:

        $$[$0].forEach(function (elt) {
	  Parser._termResolver.add(elt);
        });
      
break;
case 18: case 49: case 53: case 56: case 60:
this.$ = [];
break;
case 19: case 45: case 48: case 50: case 54: case 57: case 61:
this.$ = $$[$0-1].concat($$[$0]);
break;
case 20: case 44: case 47:
this.$ = [$$[$0]];
break;
case 21: case 159:
this.$ = $$[$0-1];
break;
case 24:

        if (Parser.start)
          error("Parse error: start already defined");
        Parser.start = $$[$0]; // t: startInline
      
break;
case 25:

        Parser.startActs = $$[$0]; // t: startCode1
      
break;
case 26:
this.$ = [$$[$0]] // t: startCode1;
break;
case 27:
this.$ = appendTo($$[$0-1], $$[$0]) // t: startCode3;
break;
case 30:
 // t: 1dot 1val1vsMinusiri3??
        addShape($$[$0-1],  $$[$0]);
      
break;
case 31:

        this.$ = $$[$0];
      
break;
case 32:
this.$ = { type: "ShapeExternal" };
break;
case 33:

        if ($$[$0-2])
          $$[$0-1] = { type: "ShapeNot", "shapeExpr": $$[$0-1] };
        if ($$[$0]) {
          $$[$0].shapeExprs.unshift($$[$0-1]);
          this.$ = $$[$0];
        } else {
// console.log("shapeAtomNoRef:", $$[$0-1]);
          this.$ = $$[$0-1];
        }
      
break;
case 34:
this.$ = { type: "ShapeNot", "shapeExpr": $$[$0-1] };
break;
case 35:

// console.log("shapeRef_shapeOr:", $$[$0-1], $$[$0]);
        $$[$0].shapeExprs.unshift($$[$0-1]);
        this.$ = $$[$0]; // { type: "ShapeOr", "shapeExprs": [$$[$0-1]].concat($$[$0]) };
    
break;
case 36:
this.$ = false;
break;
case 37:
this.$ = true;
break;
case 38: case 156: case 157: case 158: case 239:
this.$ = null;
break;
case 39: case 43: case 46: case 52: case 59: case 240:
this.$ = $$[$0];
break;
case 41:

        this.$ = { type: "ShapeOr", shapeExprs: $$[$0] };
// console.log("shapeOr_1:", this.$);
      
break;
case 42:

        this.$ = $$[$0].length > 0 ? shapeJunction("ShapeAnd", $$[$0-1], $$[$0]) : { type: "ShapeAnd", shapeExprs:$$[$0-1] };
// console.log("shapeOr_2:", this.$);
      
break;
case 51:
this.$ = shapeJunction("ShapeOr", $$[$0-1], $$[$0]);
break;
case 55: case 58:
this.$ = shapeJunction("ShapeAnd", $$[$0-1], $$[$0]);
break;
case 63: case 65:
this.$ = { type: "ShapeNot", "shapeExpr": $$[$0] };
break;
case 67: case 76: case 83:
this.$ = { type: "ShapeAnd", shapeExprs: [ extend({ type: "NodeConstraint" }, $$[$0-1]), $$[$0] ] };
break;
case 70: case 79:
this.$ = shapeJunction("ShapeAnd", $$[$0-1], [$$[$0]]) // t:@@;
break;
case 71: case 80: case 86:
this.$ = $$[$0-1] // t: 1val1vsMinusiri3;
break;
case 72: case 81: case 87:
this.$ = EmptyShape // t: 1dot;
break;
case 85:
this.$ = $$[$0] ? { type: "ShapeAnd", shapeExprs: [ extend({ type: "NodeConstraint" }, $$[$0-1]), $$[$0] ] } : $$[$0-1] // t: !! look to 1dotRef1;
break;
case 92:
 // t: 1dotRefLNex@@
        $$[$0] = $$[$0].substr(1, $$[$0].length-1);
        var namePos = $$[$0].indexOf(':');
        this.$ = { type: "ShapeRef", reference: expandPrefix($$[$0].substr(0, namePos)) + $$[$0].substr(namePos + 1) };
      
break;
case 93:
 // t: 1dotRefNS1@@
        $$[$0] = $$[$0].substr(1, $$[$0].length-1);
        this.$ = { type: "ShapeRef", reference: expandPrefix($$[$0].substr(0, $$[$0].length - 1)) };
      
break;
case 94:
this.$ = { type: "ShapeRef", reference: $$[$0] } // t: 1dotRef1, 1dotRefSpaceLNex, 1dotRefSpaceNS1;
break;
case 95:
this.$ = extend({ type: "NodeConstraint", nodeKind: "literal" }, $$[$0]) // t: 1literalPattern;
break;
case 96:

        if (numericDatatypes.indexOf($$[$0-1]) === -1)
          numericFacets.forEach(function (facet) {
            if (facet in $$[$0])
              error("Parse error: facet " + facet + " not allowed for unknown datatype " + $$[$0-1]);
          });
        this.$ = extend({ type: "NodeConstraint", datatype: $$[$0-1] }, $$[$0]) // t: 1datatype
      
break;
case 97:
this.$ = { type: "NodeConstraint", values: $$[$0-1] } // t: 1val1IRIREF;
break;
case 98:
this.$ = extend({ type: "NodeConstraint"}, $$[$0]);
break;
case 99:
this.$ = {} // t: 1literalPattern;
break;
case 100:

        if (Object.keys($$[$0-1]).indexOf(Object.keys($$[$0])[0]) !== -1) {
          error("Parse error: facet "+Object.keys($$[$0])[0]+" defined multiple times");
        }
        this.$ = extend($$[$0-1], $$[$0]) // t: 1literalLength
      
break;
case 101:
this.$ = extend({ type: "NodeConstraint" }, $$[$0]) // t: 1iriPattern;
break;
case 102:
this.$ = extend({ type: "NodeConstraint"}, $$[$0-1], $$[$0]) // t: 1iriPattern;
break;
case 103:
this.$ = extend({ type: "NodeConstraint"}, $$[$0]) // t: @@;
break;
case 105: case 109:

        if (Object.keys($$[$0-1]).indexOf(Object.keys($$[$0])[0]) !== -1) {
          error("Parse error: facet "+Object.keys($$[$0])[0]+" defined multiple times");
        }
        this.$ = extend($$[$0-1], $$[$0]) // t: !! look to 1literalLength
      
break;
case 106:
this.$ = {};
break;
case 107:

        if (Object.keys($$[$0-1]).indexOf(Object.keys($$[$0])[0]) !== -1) {
          error("Parse error: facet "+Object.keys($$[$0])[0]+" defined multiple times");
        }
        this.$ = extend($$[$0-1], $$[$0])
      
break;
case 110:
this.$ = { nodeKind: "iri" } // t: 1iriPattern;
break;
case 111:
this.$ = { nodeKind: "bnode" } // t: 1bnodeLength;
break;
case 112:
this.$ = { nodeKind: "nonliteral" } // t: 1nonliteralLength;
break;
case 115:
this.$ = keyValObject($$[$0-1], parseInt($$[$0], 10)) // t: 1literalLength;
break;
case 116:
this.$ = unescapeRegexp($$[$0]) // t: 1literalPattern;
break;
case 117:
this.$ = "length" // t: 1literalLength;
break;
case 118:
this.$ = "minlength" // t: 1literalMinlength;
break;
case 119:
this.$ = "maxlength" // t: 1literalMaxlength;
break;
case 120:
this.$ = keyValObject($$[$0-1], $$[$0]) // t: 1literalMininclusive;
break;
case 121:
this.$ = keyValObject($$[$0-1], parseInt($$[$0], 10)) // t: 1literalTotaldigits;
break;
case 122:
this.$ = parseInt($$[$0], 10);;
break;
case 123: case 124:
this.$ = parseFloat($$[$0]);;
break;
case 125:

        if ($$[$0] === XSD_DECIMAL || $$[$0] === XSD_FLOAT || $$[$0] === XSD_DOUBLE)
          this.$ = parseFloat($$[$0-2].value);
        else if (numericDatatypes.indexOf($$[$0]) !== -1)
          this.$ = parseInt($$[$0-2].value)
        else
          error("Parse error: numeric range facet expected numeric datatype instead of " + $$[$0]);
      
break;
case 126:
this.$ = "mininclusive" // t: 1literalMininclusive;
break;
case 127:
this.$ = "minexclusive" // t: 1literalMinexclusive;
break;
case 128:
this.$ = "maxinclusive" // t: 1literalMaxinclusive;
break;
case 129:
this.$ = "maxexclusive" // t: 1literalMaxexclusive;
break;
case 130:
this.$ = "totaldigits" // t: 1literalTotaldigits;
break;
case 131:
this.$ = "fractiondigits" // t: 1literalFractiondigits;
break;
case 132:
 // t: 1dotInherit3
        var exprObj = $$[$0-3] ? { expression: $$[$0-3] } : EmptyObject; // t: 0, 0Inherit1
        this.$ = (exprObj === EmptyObject && $$[$0-5] === EmptyObject) ?
	  EmptyShape :
	  extend({ type: "Shape" }, exprObj, $$[$0-5]);
        if ($$[$0-1].length) { this.$.annotations = $$[$0-1]; } // t: !! look to open3groupdotcloseAnnot3, open3groupdotclosecard23Annot3Code2
        if ($$[$0]) { this.$.semActs = $$[$0].semActs; } // t: !! look to open3groupdotcloseCode1, !open1dotOr1dot
      
break;
case 133:
this.$ = [ "inherit", $$[$0] ] // t: 1dotInherit1;
break;
case 134:
this.$ = [ "extra", $$[$0] ] // t: 1dotExtra1, 3groupdot3Extra, 3groupdotExtra3;
break;
case 135:
this.$ = [ "closed", true ] // t: 1dotClosed;
break;
case 136:
this.$ = EmptyObject;
break;
case 137:

      if ($$[$0-1] === EmptyObject)
	$$[$0-1] = {};
      if ($$[$0][0] === "closed")
        $$[$0-1]["closed"] = true; // t: 1dotClosed
      else if ($$[$0][0] in $$[$0-1])
        $$[$0-1][$$[$0][0]] = unionAll($$[$0-1][$$[$0][0]], $$[$0][1]); // t: 1dotInherit3, 3groupdot3Extra, 3groupdotExtra3
      else
        $$[$0-1][$$[$0][0]] = $$[$0][1]; // t: 1dotInherit1
      this.$ = $$[$0-1];
    
break;
case 140:
this.$ = [] // t: 1dot, 1dotAnnot3;
break;
case 141:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1dotAnnot3;
break;
case 142:
 // t: 1dotInherit3
        var exprObj = $$[$0-1] ? { expression: $$[$0-1] } : EmptyObject; // t: 0, 0Inherit1
        this.$ = (exprObj === EmptyObject && $$[$0-3] === EmptyObject) ?
	  EmptyShape :
	  extend({ type: "Shape" }, exprObj, $$[$0-3]);
      
break;
case 143:
this.$ = $$[$0] // t: 1dotExtra1, 3groupdot3Extra;
break;
case 144:
this.$ = [$$[$0]] // t: 1dotExtra1, 3groupdot3Extra, 3groupdotExtra3;
break;
case 145:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 3groupdotExtra3;
break;
case 149:
this.$ = { type: "OneOf", expressions: unionAll([$$[$0-1]], $$[$0]) } // t: 2oneOfdot;
break;
case 150:
this.$ = $$[$0] // t: 2oneOfdot;
break;
case 151:
this.$ = [$$[$0]] // t: 2oneOfdot;
break;
case 152:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 2oneOfdot;
break;
case 155:
this.$ = $$[$0] ? { type: "EachOf", expressions: unionAll([$$[$0-1]], $$[$0]) } : $$[$0-1] // t: 2groupOfdot;
break;
case 163:
this.$ = { type: "EachOf", expressions: unionAll([$$[$0-2]], $$[$0-1]) } // t: 2groupOfdot;
break;
case 164: case 165:
this.$ = $$[$0] // t: 2groupOfdot;
break;
case 166:
this.$ = [$$[$0]] // t: 2groupOfdot;
break;
case 167:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 2groupOfdot;
break;
case 168: case 170:

        this.$ = extend({ id: $$[$0-1] }, $$[$0]);
        addProduction($$[$0-1],  this.$);
      
break;
case 174:

        // t: open1dotOr1dot, !openopen1dotcloseCode1closeCode2
        this.$ = $$[$0-4];
        // Copy all of the new attributes into the encapsulated shape.
        if ("min" in $$[$0-2]) { this.$.min = $$[$0-2].min; } // t: open3groupdotclosecard23Annot3Code2
        if ("max" in $$[$0-2]) { this.$.max = $$[$0-2].max; } // t: open3groupdotclosecard23Annot3Code2
        if ($$[$0-1].length) { this.$.annotations = $$[$0-1]; } // t: open3groupdotcloseAnnot3, open3groupdotclosecard23Annot3Code2
        if ($$[$0]) { this.$.semActs = "semActs" in $$[$0-4] ? $$[$0-4].semActs.concat($$[$0].semActs) : $$[$0].semActs; } // t: open3groupdotcloseCode1, !open1dotOr1dot
      
break;
case 175:
this.$ = {} // t: 1dot;
break;
case 177:

        // $$[$0]: t: 1dotCode1
	if ($$[$0-3] !== EmptyShape && false) {
	  var t = blank();
	  addShape(t, $$[$0-3]);
	  $$[$0-3] = { type: "ShapeRef", reference: t };
	}
        this.$ = extend({ type: "TripleConstraint", predicate: $$[$0-4]}, ($$[$0-3] === EmptyShape ? {} : { valueExpr: $$[$0-3] }), $$[$0-2], $$[$0]); // t: 1dot
        if ($$[$0-1].length)
          this.$["annotations"] = $$[$0-1]; // t: 1dotAnnot3
      
break;
case 178:

        // %6: t: 1inversedotCode1
        this.$ = extend({ type: "TripleConstraint" }, $$[$0-5], { predicate: $$[$0-4] }, ($$[$0-3] === EmptyShape ? {} : { valueExpr: $$[$0-3] }), $$[$0-2], $$[$0]); // t: 1inversedot
        if ($$[$0-1].length)
          this.$["annotations"] = $$[$0-1]; // t: 1inversedotAnnot3
      
break;
case 179:
this.$ = { min:0, max:UNBOUNDED } // t: 1cardStar;
break;
case 180:
this.$ = { min:1, max:UNBOUNDED } // t: 1cardPlus;
break;
case 181:
this.$ = { min:0, max:1 } // t: 1cardOpt;
break;
case 182:

        $$[$0] = $$[$0].substr(1, $$[$0].length-2);
        var nums = $$[$0].match(/(\d+)/g);
        this.$ = { min: parseInt(nums[0], 10) }; // t: 1card2blank, 1card2Star
        if (nums.length === 2)
            this.$["max"] = parseInt(nums[1], 10); // t: 1card23
        else if ($$[$0].indexOf(',') === -1) // t: 1card2
            this.$["max"] = parseInt(nums[0], 10);
        else
            this.$["max"] = UNBOUNDED;
      
break;
case 183:
this.$ = { inverse: true } // t: 1inversedot;
break;
case 184:
this.$ = $$[$0-1] // t: 1val1IRIREF;
break;
case 185:
this.$ = [] // t: 1val1IRIREF;
break;
case 186:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1val1IRIREF;
break;
case 188:
this.$ = Parser._termResolver.resolve($$[$0], Parser._prefixes);
break;
case 191:
this.$ = { type: "IriStemRange", stem: { type: "Wildcard" }, exclusions: $$[$0] } // t:1val1dotMinusiri3, 1val1dotMinusiriStem3;
break;
case 192:
this.$ = { type: "LiteralStemRange", stem: { type: "Wildcard" }, exclusions: $$[$0] } // t:1val1dotMinusliteral3, 1val1dotMinusliteralStem3;
break;
case 193:
this.$ = { type: "LanguageStemRange", stem: { type: "Wildcard" }, exclusions: $$[$0] } // t:1val1dotMinuslanguage3, 1val1dotMinuslanguageStem3;
break;
case 194:

        if ($$[$0]) {
          this.$ = {  // t: 1val1iriStem, 1val1iriStemMinusiri3
            type: $$[$0].length ? "IriStemRange" : "IriStem",
            stem: $$[$0-1]
          };
          if ($$[$0].length)
            this.$["exclusions"] = $$[$0]; // t: 1val1iriStemMinusiri3
        } else {
          this.$ = $$[$0-1]; // t: 1val1IRIREF, 1AvalA
        }
      
break;
case 195:
this.$ = [] // t: 1val1iriStem, 1val1iriStemMinusiri3;
break;
case 196:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1val1iriStemMinusiri3;
break;
case 197: case 202:
this.$ = $$[$0] // t: 1val1iriStemMinusiri3;
break;
case 200:
this.$ = [$$[$0]] // t:1val1dotMinusiri3, 1val1dotMinusiriStem3;
break;
case 201:
this.$ = appendTo($$[$0-1], $$[$0]) // t:1val1dotMinusiri3, 1val1dotMinusiriStem3;
break;
case 203:
this.$ = { type: "IriStem", stem: $$[$0-1] } // t: 1val1iriStemMinusiriStem3;
break;
case 204:

        if ($$[$0]) {
          this.$ = {  // t: 1val1literalStemMinusliteralStem3, 1val1literalStem
            type: $$[$0].length ? "LiteralStemRange" : "LiteralStem",
            stem: $$[$0-1].value
          };
          if ($$[$0].length)
            this.$["exclusions"] = $$[$0]; // t: 1val1literalStemMinusliteral3
        } else {
          this.$ = $$[$0-1]; // t: 1val1LITERAL
        }
      
break;
case 205:
this.$ = [] // t: 1val1literalStem, 1val1literalStemMinusliteral3;
break;
case 206:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1val1literalStemMinusliteral3;
break;
case 207:
this.$ = $$[$0] // t: 1val1literalStemMinusliteral3;
break;
case 210:
this.$ = [$$[$0]] // t:1val1dotMinusliteral3, 1val1dotMinusliteralStem3;
break;
case 211:
this.$ = appendTo($$[$0-1], $$[$0]) // t:1val1dotMinusliteral3, 1val1dotMinusliteralStem3;
break;
case 212:
this.$ = $$[$0].value // t: 1val1literalStemMinusliteral3;
break;
case 213:
this.$ = { type: "LiteralStem", stem: $$[$0-1].value } // t: 1val1literalStemMinusliteralStem3;
break;
case 214:

        if ($$[$0]) {
          this.$ = {  // t: 1val1languageStemMinuslanguage3 1val1languageStemMinuslanguageStem3 : 1val1languageStem
            type: $$[$0].length ? "LanguageStemRange" : "LanguageStem",
            stem: $$[$0-1]
          };
          if ($$[$0].length)
            this.$["exclusions"] = $$[$0]; // t: 1val1languageStemMinuslanguage3, 1val1languageStemMinuslanguageStem3
        } else {
          this.$ = { type: "Language", languageTag: $$[$0-1] }; // t: 1val1language
        }
      
break;
case 215:
this.$ = [] // t: 1val1languageStem, 1val1languageStemMinuslanguage3;
break;
case 216:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1val1languageStemMinuslanguage3;
break;
case 217: case 222:
this.$ = $$[$0] // t: 1val1languageStemMinuslanguage3;
break;
case 220:
this.$ = [$$[$0]] // t:1val1dotMinuslanguage3, 1val1dotMinuslanguageStem3;
break;
case 221:
this.$ = appendTo($$[$0-1], $$[$0]) // t:1val1dotMinuslanguage3, 1val1dotMinuslanguageStem3;
break;
case 223:
this.$ = { type: "LanguageStem", stem: $$[$0-1] } // t: 1val1languageStemMinuslanguageStem3;
break;
case 224:
this.$ = $$[$0].substr(1);
break;
case 225:
this.$ = { type: "Inclusion", "include": $$[$0] } // t: 2groupInclude1;
break;
case 226:
this.$ = { type: "Annotation", predicate: $$[$0-1], object: $$[$0] } // t: 1dotAnnotIRIREF;
break;
case 229:
this.$ = $$[$0].length ? { semActs: $$[$0] } : null; // t: 1dotCode1/2oneOfDot;
break;
case 230:
this.$ = [] // t: 1dot, 1dotCode1;
break;
case 231:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1dotCode1;
break;
case 232:
this.$ = unescapeSemanticAction($$[$0-1], $$[$0]) // t: 1dotCode1;
break;
case 233:
this.$ = { type: "SemAct", name: $$[$0-1] } // t: 1dotNoCode1;
break;
case 235:
this.$ = $$[$0] ? extend($$[$0-1], { type: $$[$0] }) : $$[$0-1]; // t: 1val1Datatype;
break;
case 237:
this.$ = { value: "true", type: XSD_BOOLEAN } // t: 1val1true;
break;
case 238:
this.$ = { value: "false", type: XSD_BOOLEAN } // t: 1val1false;
break;
case 242:
this.$ = RDF_TYPE // t: 1AvalA;
break;
case 248:
this.$ = createLiteral($$[$0], XSD_INTEGER) // t: 1val1INTEGER;
break;
case 249:
this.$ = createLiteral($$[$0], XSD_DECIMAL) // t: 1val1DECIMAL;
break;
case 250:
this.$ = createLiteral($$[$0], XSD_DOUBLE) // t: 1val1DOUBLE;
break;
case 251: case 254:
this.$ = this._base === null || absoluteIRI.test($$[$0].slice(1, -1)) ? ShExUtil.unescapeText($$[$0].slice(1,-1), {}) : _resolveIRI(ShExUtil.unescapeText($$[$0].slice(1,-1), {})) // t: 1dot;
break;
case 252: case 255:
 // t:1dotPNex, 1dotPNdefault, ShExParser-test.js/with pre-defined prefixes
        var namePos = $$[$0].indexOf(':');
        this.$ = expandPrefix($$[$0].substr(0, namePos)) + $$[$0].substr(namePos + 1);
    
break;
case 253: case 256:
 // t: 1dotNS2, 1dotNSdefault, ShExParser-test.js/PNAME_NS with pre-defined prefixes
        this.$ = expandPrefix($$[$0].substr(0, $$[$0].length - 1));
    
break;
case 257:

        this.$ = Parser._termResolver.resolve($$[$0], Parser._prefixes);
    
break;
case 259:
this.$ = $$[$0] // t: 1dotInherit1, 1dot3Inherit, 1dotInherit3;
break;
case 260:
this.$ = [$$[$0]] // t: 1dotInherit1, 1dot3Inherit, 1dotInherit3;
break;
case 261:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1dotInherit3;
break;
}
},
table: [o($V0,[2,2],{3:1,4:2}),{1:[3]},o($V0,[2,3],{5:3}),{6:4,7:[2,10],8:5,9:10,10:14,11:15,14:6,15:7,16:8,17:9,18:$V1,19:$V2,20:$V3,21:$V4,22:$V5,25:22,28:16,29:17,30:$V6,33:18,34:21,35:20,185:$V7,193:23,194:$V8,195:$V9},{7:[1,29]},o($V0,[2,4]),{7:[2,11]},o($V0,[2,12]),o($V0,[2,13]),o($V0,[2,14]),o($Va,[2,7],{12:30}),{19:[1,31]},{21:[1,32]},{19:$V2,21:$V4,23:33,25:34,26:[1,35],194:$V8},o($Va,[2,5]),o($Va,[2,6]),o($Va,[2,22]),o($Va,[2,23]),o($Va,[2,25],{34:36,185:$V7}),{31:[1,37]},o($Vb,$Vc,{36:38,37:39,39:41,43:43,38:[1,40],42:$Vd,74:$Ve,75:$Vf,76:$Vg}),o($V0,[2,26]),o($Vh,[2,244]),o($Vh,[2,245]),{19:$V2,21:$V4,25:47,194:$V8},o($Vi,[2,251]),o($Vi,[2,252]),o($Vi,[2,253]),o([7,18,19,20,21,22,26,30,38,42,50,53,67,68,69,74,75,76,77,88,89,90,93,94,95,96,104,105,106,107,108,109,111,113,119,122,130,135,136,149,150,151,152,153,157,180,181,185,192,194,195],[2,258]),{1:[2,1]},{7:[2,9],8:49,10:50,13:48,15:7,16:8,17:9,18:$V1,19:$V2,20:$V3,21:$V4,22:$V5,25:22,28:16,29:17,30:$V6,35:20,193:23,194:$V8,195:$V9},o($V0,[2,15]),{19:[1,51]},o($V0,[2,17]),o($V0,[2,20]),o($Vj,[2,18],{24:52}),o($V0,[2,27]),o($Vk,$Vl,{32:53,45:54,55:55,59:56,63:57,64:59,66:60,72:61,83:64,84:65,79:67,80:68,81:69,73:70,43:71,87:75,183:76,85:78,110:79,91:80,97:86,99:87,19:$Vm,21:$Vn,26:$Vo,42:$Vp,67:$Vq,69:$Vr,74:$Ve,75:$Vf,76:$Vg,77:$Vs,88:$Vt,89:$Vu,90:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,104:$VA,105:$VB,106:$VC,107:$VD,108:$VE,109:$VF,157:$VG,194:$VH}),o($Va,[2,30]),o($Va,[2,31]),o($Va,[2,32]),o($Vk,$Vl,{83:64,84:65,79:67,80:68,81:69,87:75,183:76,85:78,91:80,97:86,99:87,40:97,64:98,66:99,71:100,110:103,19:$Vm,21:$Vn,26:$Vo,67:[1,101],69:[1,102],77:$Vs,88:$Vt,89:$Vu,90:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,104:$VA,105:$VB,106:$VC,107:$VD,108:$VE,109:$VF,157:$VG,194:$VH}),o($Vb,[2,37],{43:104,74:$Ve,75:$Vf,76:$Vg}),{44:105,46:106,47:107,49:108,50:$VI,52:109,53:$VJ},o($VK,[2,92]),o($VK,[2,93]),{19:$V2,21:$V4,25:22,35:112,193:23,194:$V8,195:$V9},{185:[1,114],186:[1,113]},o($Va,[2,8]),o($Va,[2,28]),o($Va,[2,29]),o($V0,[2,16]),{19:$V2,21:$V4,25:116,27:[1,115],194:$V8},o($Va,[2,24]),o($VL,[2,40]),o($VM,[2,53],{56:117}),o($VN,[2,60],{60:118}),o($VN,[2,64]),o($Vk,$Vl,{64:59,66:60,72:61,83:64,84:65,79:67,80:68,81:69,73:70,43:71,87:75,183:76,85:78,110:79,91:80,97:86,99:87,63:119,19:$Vm,21:$Vn,26:$Vo,67:$Vq,69:$Vr,74:$Ve,75:$Vf,76:$Vg,77:$Vs,88:$Vt,89:$Vu,90:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,104:$VA,105:$VB,106:$VC,107:$VD,108:$VE,109:$VF,157:$VG,194:$VH}),o($VN,[2,82],{73:70,43:71,110:79,72:120,74:$Ve,75:$Vf,76:$Vg,111:$Vl,119:$Vl,122:$Vl,180:$Vl}),o($VN,[2,84]),o($VN,[2,73],{83:64,84:65,87:75,91:80,70:121,64:122,88:$Vt,89:$Vu,90:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz}),o($Vb,$Vc,{39:41,43:43,37:123,42:$Vd,74:$Ve,75:$Vf,76:$Vg}),o($VN,[2,87]),o($VO,[2,101],{87:75,91:80,84:124,93:$Vw,94:$Vx,95:$Vy,96:$Vz}),o($VO,[2,103],{91:80,87:125,93:$Vw,94:$Vx,95:$Vy,96:$Vz}),o($VP,$VQ,{78:126}),o($VP,$VQ,{78:127}),o($VP,$VQ,{78:128}),o($VN,[2,98],{97:86,99:87,85:129,104:$VA,105:$VB,106:$VC,107:$VD,108:$VE,109:$VF}),o($VK,[2,90]),o($VK,[2,91]),o($VR,[2,110]),o($VR,[2,111]),o($VR,[2,112]),o($VR,[2,108]),o([7,18,19,20,21,22,27,30,50,53,68,69,88,89,90,92,93,94,95,96,100,101,102,104,105,106,107,108,109,113,130,135,136,149,150,151,152,157,167,168,179,181,185,187,190,191,194,195],[2,243]),o($VS,[2,185],{154:130}),o($VT,[2,104]),{111:[1,131],116:132,117:133,118:134,119:$VU,122:$VV,180:$VW},{92:[1,138]},o($VX,[2,116]),o($VY,[2,254]),o($VY,[2,255]),o($VY,[2,256]),o($VY,[2,257]),{92:[1,140],98:139,100:[1,141],101:[1,142],102:[1,143]},{92:[1,144]},{92:[2,117]},{92:[2,118]},{92:[2,119]},o($VZ,[2,126]),o($VZ,[2,127]),o($VZ,[2,128]),o($VZ,[2,129]),{92:[2,130]},{92:[2,131]},o($V_,$V$,{46:106,47:107,49:108,52:109,41:145,44:146,50:$VI,53:$VJ}),o($V01,[2,75],{110:103,65:147,71:148,43:149,74:$Ve,75:$Vf,76:$Vg,111:$Vl,119:$Vl,122:$Vl,180:$Vl}),o($V01,[2,77]),o($V01,[2,78],{83:64,84:65,87:75,91:80,64:150,88:$Vt,89:$Vu,90:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz}),o($Vb,$Vc,{39:41,43:43,37:151,42:$Vd,74:$Ve,75:$Vf,76:$Vg}),o($V01,[2,81]),{111:[1,152],116:132,117:133,118:134,119:$VU,122:$VV,180:$VW},o($V_,$V$,{46:106,47:107,49:108,52:109,44:146,41:153,50:$VI,53:$VJ}),o($V_,[2,35]),o($V_,[2,41],{49:154,50:$VI}),o($V11,[2,49],{48:155,52:156,53:$VJ}),o($V11,[2,44]),o($V01,[2,47]),o($Vk,$Vl,{83:64,84:65,79:67,80:68,81:69,87:75,183:76,85:78,91:80,97:86,99:87,110:103,71:148,43:149,51:157,54:158,62:159,64:161,66:162,65:163,19:$Vm,21:$Vn,26:$Vo,42:$V21,67:$V31,69:$V41,74:$Ve,75:$Vf,76:$Vg,77:$Vs,88:$Vt,89:$Vu,90:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,104:$VA,105:$VB,106:$VC,107:$VD,108:$VE,109:$VF,157:$VG,194:$VH}),o($Vk,$Vl,{83:64,84:65,79:67,80:68,81:69,87:75,183:76,85:78,91:80,97:86,99:87,110:103,71:148,43:149,62:159,64:161,66:162,65:163,54:166,19:$Vm,21:$Vn,26:$Vo,42:$V21,67:$V31,69:$V41,74:$Ve,75:$Vf,76:$Vg,77:$Vs,88:$Vt,89:$Vu,90:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,104:$VA,105:$VB,106:$VC,107:$VD,108:$VE,109:$VF,157:$VG,194:$VH}),o($VK,[2,94]),o($V51,[2,232]),o($V51,[2,233]),o($V0,[2,21]),o($Vj,[2,19]),o($VL,[2,51],{57:167,50:[1,168]}),o($VM,[2,58],{61:169,53:[1,170]}),o($VN,[2,65]),o($VN,[2,83]),o($VN,[2,85]),o($VN,[2,74]),{68:[1,171]},o($VO,[2,102],{91:80,87:125,93:$Vw,94:$Vx,95:$Vy,96:$Vz}),o($VR,[2,109]),o($VN,[2,95],{91:80,97:86,99:87,82:172,87:173,85:174,93:$Vw,94:$Vx,95:$Vy,96:$Vz,104:$VA,105:$VB,106:$VC,107:$VD,108:$VE,109:$VF}),o($VN,[2,96],{91:80,97:86,99:87,82:172,87:173,85:174,93:$Vw,94:$Vx,95:$Vy,96:$Vz,104:$VA,105:$VB,106:$VC,107:$VD,108:$VE,109:$VF}),o($VN,[2,97],{91:80,97:86,99:87,82:172,87:173,85:174,93:$Vw,94:$Vx,95:$Vy,96:$Vz,104:$VA,105:$VB,106:$VC,107:$VD,108:$VE,109:$VF}),o($VT,[2,105]),{19:$V2,21:$V4,25:182,27:[1,175],69:[1,181],92:$V61,100:$V71,101:$V81,102:$V91,155:176,156:177,157:[1,178],158:179,159:180,169:183,174:184,179:$Va1,187:$Vb1,189:187,190:$Vc1,191:$Vd1,194:$V8},{19:$Vm,21:$Vn,67:$Ve1,112:194,113:$Vf1,120:195,124:205,125:196,126:197,127:198,133:199,140:$Vg1,142:201,143:202,144:$Vh1,145:204,148:206,153:$Vi1,157:$VG,180:$Vj1,183:209,192:$Vk1,194:$VH},o($Vk,[2,137]),o($Vk,[2,133]),o($Vk,[2,134]),o($Vk,[2,135]),{19:$V2,21:$V4,25:22,35:213,193:23,194:$V8,195:$V9,196:212},{19:$Vm,21:$Vn,123:214,124:215,157:$VG,183:209,192:$Vk1,194:$VH},o($VX,[2,115]),o($VP,[2,120]),o($VP,[2,122]),o($VP,[2,123]),o($VP,[2,124]),{103:[1,216]},o($VP,[2,121]),o($V_,[2,33]),o($V_,[2,39]),o($V01,[2,76]),o($Vl1,[2,88]),o($Vl1,[2,89]),o($V01,[2,79]),{68:[1,217]},{19:$Vm,21:$Vn,67:$Ve1,112:218,113:$Vf1,120:195,124:205,125:196,126:197,127:198,133:199,140:$Vg1,142:201,143:202,144:$Vh1,145:204,148:206,153:$Vi1,157:$VG,180:$Vj1,183:209,192:$Vk1,194:$VH},o($V_,[2,34]),o($V11,[2,45]),o($V_,[2,42],{49:219,50:$VI}),o($V01,[2,48]),o($V11,[2,43]),o($V01,[2,56],{58:220}),o($V01,[2,62]),o($Vk,$Vl,{83:64,84:65,79:67,80:68,81:69,87:75,183:76,85:78,91:80,97:86,99:87,110:103,71:148,43:149,64:161,66:162,65:163,62:221,19:$Vm,21:$Vn,26:$Vo,67:$V31,69:$V41,74:$Ve,75:$Vf,76:$Vg,77:$Vs,88:$Vt,89:$Vu,90:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,104:$VA,105:$VB,106:$VC,107:$VD,108:$VE,109:$VF,157:$VG,194:$VH}),o($V01,[2,66],{110:103,71:148,43:149,65:222,74:$Ve,75:$Vf,76:$Vg,111:$Vl,119:$Vl,122:$Vl,180:$Vl}),o($V01,[2,68]),o($V01,[2,69],{83:64,84:65,87:75,91:80,64:223,88:$Vt,89:$Vu,90:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz}),o($Vb,$Vc,{39:41,43:43,37:224,42:$Vd,74:$Ve,75:$Vf,76:$Vg}),o($V01,[2,72]),o($V01,[2,46]),o($VM,[2,54]),o($Vk,$Vl,{59:56,63:57,64:59,66:60,72:61,83:64,84:65,79:67,80:68,81:69,73:70,43:71,87:75,183:76,85:78,110:79,91:80,97:86,99:87,55:225,19:$Vm,21:$Vn,26:$Vo,42:$Vp,67:$Vq,69:$Vr,74:$Ve,75:$Vf,76:$Vg,77:$Vs,88:$Vt,89:$Vu,90:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,104:$VA,105:$VB,106:$VC,107:$VD,108:$VE,109:$VF,157:$VG,194:$VH}),o($VN,[2,61]),o($Vk,$Vl,{63:57,64:59,66:60,72:61,83:64,84:65,79:67,80:68,81:69,73:70,43:71,87:75,183:76,85:78,110:79,91:80,97:86,99:87,59:226,19:$Vm,21:$Vn,26:$Vo,42:$Vp,67:$Vq,69:$Vr,74:$Ve,75:$Vf,76:$Vg,77:$Vs,88:$Vt,89:$Vu,90:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,104:$VA,105:$VB,106:$VC,107:$VD,108:$VE,109:$VF,157:$VG,194:$VH}),o($VN,[2,86]),o($VP,[2,100]),o($VP,[2,113]),o($VP,[2,114]),o($VP,[2,184]),o($VS,[2,186]),o($VS,[2,187]),o($VS,[2,188]),o($VS,[2,189]),o($VS,[2,190]),{160:227,161:228,162:229,165:230,168:[1,233],172:231,177:232},o($VS,[2,198],{163:234,166:235,167:[1,236]}),o($VS,[2,208],{170:237,173:238,167:[1,239]}),o($VS,[2,218],{175:240,178:241,167:[1,242]}),o($Vm1,[2,234]),o($Vm1,[2,239],{188:243,103:[1,244]}),o($Vm1,[2,236]),o($Vm1,[2,237]),o($Vm1,[2,238]),o([19,21,27,69,92,100,101,102,157,167,168,179,187,190,191,194],[2,224]),o($Vm1,[2,248]),o($Vm1,[2,249]),o($Vm1,[2,250]),{113:[1,245]},{113:[2,139]},{113:[2,146]},{113:[2,147],128:246,129:247,130:$Vn1},{113:[2,148]},o($Vo1,$Vp1,{134:249,137:252,139:253,135:$Vq1,136:$Vr1}),{19:$V2,21:$V4,25:255,141:254,193:256,194:$V8,195:$V9},o($Vs1,[2,169]),o($Vs1,[2,171]),o($Vs1,[2,172]),o($Vs1,[2,173]),o($Vk,$Vl,{45:54,55:55,59:56,63:57,64:59,66:60,72:61,83:64,84:65,79:67,80:68,81:69,73:70,43:71,87:75,183:76,85:78,110:79,91:80,97:86,99:87,32:257,19:$Vm,21:$Vn,26:$Vo,42:$Vp,67:$Vq,69:$Vr,74:$Ve,75:$Vf,76:$Vg,77:$Vs,88:$Vt,89:$Vu,90:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,104:$VA,105:$VB,106:$VC,107:$VD,108:$VE,109:$VF,157:$VG,194:$VH}),{19:$Vm,21:$Vn,124:258,157:$VG,183:209,192:$Vk1,194:$VH},{19:$Vm,21:$Vn,67:$Ve1,124:205,126:263,127:261,131:259,132:260,133:262,140:$Vg1,142:201,143:202,144:$Vh1,145:204,148:206,153:$Vi1,157:$VG,180:$Vj1,183:209,192:$Vk1,194:$VH},{19:$V2,21:$V4,25:255,141:264,193:256,194:$V8,195:$V9},o($Vt1,[2,241]),o($Vt1,[2,242]),o([19,21,157,192,194],[2,183]),o($Vk,[2,259],{25:22,193:23,35:265,19:$V2,21:$V4,194:$V8,195:$V9}),o($Vu1,[2,260]),o($Vk,[2,143],{183:209,124:266,19:$Vm,21:$Vn,157:$VG,192:$Vk1,194:$VH}),o($Vv1,[2,144]),{19:$Vm,21:$Vn,79:267,157:$VG,183:76,194:$VH},o($V01,[2,80]),{113:[1,268]},o($V11,[2,50]),o($V11,[2,55],{52:269,53:$VJ}),o($V01,[2,63]),o($V01,[2,67]),o($V01,[2,70]),{68:[1,270]},o($VM,[2,52]),o($VN,[2,59]),o($VS,[2,191],{165:271,168:$Vw1}),o($VS,[2,192],{172:273,168:$Vx1}),o($VS,[2,193],{177:275,168:$Vy1}),o($Vz1,[2,200]),o($Vz1,[2,210]),o($Vz1,[2,220]),{19:$V2,21:$V4,25:277,92:$V61,100:$V71,101:$V81,102:$V91,169:278,174:279,179:$Va1,187:$Vb1,189:187,190:$Vc1,191:$Vd1,194:$V8},o($VS,[2,194]),o($VS,[2,199]),o($Vz1,[2,195],{164:280}),o($VS,[2,204]),o($VS,[2,209]),o($Vz1,[2,205],{171:281}),o($VS,[2,214]),o($VS,[2,219]),o($Vz1,[2,215],{176:282}),o($Vm1,[2,235]),{19:$Vm,21:$Vn,79:283,157:$VG,183:76,194:$VH},o($VK,[2,142]),o([68,113],[2,149],{129:284,130:$Vn1}),o($Vo1,[2,151]),{19:$Vm,21:$Vn,67:$Ve1,124:205,126:285,133:199,140:$Vg1,142:201,143:202,144:$Vh1,145:204,148:206,153:$Vi1,157:$VG,180:$Vj1,183:209,192:$Vk1,194:$VH},o($Vo1,[2,155]),o($Vo1,[2,157],{142:201,143:202,145:204,124:205,148:206,183:209,133:286,19:$Vm,21:$Vn,67:$Ve1,140:$Vg1,144:$Vh1,153:$Vi1,157:$VG,180:$Vj1,192:$Vk1,194:$VH}),o($Vo1,[2,158],{142:201,143:202,145:204,124:205,148:206,183:209,133:287,19:$Vm,21:$Vn,67:$Ve1,140:$Vg1,144:$Vh1,153:$Vi1,157:$VG,180:$Vj1,192:$Vk1,194:$VH}),o($Vo1,$VA1,{138:288,139:289,135:$VB1,136:$VC1}),o($Vs1,[2,166]),{19:$Vm,21:$Vn,67:$Ve1,124:205,142:292,143:293,148:206,153:$Vi1,157:$VG,183:209,192:$Vk1,194:$VH},o($VD1,[2,246]),o($VD1,[2,247]),o($VE1,$VF1,{146:294,147:295,149:$VG1,150:$VH1,151:$VI1,152:$VJ1}),o($Vk,$Vl,{45:54,55:55,59:56,63:57,64:59,66:60,72:61,83:64,84:65,79:67,80:68,81:69,73:70,43:71,87:75,183:76,85:78,110:79,91:80,97:86,99:87,32:300,19:$Vm,21:$Vn,26:$Vo,42:$Vp,67:$Vq,69:$Vr,74:$Ve,75:$Vf,76:$Vg,77:$Vs,88:$Vt,89:$Vu,90:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,104:$VA,105:$VB,106:$VC,107:$VD,108:$VE,109:$VF,157:$VG,194:$VH}),{68:[1,301]},{68:[2,153]},{68:[2,154]},{130:$Vp1,134:249,135:$Vq1,136:$Vr1,137:302,139:253},{128:246,129:247,130:$Vn1},o($Vs1,[2,225]),o($Vu1,[2,261]),o($Vv1,[2,145]),o($VP,[2,125]),o([7,18,19,20,21,22,30,50,53,68,88,89,90,93,94,95,96,181,185,194,195],$VK1,{114:303}),o($V01,[2,57]),o($V01,[2,71]),o($Vz1,[2,201]),{19:$V2,21:$V4,25:277,194:$V8},o($Vz1,[2,211]),{92:$V61,100:$V71,101:$V81,102:$V91,169:278,187:$Vb1,189:187,190:$Vc1,191:$Vd1},o($Vz1,[2,221]),{174:279,179:$Va1},o($Vz1,[2,202],{167:[1,304]}),o($Vz1,[2,212],{167:[1,305]}),o($Vz1,[2,222],{167:[1,306]}),o($VS,[2,197],{165:307,168:$Vw1}),o($VS,[2,207],{172:308,168:$Vx1}),o($VS,[2,217],{177:309,168:$Vy1}),o($Vm1,[2,240]),o($Vo1,[2,152]),o($Vo1,[2,150]),o($Vs1,[2,164]),o($Vs1,[2,165]),o($Vo1,$VL1),o($Vs1,[2,167]),o($Vo1,[2,161],{142:201,143:202,145:204,124:205,148:206,183:209,133:286,19:$Vm,21:$Vn,67:$Ve1,140:$Vg1,144:$Vh1,153:$Vi1,157:$VG,180:$Vj1,192:$Vk1,194:$VH}),o($Vo1,[2,162],{142:201,143:202,145:204,124:205,148:206,183:209,133:287,19:$Vm,21:$Vn,67:$Ve1,140:$Vg1,144:$Vh1,153:$Vi1,157:$VG,180:$Vj1,192:$Vk1,194:$VH}),o($Vs1,[2,168]),o($Vs1,[2,170]),o($VE1,$VK1,{114:310}),o($VE1,[2,176]),o($VE1,[2,179]),o($VE1,[2,180]),o($VE1,[2,181]),o($VE1,[2,182]),o($VE1,$VF1,{147:295,146:311,149:$VG1,150:$VH1,151:$VI1,152:$VJ1}),o($VE1,$VF1,{147:295,146:312,149:$VG1,150:$VH1,151:$VI1,152:$VJ1}),o([68,130],$VA1,{139:289,138:313,135:$VB1,136:$VC1}),o([7,18,19,20,21,22,30,50,53,68,88,89,90,93,94,95,96,185,194,195],$VM1,{115:314,121:315,184:316,181:$VN1}),o($Vz1,[2,203]),o($Vz1,[2,213]),o($Vz1,[2,223]),o($Vz1,[2,196]),o($Vz1,[2,206]),o($Vz1,[2,216]),o($VO1,$VM1,{121:315,184:316,115:318,181:$VN1}),o($VE1,$VK1,{114:319}),o($VE1,$VK1,{114:320}),{68:[2,163],130:$VL1},o($Vl1,[2,132]),o($VP1,[2,141]),o([7,18,19,20,21,22,30,50,53,68,88,89,90,93,94,95,96,113,130,135,136,194,195],[2,229],{34:321,185:$V7}),{19:$Vm,21:$Vn,124:322,157:$VG,183:209,192:$Vk1,194:$VH},o($Vs1,[2,177]),o($VO1,$VM1,{121:315,184:316,115:323,181:$VN1}),o($VO1,$VM1,{121:315,184:316,115:324,181:$VN1}),o($V51,[2,231]),{19:$Vm,21:$Vn,92:$V61,100:$V71,101:$V81,102:$V91,157:$VG,169:327,182:325,183:326,187:$Vb1,189:187,190:$Vc1,191:$Vd1,194:$VH},o($Vs1,[2,178]),o($Vs1,[2,174]),o($VP1,[2,226]),o($VP1,[2,227]),o($VP1,[2,228])],
defaultActions: {6:[2,11],29:[2,1],88:[2,117],89:[2,118],90:[2,119],95:[2,130],96:[2,131],195:[2,139],196:[2,146],198:[2,148],260:[2,153],261:[2,154]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = new Error();

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  /*
    ShEx parser in the Jison parser generator format.
  */

  var UNBOUNDED = -1;

  var ShExUtil = require("./ShExUtil");

  // Common namespaces and entities
  var RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
      RDF_TYPE  = RDF + 'type',
      RDF_FIRST = RDF + 'first',
      RDF_REST  = RDF + 'rest',
      RDF_NIL   = RDF + 'nil',
      XSD = 'http://www.w3.org/2001/XMLSchema#',
      XSD_INTEGER  = XSD + 'integer',
      XSD_DECIMAL  = XSD + 'decimal',
      XSD_FLOAT   = XSD + 'float',
      XSD_DOUBLE   = XSD + 'double',
      XSD_BOOLEAN  = XSD + 'boolean',
      XSD_TRUE =  '"true"^^'  + XSD_BOOLEAN,
      XSD_FALSE = '"false"^^' + XSD_BOOLEAN,
      XSD_PATTERN        = XSD + 'pattern',
      XSD_MININCLUSIVE   = XSD + 'minInclusive',
      XSD_MINEXCLUSIVE   = XSD + 'minExclusive',
      XSD_MAXINCLUSIVE   = XSD + 'maxInclusive',
      XSD_MAXEXCLUSIVE   = XSD + 'maxExclusive',
      XSD_LENGTH         = XSD + 'length',
      XSD_MINLENGTH      = XSD + 'minLength',
      XSD_MAXLENGTH      = XSD + 'maxLength',
      XSD_TOTALDIGITS    = XSD + 'totalDigits',
      XSD_FRACTIONDIGITS = XSD + 'fractionDigits';

  var numericDatatypes = [
      XSD + "integer",
      XSD + "decimal",
      XSD + "float",
      XSD + "double",
      XSD + "string",
      XSD + "boolean",
      XSD + "dateTime",
      XSD + "nonPositiveInteger",
      XSD + "negativeInteger",
      XSD + "long",
      XSD + "int",
      XSD + "short",
      XSD + "byte",
      XSD + "nonNegativeInteger",
      XSD + "unsignedLong",
      XSD + "unsignedInt",
      XSD + "unsignedShort",
      XSD + "unsignedByte",
      XSD + "positiveInteger"
  ];

  var absoluteIRI = /^[a-z][a-z0-9+.-]*:/i,
    schemeAuthority = /^(?:([a-z][a-z0-9+.-]*:))?(?:\/\/[^\/]*)?/i,
    dotSegments = /(?:^|\/)\.\.?(?:$|[\/#?])/;

  var numericFacets = ["mininclusive", "minexclusive",
                       "maxinclusive", "maxexclusive"];

  // Returns a lowercase version of the given string
  function lowercase(string) {
    return string.toLowerCase();
  }

  // Appends the item to the array and returns the array
  function appendTo(array, item) {
    return array.push(item), array;
  }

  // Appends the items to the array and returns the array
  function appendAllTo(array, items) {
    return array.push.apply(array, items), array;
  }

  // Extends a base object with properties of other objects
  function extend(base) {
    if (!base) base = {};
    for (var i = 1, l = arguments.length, arg; i < l && (arg = arguments[i] || {}); i++)
      for (var name in arg)
        base[name] = arg[name];
    return base;
  }

  // Creates an array that contains all items of the given arrays
  function unionAll() {
    var union = [];
    for (var i = 0, l = arguments.length; i < l; i++)
      union = union.concat.apply(union, arguments[i]);
    return union;
  }

  // N3.js:lib/N3Parser.js<0.4.5>:58 with
  //   s/this\./Parser./g
  // ### `_setBase` sets the base IRI to resolve relative IRIs.
  Parser._setBase = function (baseIRI) {
    if (!baseIRI)
      baseIRI = null;

    // baseIRI '#' check disabled to allow -x 'data:text/shex,...#'
    // else if (baseIRI.indexOf('#') >= 0)
    //   throw new Error('Invalid base IRI ' + baseIRI);

    // Set base IRI and its components
    if (Parser._base = baseIRI) {
      Parser._basePath   = baseIRI.replace(/[^\/?]*(?:\?.*)?$/, '');
      baseIRI = baseIRI.match(schemeAuthority);
      Parser._baseRoot   = baseIRI[0];
      Parser._baseScheme = baseIRI[1];
    }
  }

  // N3.js:lib/N3Parser.js<0.4.5>:576 with
  //   s/this\./Parser./g
  //   s/token/iri/
  // ### `_resolveIRI` resolves a relative IRI token against the base path,
  // assuming that a base path has been set and that the IRI is indeed relative.
  function _resolveIRI (iri) {
    switch (iri[0]) {
    // An empty relative IRI indicates the base IRI
    case undefined: return Parser._base;
    // Resolve relative fragment IRIs against the base IRI
    case '#': return Parser._base + iri;
    // Resolve relative query string IRIs by replacing the query string
    case '?': return Parser._base.replace(/(?:\?.*)?$/, iri);
    // Resolve root-relative IRIs at the root of the base IRI
    case '/':
      // Resolve scheme-relative IRIs to the scheme
      return (iri[1] === '/' ? Parser._baseScheme : Parser._baseRoot) + _removeDotSegments(iri);
    // Resolve all other IRIs at the base IRI's path
    default: {
      return _removeDotSegments(Parser._basePath + iri);
    }
    }
  }

  // ### `_removeDotSegments` resolves './' and '../' path segments in an IRI as per RFC3986.
  function _removeDotSegments (iri) {
    // Don't modify the IRI if it does not contain any dot segments
    if (!dotSegments.test(iri))
      return iri;

    // Start with an imaginary slash before the IRI in order to resolve trailing './' and '../'
    var result = '', length = iri.length, i = -1, pathStart = -1, segmentStart = 0, next = '/';

    while (i < length) {
      switch (next) {
      // The path starts with the first slash after the authority
      case ':':
        if (pathStart < 0) {
          // Skip two slashes before the authority
          if (iri[++i] === '/' && iri[++i] === '/')
            // Skip to slash after the authority
            while ((pathStart = i + 1) < length && iri[pathStart] !== '/')
              i = pathStart;
        }
        break;
      // Don't modify a query string or fragment
      case '?':
      case '#':
        i = length;
        break;
      // Handle '/.' or '/..' path segments
      case '/':
        if (iri[i + 1] === '.') {
          next = iri[++i + 1];
          switch (next) {
          // Remove a '/.' segment
          case '/':
            result += iri.substring(segmentStart, i - 1);
            segmentStart = i + 1;
            break;
          // Remove a trailing '/.' segment
          case undefined:
          case '?':
          case '#':
            return result + iri.substring(segmentStart, i) + iri.substr(i + 1);
          // Remove a '/..' segment
          case '.':
            next = iri[++i + 1];
            if (next === undefined || next === '/' || next === '?' || next === '#') {
              result += iri.substring(segmentStart, i - 2);
              // Try to remove the parent path from result
              if ((segmentStart = result.lastIndexOf('/')) >= pathStart)
                result = result.substr(0, segmentStart);
              // Remove a trailing '/..' segment
              if (next !== '/')
                return result + '/' + iri.substr(i + 1);
              segmentStart = i + 1;
            }
          }
        }
      }
      next = iri[++i];
    }
    return result + iri.substring(segmentStart);
  }

  Parser._setTermResolver = function (res) {
    Parser._termResolver = res;
  }

  // Creates an expression with the given type and attributes
  function expression(expr, attr) {
    var expression = { expression: expr };
    if (attr)
      for (var a in attr)
        expression[a] = attr[a];
    return expression;
  }

  // Creates a path with the given type and items
  function path(type, items) {
    return { type: 'path', pathType: type, items: items };
  }

  // Creates a literal with the given value and type
  function createLiteral(value, type) {
    return { value: value, type: type };
  }

  // Creates a new blank node identifier
  function blank() {
    return '_:b' + blankId++;
  };
  var blankId = 0;
  Parser._resetBlanks = function () { blankId = 0; }
  Parser.reset = function () {
    Parser._prefixes = Parser._termResolver = Parser.valueExprDefns = Parser.shapes = Parser.productions = Parser.start = Parser.startActs = null; // Reset state.
    Parser._base = Parser._baseIRI = Parser._baseIRIPath = Parser._baseIRIRoot = null;
  }
  var _fileName; // for debugging
  Parser._setFileName = function (fn) { _fileName = fn; }

  // Regular expression and replacement strings to escape strings
  var stringEscapeReplacements = { '\\': '\\', "'": "'", '"': '"',
                                   't': '\t', 'b': '\b', 'n': '\n', 'r': '\r', 'f': '\f' },
      semactEscapeReplacements = { '\\': '\\', '%': '%' };

  // Translates string escape codes in the string into their textual equivalent
  function unescapeString(string, trimLength) {
    string = string.substring(trimLength, string.length - trimLength);
    return { value: ShExUtil.unescapeText(string, stringEscapeReplacements) };
  }

  function unescapeLangString(string, trimLength) {
    var at = string.lastIndexOf("@");
    var lang = string.substr(at);
    string = string.substr(0, at);
    var u = unescapeString(string, trimLength);
    return extend(u, { language: lowercase(lang.substr(1)) });
  }

  // Translates regular expression escape codes in the string into their textual equivalent
  function unescapeRegexp (regexp) {
    var end = regexp.lastIndexOf("/");
    var s = regexp.substr(1, end-1);
    var regexpEscapeReplacements = {
      '.': "\\.", '\\': "\\\\", '?': "\\?", '*': "\\*", '+': "\\+",
      '{': "\\{", '}': "\\}", '(': "\\(", ')': "\\)", '|': "\\|",
      '^': "\\^", '$': "\\$", '[': "\\[", ']': "\\]", '/': "\\/",
      't': '\\t', 'n': '\\n', 'r': '\\r', '-': "\\-", '/': '/'
    };
    s = ShExUtil.unescapeText(s, regexpEscapeReplacements)
    var ret = {
      pattern: s
    };
    if (regexp.length > end+1)
      ret.flags = regexp.substr(end+1);
    return ret;
  }

  // Convenience function to return object with p1 key, value p2
  function keyValObject(key, val) {
    var ret = {};
    ret[key] = val;
    return ret;
  }

  // Return object with p1 key, p2 string value
  function unescapeSemanticAction(key, string) {
    string = string.substring(1, string.length - 2);
    return {
      type: "SemAct",
      name: key,
      code: ShExUtil.unescapeText(string, semactEscapeReplacements)
    };
  }

  function error (msg) {
    Parser.reset();
    throw new Error(msg);
  }

  // Expand declared prefix or throw Error
  function expandPrefix (prefix) {
    if (!(prefix in Parser._prefixes))
      error('Parse error; unknown prefix: ' + prefix);
    return Parser._prefixes[prefix];
  }

  // Add a shape to the map
  function addShape (label, shape) {
    if (Parser.productions && label in Parser.productions)
      error("Structural error: "+label+" is a shape");
    if (!Parser.shapes)
      Parser.shapes = {};
    if (label in Parser.shapes) {
      if (Parser.options.duplicateShape === "replace")
        Parser.shapes[label] = shape;
      else if (Parser.options.duplicateShape !== "ignore")
        error("Parse error: "+label+" already defined");
    } else
      Parser.shapes[label] = shape;
  }

  // Add a production to the map
  function addProduction (label, production) {
    if (Parser.shapes && label in Parser.shapes)
      error("Structural error: "+label+" is a shape");
    if (!Parser.productions)
      Parser.productions = {};
    if (label in Parser.productions) {
      if (Parser.options.duplicateShape === "replace")
        Parser.productions[label] = production;
      else if (Parser.options.duplicateShape !== "ignore")
        error("Parse error: "+label+" already defined");
    } else
      Parser.productions[label] = production;
  }

  function shapeJunction (type, container, elts) {
    if (elts.length === 0) {
      return container;
    } else if (container.type === type) {
      container.shapeExprs = container.shapeExprs.concat(elts);
      return container;
    } else {
      return { type: type, shapeExprs: [container].concat(elts) };
    }
  }

  var EmptyObject = {  };
  var EmptyShape = { type: "Shape" };
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
  var iBacktick = yy_.yytext.indexOf('`');
  var prefix = null;
  if (iBacktick > 0) {
    prefix = yy_.yytext.substr(0, iBacktick-1);
    yy_.yytext = yy_.yytext.substr(iBacktick);
  }
  yy_.yytext = { prefix: prefix, label: unescapeString(yy_.yytext, 1) };
  return 157;

break;
case 1:/**/
break;
case 2:return 74;
break;
case 3:return 75;
break;
case 4:return 179;
break;
case 5:return 76;
break;
case 6:return 194;
break;
case 7:return 152;
break;
case 8:return 101;
break;
case 9:return 100;
break;
case 10:return 92;
break;
case 11:return 'ANON';
break;
case 12:return 19;
break;
case 13:return 21;
break;
case 14:return 192;
break;
case 15:return 93;
break;
case 16:return 195;
break;
case 17:return 186;
break;
case 18: yy_.yytext = unescapeLangString(yy_.yytext, 3); return 187; 
break;
case 19: yy_.yytext = unescapeLangString(yy_.yytext, 3); return 187; 
break;
case 20: yy_.yytext = unescapeLangString(yy_.yytext, 1); return 187; 
break;
case 21: yy_.yytext = unescapeLangString(yy_.yytext, 1); return 187; 
break;
case 22: yy_.yytext = unescapeString(yy_.yytext, 3); return 102; 
break;
case 23: yy_.yytext = unescapeString(yy_.yytext, 3); return 102; 
break;
case 24: yy_.yytext = unescapeString(yy_.yytext, 1); return 102; 
break;
case 25: yy_.yytext = unescapeString(yy_.yytext, 1); return 102; 
break;
case 26:return 18;
break;
case 27:return 20;
break;
case 28:return 22;
break;
case 29:return 30;
break;
case 30:return 38;
break;
case 31:return 'IT_VIRTUAL';
break;
case 32:return 119;
break;
case 33:return 122;
break;
case 34:return 77;
break;
case 35:return 89;
break;
case 36:return 88;
break;
case 37:return 90;
break;
case 38:return 53;
break;
case 39:return 50;
break;
case 40:return 42;
break;
case 41:return 104;
break;
case 42:return 105;
break;
case 43:return 106;
break;
case 44:return 107;
break;
case 45:return 94;
break;
case 46:return 95;
break;
case 47:return 96;
break;
case 48:return 108;
break;
case 49:return 109;
break;
case 50:return 31;
break;
case 51:return 181;
break;
case 52:return 111;
break;
case 53:return 113;
break;
case 54:return 180;
break;
case 55:return '||';
break;
case 56:return 130;
break;
case 57:return 135;
break;
case 58:return 67;
break;
case 59:return 68;
break;
case 60:return 26;
break;
case 61:return 27;
break;
case 62:return 140;
break;
case 63:return '!';
break;
case 64:return 103;
break;
case 65:return 153;
break;
case 66:return 69;
break;
case 67:return 167;
break;
case 68:return 136;
break;
case 69:return 149;
break;
case 70:return 150;
break;
case 71:return 151;
break;
case 72:return 168;
break;
case 73:return 185;
break;
case 74:return 190;
break;
case 75:return 191;
break;
case 76:return 7;
break;
case 77:return 'invalid character '+yy_.yytext;
break;
}
},
rules: [/^(?:(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:)?`([^\u0060\u005c\u000a\u000d]|(\\[\"\'\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*`))/,/^(?:\s+|(#[^\u000a\u000d]*))/,/^(?:(@(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:)(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|:|[0-9]|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))*(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%)))))?))))/,/^(?:(@((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:)))/,/^(?:(@([A-Za-z])+((-([0-9A-Za-z])+))*))/,/^(?:@)/,/^(?:(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:)(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|:|[0-9]|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))*(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%)))))?)))/,/^(?:(\{((([+-])?([0-9])+))((,(((([+-])?([0-9])+))|\*)?))?\}))/,/^(?:(([+-])?((([0-9])+\.([0-9])*(([Ee]([+-])?([0-9])+)))|((\.)?([0-9])+(([Ee]([+-])?([0-9])+))))))/,/^(?:(([+-])?([0-9])*\.([0-9])+))/,/^(?:(([+-])?([0-9])+))/,/^(?:{ANON})/,/^(?:(<([^\u0000-\u0020<>\"{}|^`\\]|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*>))/,/^(?:((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:))/,/^(?:a\b)/,/^(?:(\/([^\u002f\u005C\u000A\u000D]|\\[nrt\\|.?*+(){}$\u002D\u005B\u005D\u005E\/]|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))+\/[smix]*))/,/^(?:(_:((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|[0-9])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?))/,/^(?:(\{([^%\\]|\\[%\\]|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*%\}))/,/^(?:('''(('|'')?([^\'\\]|(\\[\"\'\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*'''(@([A-Za-z])+((-([0-9A-Za-z])+))*)))/,/^(?:("""(("|"")?([^\"\\]|(\\[\"\'\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*"""(@([A-Za-z])+((-([0-9A-Za-z])+))*)))/,/^(?:('([^\u0027\u005c\u000a\u000d]|(\\[\"\'\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*'(@([A-Za-z])+((-([0-9A-Za-z])+))*)))/,/^(?:("([^\u0022\u005c\u000a\u000d]|(\\[\"\'\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*"(@([A-Za-z])+((-([0-9A-Za-z])+))*)))/,/^(?:('''(('|'')?([^\'\\]|(\\[\"\'\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*'''))/,/^(?:("""(("|"")?([^\"\\]|(\\[\"\'\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*"""))/,/^(?:('([^\u0027\u005c\u000a\u000d]|(\\[\"\'\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*'))/,/^(?:("([^\u0022\u005c\u000a\u000d]|(\\[\"\'\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*"))/,/^(?:([Bb][Aa][Ss][Ee]))/,/^(?:([Pp][Rr][Ee][Ff][Ii][Xx]))/,/^(?:([Ll][Aa][Bb][Ee][Ll]))/,/^(?:([sS][tT][aA][rR][tT]))/,/^(?:([eE][xX][tT][eE][rR][nN][aA][lL]))/,/^(?:([Vv][Ii][Rr][Tt][Uu][Aa][Ll]))/,/^(?:([Cc][Ll][Oo][Ss][Ee][Dd]))/,/^(?:([Ee][Xx][Tt][Rr][Aa]))/,/^(?:([Ll][Ii][Tt][Ee][Rr][Aa][Ll]))/,/^(?:([Bb][Nn][Oo][Dd][Ee]))/,/^(?:([Ii][Rr][Ii]))/,/^(?:([Nn][Oo][Nn][Ll][Ii][Tt][Ee][Rr][Aa][Ll]))/,/^(?:([Aa][Nn][Dd]))/,/^(?:([Oo][Rr]))/,/^(?:([No][Oo][Tt]))/,/^(?:([Mm][Ii][Nn][Ii][Nn][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Mm][Ii][Nn][Ee][Xx][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Mm][Aa][Xx][Ii][Nn][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Mm][Aa][Xx][Ee][Xx][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Ll][Ee][Nn][Gg][Tt][Hh]))/,/^(?:([Mm][Ii][Nn][Ll][Ee][Nn][Gg][Tt][Hh]))/,/^(?:([Mm][Aa][Xx][Ll][Ee][Nn][Gg][Tt][Hh]))/,/^(?:([Tt][Oo][Tt][Aa][Ll][Dd][Ii][Gg][Ii][Tt][Ss]))/,/^(?:([Ff][Rr][Aa][Cc][Tt][Ii][Oo][Nn][Dd][Ii][Gg][Ii][Tt][Ss]))/,/^(?:=)/,/^(?:\/\/)/,/^(?:\{)/,/^(?:\})/,/^(?:&)/,/^(?:\|\|)/,/^(?:\|)/,/^(?:,)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\$)/,/^(?:!)/,/^(?:\^\^)/,/^(?:\^)/,/^(?:\.)/,/^(?:~)/,/^(?:;)/,/^(?:\*)/,/^(?:\+)/,/^(?:\?)/,/^(?:-)/,/^(?:%)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = ShExJison;
exports.Parser = ShExJison.Parser;
exports.parse = function () { return ShExJison.parse.apply(ShExJison, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}