/* parser generated by jison 0.4.16 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ShExJison = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[7,19,20,21,22,23,24,32,187,196,197],$V1=[1,12],$V2=[1,27],$V3=[1,13],$V4=[1,29],$V5=[1,14],$V6=[1,15],$V7=[1,21],$V8=[1,26],$V9=[1,28],$Va=[1,30],$Vb=[7,19,20,21,22,23,24,32,196,197],$Vc=[20,22,28,69,71,79,90,91,92,95,96,97,98,106,107,108,109,110,111,113,121,124,159,182,196],$Vd=[2,38],$Ve=[1,45],$Vf=[1,47],$Vg=[1,48],$Vh=[1,49],$Vi=[7,19,20,21,22,23,24,28,32,40,44,52,55,69,70,71,76,77,78,79,90,91,92,95,96,97,98,106,107,108,109,110,111,113,115,121,124,132,137,138,151,152,153,154,159,182,183,187,196,197],$Vj=[7,19,20,21,22,23,24,28,29,32,40,44,52,55,69,70,71,76,77,78,79,90,91,92,94,95,96,97,98,102,103,104,106,107,108,109,110,111,113,115,121,124,132,137,138,151,152,153,154,155,159,169,170,181,182,183,187,188,189,192,193,194,196,197],$Vk=[20,22,29,196],$Vl=[113,121,124,182],$Vm=[2,138],$Vn=[1,85],$Vo=[1,87],$Vp=[1,80],$Vq=[1,61],$Vr=[1,65],$Vs=[1,66],$Vt=[1,69],$Vu=[1,75],$Vv=[1,76],$Vw=[1,77],$Vx=[1,84],$Vy=[1,91],$Vz=[1,92],$VA=[1,93],$VB=[1,94],$VC=[1,95],$VD=[1,96],$VE=[1,97],$VF=[1,98],$VG=[1,99],$VH=[1,88],$VI=[1,86],$VJ=[1,113],$VK=[1,114],$VL=[7,19,20,21,22,23,24,32,52,55,70,90,91,92,95,96,97,98,115,132,137,138,151,152,153,154,183,187,196,197],$VM=[7,19,20,21,22,23,24,32,70,115,132,137,138,151,152,153,154,183,187,196,197],$VN=[7,19,20,21,22,23,24,32,52,70,115,132,137,138,151,152,153,154,183,187,196,197],$VO=[7,19,20,21,22,23,24,32,52,55,70,115,132,137,138,151,152,153,154,183,187,196,197],$VP=[7,19,20,21,22,23,24,32,52,55,70,76,77,78,113,115,121,124,132,137,138,151,152,153,154,182,183,187,196,197],$VQ=[7,19,20,21,22,23,24,32,52,55,70,95,96,97,98,106,107,108,109,110,111,115,132,137,138,151,152,153,154,183,187,196,197],$VR=[2,101],$VS=[7,19,20,21,22,23,24,32,52,55,70,76,77,78,95,96,97,98,113,115,121,124,132,137,138,151,152,153,154,182,183,187,196,197],$VT=[20,22,29,71,94,102,103,104,159,181,189,192,193,196],$VU=[7,19,20,21,22,23,24,32,52,55,70,106,107,108,109,110,111,115,132,137,138,151,152,153,154,183,187,196,197],$VV=[1,138],$VW=[1,140],$VX=[1,139],$VY=[7,19,20,21,22,23,24,32,52,55,70,76,77,78,95,96,97,98,106,107,108,109,110,111,113,115,121,124,132,137,138,151,152,153,154,182,183,187,196,197],$VZ=[7,19,20,21,22,23,24,28,29,32,44,52,55,69,70,71,76,77,78,79,90,91,92,94,95,96,97,98,102,103,104,106,107,108,109,110,111,113,115,121,124,132,137,138,151,152,153,154,159,169,170,181,182,183,187,189,192,193,194,196,197],$V_=[94,102,103,104],$V$=[7,19,20,21,22,23,24,32,70,196,197],$V01=[2,40],$V11=[7,19,20,21,22,23,24,32,52,55,70,196,197],$V21=[7,19,20,21,22,23,24,32,52,70,196,197],$V31=[1,163],$V41=[1,167],$V51=[1,168],$V61=[7,19,20,21,22,23,24,32,52,55,70,90,91,92,95,96,97,98,115,132,137,138,187,196,197],$V71=[1,194],$V81=[1,195],$V91=[1,196],$Va1=[1,189],$Vb1=[1,193],$Vc1=[1,188],$Vd1=[1,191],$Ve1=[1,192],$Vf1=[1,210],$Vg1=[2,140],$Vh1=[1,203],$Vi1=[1,206],$Vj1=[1,214],$Vk1=[1,211],$Vl1=[1,213],$Vm1=[7,19,20,21,22,23,24,32,52,55,70,90,91,92,95,96,97,98,196,197],$Vn1=[7,19,20,21,22,23,24,29,32,52,55,70,71,90,91,92,94,95,96,97,98,102,103,104,115,132,137,138,159,169,170,181,183,187,189,192,193,196,197],$Vo1=[1,251],$Vp1=[70,115,132],$Vq1=[2,158],$Vr1=[1,253],$Vs1=[1,254],$Vt1=[70,115,132,137,138],$Vu1=[20,22,28,44,69,71,76,77,78,79,90,91,92,94,95,96,97,98,102,103,104,106,107,108,109,110,111,113,121,124,159,182,189,192,193,194,196],$Vv1=[20,22,113,121,124,182,196,197],$Vw1=[20,22,113,121,124,159,182,194,196],$Vx1=[1,275],$Vy1=[1,277],$Vz1=[1,279],$VA1=[20,22,29,71,94,102,103,104,159,170,181,189,192,193,196],$VB1=[2,162],$VC1=[1,293],$VD1=[1,294],$VE1=[20,22,69,70,115,132,137,138,155,159,194,196],$VF1=[70,115,132,137,138,183,187],$VG1=[2,177],$VH1=[1,299],$VI1=[1,300],$VJ1=[1,301],$VK1=[1,302],$VL1=[2,142],$VM1=[2,161],$VN1=[2,232],$VO1=[1,320],$VP1=[70,115,132,137,138,187],$VQ1=[7,19,20,21,22,23,24,32,52,55,70,90,91,92,95,96,97,98,115,132,137,138,183,187,196,197];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"shexDoc":3,"initParser":4,"Qdirective_E_Star":5,"Q_O_QnotStartAction_E_Or_QstartActions_E_S_Qstatement_E_Star_C_E_Opt":6,"EOF":7,"directive":8,"O_QnotStartAction_E_Or_QstartActions_E_C":9,"notStartAction":10,"startActions":11,"Qstatement_E_Star":12,"statement":13,"O_QnotStartAction_E_Or_QstartActions_E_S_Qstatement_E_Star_C":14,"baseDecl":15,"prefixDecl":16,"importDecl":17,"labelDecl":18,"IT_BASE":19,"IRIREF":20,"IT_PREFIX":21,"PNAME_NS":22,"IT_IMPORT":23,"IT_LABEL":24,"O_Qiri_E_Or_QGT_LBRACKET_E_S_Qiri_E_Star_S_QGT_RBRACKET_E_C":25,"Qiri_E_Star":26,"iri":27,"[":28,"]":29,"start":30,"shapeExprDecl":31,"IT_start":32,"=":33,"inlineShapeExpression":34,"QcodeDecl_E_Plus":35,"codeDecl":36,"shapeExprLabel":37,"O_QshapeExpression_E_Or_QIT_EXTERNAL_E_C":38,"shapeExpression":39,"IT_EXTERNAL":40,"QIT_NOT_E_Opt":41,"shapeAtomNoRef":42,"QshapeOr_E_Opt":43,"IT_NOT":44,"shapeRef":45,"shapeOr":46,"inlineShapeOr":47,"Q_O_QIT_OR_E_S_QshapeAnd_E_C_E_Plus":48,"Q_O_QIT_AND_E_S_QshapeNot_E_C_E_Plus":49,"Q_O_QIT_OR_E_S_QshapeAnd_E_C_E_Star":50,"O_QIT_OR_E_S_QshapeAnd_E_C":51,"IT_OR":52,"shapeAnd":53,"O_QIT_AND_E_S_QshapeNot_E_C":54,"IT_AND":55,"shapeNot":56,"inlineShapeAnd":57,"Q_O_QIT_OR_E_S_QinlineShapeAnd_E_C_E_Star":58,"O_QIT_OR_E_S_QinlineShapeAnd_E_C":59,"Q_O_QIT_AND_E_S_QshapeNot_E_C_E_Star":60,"inlineShapeNot":61,"Q_O_QIT_AND_E_S_QinlineShapeNot_E_C_E_Star":62,"O_QIT_AND_E_S_QinlineShapeNot_E_C":63,"shapeAtom":64,"inlineShapeAtom":65,"nonLitNodeConstraint":66,"shapeOrRef":67,"litNodeConstraint":68,"(":69,")":70,".":71,"QnonLitNodeConstraint_E_Opt":72,"shapeDefinition":73,"inlineShapeOrRef":74,"inlineShapeDefinition":75,"ATPNAME_LN":76,"ATPNAME_NS":77,"@":78,"IT_LITERAL":79,"QxsFacet_E_Star":80,"datatype":81,"valueSet":82,"QnumericFacet_E_Plus":83,"xsFacet":84,"nonLiteralKind":85,"QstringFacet_E_Plus":86,"numericFacet":87,"QstringFacet_E_Star":88,"stringFacet":89,"IT_IRI":90,"IT_BNODE":91,"IT_NONLITERAL":92,"stringLength":93,"INTEGER":94,"REGEXP":95,"IT_LENGTH":96,"IT_MINLENGTH":97,"IT_MAXLENGTH":98,"numericRange":99,"rawNumeric":100,"numericLength":101,"DECIMAL":102,"DOUBLE":103,"STRING":104,"^^":105,"IT_MININCLUSIVE":106,"IT_MINEXCLUSIVE":107,"IT_MAXINCLUSIVE":108,"IT_MAXEXCLUSIVE":109,"IT_TOTALDIGITS":110,"IT_FRACTIONDIGITS":111,"Q_O_QincludeSet_E_Or_QextraPropertySet_E_Or_QIT_CLOSED_E_C_E_Star":112,"{":113,"QtripleExpression_E_Opt":114,"}":115,"Qannotation_E_Star":116,"semanticActions":117,"O_QincludeSet_E_Or_QextraPropertySet_E_Or_QIT_CLOSED_E_C":118,"includeSet":119,"extraPropertySet":120,"IT_CLOSED":121,"tripleExpression":122,"annotation":123,"IT_EXTRA":124,"Qpredicate_E_Plus":125,"predicate":126,"oneOfTripleExpr":127,"groupTripleExpr":128,"multiElementOneOf":129,"Q_O_QGT_PIPE_E_S_QgroupTripleExpr_E_C_E_Plus":130,"O_QGT_PIPE_E_S_QgroupTripleExpr_E_C":131,"|":132,"innerTripleExpr":133,"multiElementGroup":134,"unaryTripleExpr":135,"groupTripleExpr_right":136,",":137,";":138,"Q_O_QGT_COMMA_E_S_QunaryTripleExpr_E_C_E_Plus":139,"QGT_COMMA_E_Opt":140,"O_QGT_COMMA_E_S_QunaryTripleExpr_E_C":141,"$":142,"tripleExprLabel":143,"tripleConstraint":144,"bracketedTripleExpr":145,"valueConstraint":146,"include":147,"Qcardinality_E_Opt":148,"cardinality":149,"senseFlags":150,"*":151,"+":152,"?":153,"REPEAT_RANGE":154,"^":155,"QvalueSetValue_E_Star":156,"valueSetValue":157,"iriRange":158,"STRING_GRAVE":159,"literalRange":160,"languageRange":161,"QiriExclusion_E_Plus":162,"QliteralExclusion_E_Plus":163,"QlanguageExclusion_E_Plus":164,"Q_O_Q_TILDE_E_S_QiriExclusion_E_Star_C_E_Opt":165,"QiriExclusion_E_Star":166,"iriExclusion":167,"O_Q_TILDE_E_S_QiriExclusion_E_Star_C":168,"~":169,"-":170,"literal":171,"Q_O_Q_TILDE_E_S_QliteralExclusion_E_Star_C_E_Opt":172,"QliteralExclusion_E_Star":173,"literalExclusion":174,"O_Q_TILDE_E_S_QliteralExclusion_E_Star_C":175,"language":176,"Q_O_Q_TILDE_E_S_QlanguageExclusion_E_Star_C_E_Opt":177,"QlanguageExclusion_E_Star":178,"languageExclusion":179,"O_Q_TILDE_E_S_QlanguageExclusion_E_Star_C":180,"LANGTAG":181,"&":182,"//":183,"O_QiriOrLabel_E_Or_Qliteral_E_C":184,"iriOrLabel":185,"QcodeDecl_E_Star":186,"%":187,"CODE":188,"LANG_STRING":189,"optDT":190,"numericLiteral":191,"IT_true":192,"IT_false":193,"a":194,"blankNode":195,"PNAME_LN":196,"BLANK_NODE_LABEL":197,"QshapeExprLabel_E_Plus":198,"$accept":0,"$end":1},
terminals_: {2:"error",7:"EOF",19:"IT_BASE",20:"IRIREF",21:"IT_PREFIX",22:"PNAME_NS",23:"IT_IMPORT",24:"IT_LABEL",28:"[",29:"]",32:"IT_start",33:"=",40:"IT_EXTERNAL",44:"IT_NOT",52:"IT_OR",55:"IT_AND",69:"(",70:")",71:".",76:"ATPNAME_LN",77:"ATPNAME_NS",78:"@",79:"IT_LITERAL",90:"IT_IRI",91:"IT_BNODE",92:"IT_NONLITERAL",94:"INTEGER",95:"REGEXP",96:"IT_LENGTH",97:"IT_MINLENGTH",98:"IT_MAXLENGTH",102:"DECIMAL",103:"DOUBLE",104:"STRING",105:"^^",106:"IT_MININCLUSIVE",107:"IT_MINEXCLUSIVE",108:"IT_MAXINCLUSIVE",109:"IT_MAXEXCLUSIVE",110:"IT_TOTALDIGITS",111:"IT_FRACTIONDIGITS",113:"{",115:"}",121:"IT_CLOSED",124:"IT_EXTRA",132:"|",137:",",138:";",142:"$",146:"valueConstraint",151:"*",152:"+",153:"?",154:"REPEAT_RANGE",155:"^",159:"STRING_GRAVE",169:"~",170:"-",181:"LANGTAG",182:"&",183:"//",187:"%",188:"CODE",189:"LANG_STRING",192:"IT_true",193:"IT_false",194:"a",196:"PNAME_LN",197:"BLANK_NODE_LABEL"},
productions_: [0,[3,4],[4,0],[5,0],[5,2],[9,1],[9,1],[12,0],[12,2],[14,2],[6,0],[6,1],[8,1],[8,1],[8,1],[8,1],[15,2],[16,3],[17,2],[18,2],[26,0],[26,2],[25,1],[25,3],[10,1],[10,1],[30,3],[11,1],[35,1],[35,2],[13,1],[13,1],[31,2],[38,1],[38,1],[39,3],[39,3],[39,2],[41,0],[41,1],[43,0],[43,1],[34,1],[46,1],[46,2],[51,2],[48,1],[48,2],[54,2],[49,1],[49,2],[50,0],[50,2],[47,2],[59,2],[58,0],[58,2],[53,2],[60,0],[60,2],[57,2],[63,2],[62,0],[62,2],[56,1],[56,2],[61,1],[61,2],[64,1],[64,2],[64,1],[64,1],[64,2],[64,3],[64,1],[72,0],[72,1],[42,1],[42,2],[42,1],[42,1],[42,2],[42,3],[42,1],[65,1],[65,2],[65,1],[65,2],[65,3],[65,1],[67,1],[67,1],[74,1],[74,1],[45,1],[45,1],[45,2],[68,2],[68,2],[68,2],[68,1],[80,0],[80,2],[66,1],[66,2],[66,1],[83,1],[83,2],[88,0],[88,2],[86,1],[86,2],[85,1],[85,1],[85,1],[84,1],[84,1],[89,2],[89,1],[93,1],[93,1],[93,1],[87,2],[87,2],[100,1],[100,1],[100,1],[100,3],[99,1],[99,1],[99,1],[99,1],[101,1],[101,1],[73,6],[118,1],[118,1],[118,1],[112,0],[112,2],[114,0],[114,1],[116,0],[116,2],[75,4],[120,2],[125,1],[125,2],[122,1],[127,1],[127,1],[129,2],[131,2],[130,1],[130,2],[133,1],[133,1],[128,2],[136,0],[136,1],[136,1],[136,2],[140,0],[140,1],[140,1],[134,3],[141,2],[141,2],[139,1],[139,2],[135,3],[135,1],[135,3],[135,1],[135,1],[135,1],[145,6],[148,0],[148,1],[144,5],[144,6],[149,1],[149,1],[149,1],[149,1],[150,1],[82,3],[156,0],[156,2],[157,1],[157,1],[157,1],[157,1],[157,2],[157,2],[157,2],[158,2],[166,0],[166,2],[168,2],[165,0],[165,1],[162,1],[162,2],[167,2],[167,3],[160,2],[173,0],[173,2],[175,2],[172,0],[172,1],[163,1],[163,2],[174,2],[174,3],[161,2],[178,0],[178,2],[180,2],[177,0],[177,1],[164,1],[164,2],[179,2],[179,3],[176,1],[147,2],[123,3],[184,1],[184,1],[117,1],[186,0],[186,2],[36,3],[36,3],[171,1],[171,2],[171,1],[171,1],[171,1],[190,0],[190,2],[126,1],[126,1],[81,1],[37,1],[37,1],[143,1],[143,1],[191,1],[191,1],[191,1],[27,1],[27,1],[27,1],[185,1],[185,1],[185,1],[185,1],[195,1],[119,2],[198,1],[198,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        var valueExprDefns = Parser.valueExprDefns ? { valueExprDefns: Parser.valueExprDefns } : {};
        var startObj = Parser.start ? { start: Parser.start } : {};
        var startActs = Parser.startActs ? { startActs: Parser.startActs } : {};
        var ret = extend({ type: "Schema"},
                         Object.keys(Parser._prefixes).length ? { prefixes: Parser._prefixes } : {}, // Properties ordered here to
                         Object.keys(Parser._imports).length ? { imports: Parser._imports } : {}, // build return object from
                         valueExprDefns, startActs, startObj,                  // components in parser state
                         Parser.shapes ? {shapes: Parser.shapes} : {},         // maintaining intuitve order.
                         Parser.productions ? {productions: Parser.productions} : {});
        if (Parser._base !== null)
          ret.base = Parser._base;
        Parser.reset();
//console.log(JSON.stringify(ret));
        return ret;
      
break;
case 2:
 yy.parser.yy = { lexer: yy.lexer} ; 
break;
case 16:
 // t: @@
        Parser._setBase(Parser._base === null ||
                    absoluteIRI.test($$[$0].slice(1, -1)) ? $$[$0].slice(1, -1) : _resolveIRI($$[$0].slice(1, -1)));
      
break;
case 17:
 // t: ShExParser-test.js/with pre-defined prefixes
        var prefixIRI;
        if (Parser._base === null || absoluteIRI.test($$[$0].slice(1, -1)))
          prefixIRI = $$[$0].slice(1, -1);
        else
          prefixIRI = _resolveIRI($$[$0].slice(1, -1));
        Parser._prefixes[$$[$0-1].slice(0, -1)] = prefixIRI;
      
break;
case 18:
 // t: @@
        var importIRI;
        if (this._base === null || absoluteIRI.test($$[$0].slice(1, -1)))
          importIRI = $$[$0].slice(1, -1);
        else
          importIRI = _resolveIRI($$[$0].slice(1, -1));
        Parser._imports.push(importIRI);
      
break;
case 19:

        $$[$0].forEach(function (elt) {
	  Parser._termResolver.add(elt);
        });
      
break;
case 20: case 51: case 55: case 58: case 62:
this.$ = [];
break;
case 21: case 47: case 50: case 52: case 56: case 59: case 63:
this.$ = $$[$0-1].concat($$[$0]);
break;
case 22: case 46: case 49:
this.$ = [$$[$0]];
break;
case 23: case 161:
this.$ = $$[$0-1];
break;
case 26:

        if (Parser.start)
          error("Parse error: start already defined");
        Parser.start = $$[$0]; // t: startInline
      
break;
case 27:

        Parser.startActs = $$[$0]; // t: startCode1
      
break;
case 28:
this.$ = [$$[$0]] // t: startCode1;
break;
case 29:
this.$ = appendTo($$[$0-1], $$[$0]) // t: startCode3;
break;
case 32:
 // t: 1dot 1val1vsMinusiri3??
        addShape($$[$0-1],  $$[$0]);
      
break;
case 33:

        this.$ = $$[$0];
      
break;
case 34:
this.$ = { type: "ShapeExternal" };
break;
case 35:

        if ($$[$0-2])
          $$[$0-1] = { type: "ShapeNot", "shapeExpr": $$[$0-1] };
        if ($$[$0]) {
          $$[$0].shapeExprs.unshift($$[$0-1]);
          this.$ = $$[$0];
        } else {
// console.log("shapeAtomNoRef:", $$[$0-1]);
          this.$ = $$[$0-1];
        }
      
break;
case 36:
this.$ = { type: "ShapeNot", "shapeExpr": $$[$0-1] };
break;
case 37:

// console.log("shapeRef_shapeOr:", $$[$0-1], $$[$0]);
        $$[$0].shapeExprs.unshift($$[$0-1]);
        this.$ = $$[$0]; // { type: "ShapeOr", "shapeExprs": [$$[$0-1]].concat($$[$0]) };
    
break;
case 38:
this.$ = false;
break;
case 39:
this.$ = true;
break;
case 40: case 158: case 159: case 160: case 241:
this.$ = null;
break;
case 41: case 45: case 48: case 54: case 61: case 242:
this.$ = $$[$0];
break;
case 43:

        this.$ = { type: "ShapeOr", shapeExprs: $$[$0] };
// console.log("shapeOr_1:", this.$);
      
break;
case 44:

        this.$ = $$[$0].length > 0 ? shapeJunction("ShapeAnd", $$[$0-1], $$[$0]) : { type: "ShapeAnd", shapeExprs:$$[$0-1] };
// console.log("shapeOr_2:", this.$);
      
break;
case 53:
this.$ = shapeJunction("ShapeOr", $$[$0-1], $$[$0]);
break;
case 57: case 60:
this.$ = shapeJunction("ShapeAnd", $$[$0-1], $$[$0]);
break;
case 65: case 67:
this.$ = { type: "ShapeNot", "shapeExpr": $$[$0] };
break;
case 69: case 78: case 85:
this.$ = { type: "ShapeAnd", shapeExprs: [ extend({ type: "NodeConstraint" }, $$[$0-1]), $$[$0] ] };
break;
case 72: case 81:
this.$ = shapeJunction("ShapeAnd", $$[$0-1], [$$[$0]]) // t:@@;
break;
case 73: case 82: case 88:
this.$ = $$[$0-1] // t: 1val1vsMinusiri3;
break;
case 74: case 83: case 89:
this.$ = EmptyShape // t: 1dot;
break;
case 87:
this.$ = $$[$0] ? { type: "ShapeAnd", shapeExprs: [ extend({ type: "NodeConstraint" }, $$[$0-1]), $$[$0] ] } : $$[$0-1] // t: !! look to 1dotRef1;
break;
case 94:
 // t: 1dotRefLNex@@
        $$[$0] = $$[$0].substr(1, $$[$0].length-1);
        var namePos = $$[$0].indexOf(':');
        this.$ = { type: "ShapeRef", reference: expandPrefix($$[$0].substr(0, namePos)) + $$[$0].substr(namePos + 1) };
      
break;
case 95:
 // t: 1dotRefNS1@@
        $$[$0] = $$[$0].substr(1, $$[$0].length-1);
        this.$ = { type: "ShapeRef", reference: expandPrefix($$[$0].substr(0, $$[$0].length - 1)) };
      
break;
case 96:
this.$ = { type: "ShapeRef", reference: $$[$0] } // t: 1dotRef1, 1dotRefSpaceLNex, 1dotRefSpaceNS1;
break;
case 97:
this.$ = extend({ type: "NodeConstraint", nodeKind: "literal" }, $$[$0]) // t: 1literalPattern;
break;
case 98:

        if (numericDatatypes.indexOf($$[$0-1]) === -1)
          numericFacets.forEach(function (facet) {
            if (facet in $$[$0])
              error("Parse error: facet " + facet + " not allowed for unknown datatype " + $$[$0-1]);
          });
        this.$ = extend({ type: "NodeConstraint", datatype: $$[$0-1] }, $$[$0]) // t: 1datatype
      
break;
case 99:
this.$ = { type: "NodeConstraint", values: $$[$0-1] } // t: 1val1IRIREF;
break;
case 100:
this.$ = extend({ type: "NodeConstraint"}, $$[$0]);
break;
case 101:
this.$ = {} // t: 1literalPattern;
break;
case 102:

        if (Object.keys($$[$0-1]).indexOf(Object.keys($$[$0])[0]) !== -1) {
          error("Parse error: facet "+Object.keys($$[$0])[0]+" defined multiple times");
        }
        this.$ = extend($$[$0-1], $$[$0]) // t: 1literalLength
      
break;
case 103:
this.$ = extend({ type: "NodeConstraint" }, $$[$0]) // t: 1iriPattern;
break;
case 104:
this.$ = extend({ type: "NodeConstraint"}, $$[$0-1], $$[$0]) // t: 1iriPattern;
break;
case 105:
this.$ = extend({ type: "NodeConstraint"}, $$[$0]) // t: @@;
break;
case 107: case 111:

        if (Object.keys($$[$0-1]).indexOf(Object.keys($$[$0])[0]) !== -1) {
          error("Parse error: facet "+Object.keys($$[$0])[0]+" defined multiple times");
        }
        this.$ = extend($$[$0-1], $$[$0]) // t: !! look to 1literalLength
      
break;
case 108:
this.$ = {};
break;
case 109:

        if (Object.keys($$[$0-1]).indexOf(Object.keys($$[$0])[0]) !== -1) {
          error("Parse error: facet "+Object.keys($$[$0])[0]+" defined multiple times");
        }
        this.$ = extend($$[$0-1], $$[$0])
      
break;
case 112:
this.$ = { nodeKind: "iri" } // t: 1iriPattern;
break;
case 113:
this.$ = { nodeKind: "bnode" } // t: 1bnodeLength;
break;
case 114:
this.$ = { nodeKind: "nonliteral" } // t: 1nonliteralLength;
break;
case 117:
this.$ = keyValObject($$[$0-1], parseInt($$[$0], 10)) // t: 1literalLength;
break;
case 118:
this.$ = unescapeRegexp($$[$0]) // t: 1literalPattern;
break;
case 119:
this.$ = "length" // t: 1literalLength;
break;
case 120:
this.$ = "minlength" // t: 1literalMinlength;
break;
case 121:
this.$ = "maxlength" // t: 1literalMaxlength;
break;
case 122:
this.$ = keyValObject($$[$0-1], $$[$0]) // t: 1literalMininclusive;
break;
case 123:
this.$ = keyValObject($$[$0-1], parseInt($$[$0], 10)) // t: 1literalTotaldigits;
break;
case 124:
this.$ = parseInt($$[$0], 10);;
break;
case 125: case 126:
this.$ = parseFloat($$[$0]);;
break;
case 127:

        if ($$[$0] === XSD_DECIMAL || $$[$0] === XSD_FLOAT || $$[$0] === XSD_DOUBLE)
          this.$ = parseFloat($$[$0-2].value);
        else if (numericDatatypes.indexOf($$[$0]) !== -1)
          this.$ = parseInt($$[$0-2].value)
        else
          error("Parse error: numeric range facet expected numeric datatype instead of " + $$[$0]);
      
break;
case 128:
this.$ = "mininclusive" // t: 1literalMininclusive;
break;
case 129:
this.$ = "minexclusive" // t: 1literalMinexclusive;
break;
case 130:
this.$ = "maxinclusive" // t: 1literalMaxinclusive;
break;
case 131:
this.$ = "maxexclusive" // t: 1literalMaxexclusive;
break;
case 132:
this.$ = "totaldigits" // t: 1literalTotaldigits;
break;
case 133:
this.$ = "fractiondigits" // t: 1literalFractiondigits;
break;
case 134:
 // t: 1dotInherit3
        var exprObj = $$[$0-3] ? { expression: $$[$0-3] } : EmptyObject; // t: 0, 0Inherit1
        this.$ = (exprObj === EmptyObject && $$[$0-5] === EmptyObject) ?
	  EmptyShape :
	  extend({ type: "Shape" }, exprObj, $$[$0-5]);
        if ($$[$0-1].length) { this.$.annotations = $$[$0-1]; } // t: !! look to open3groupdotcloseAnnot3, open3groupdotclosecard23Annot3Code2
        if ($$[$0]) { this.$.semActs = $$[$0].semActs; } // t: !! look to open3groupdotcloseCode1, !open1dotOr1dot
      
break;
case 135:
this.$ = [ "inherit", $$[$0] ] // t: 1dotInherit1;
break;
case 136:
this.$ = [ "extra", $$[$0] ] // t: 1dotExtra1, 3groupdot3Extra, 3groupdotExtra3;
break;
case 137:
this.$ = [ "closed", true ] // t: 1dotClosed;
break;
case 138:
this.$ = EmptyObject;
break;
case 139:

      if ($$[$0-1] === EmptyObject)
	$$[$0-1] = {};
      if ($$[$0][0] === "closed")
        $$[$0-1]["closed"] = true; // t: 1dotClosed
      else if ($$[$0][0] in $$[$0-1])
        $$[$0-1][$$[$0][0]] = unionAll($$[$0-1][$$[$0][0]], $$[$0][1]); // t: 1dotInherit3, 3groupdot3Extra, 3groupdotExtra3
      else
        $$[$0-1][$$[$0][0]] = $$[$0][1]; // t: 1dotInherit1
      this.$ = $$[$0-1];
    
break;
case 142:
this.$ = [] // t: 1dot, 1dotAnnot3;
break;
case 143:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1dotAnnot3;
break;
case 144:
 // t: 1dotInherit3
        var exprObj = $$[$0-1] ? { expression: $$[$0-1] } : EmptyObject; // t: 0, 0Inherit1
        this.$ = (exprObj === EmptyObject && $$[$0-3] === EmptyObject) ?
	  EmptyShape :
	  extend({ type: "Shape" }, exprObj, $$[$0-3]);
      
break;
case 145:
this.$ = $$[$0] // t: 1dotExtra1, 3groupdot3Extra;
break;
case 146:
this.$ = [$$[$0]] // t: 1dotExtra1, 3groupdot3Extra, 3groupdotExtra3;
break;
case 147:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 3groupdotExtra3;
break;
case 151:
this.$ = { type: "OneOf", expressions: unionAll([$$[$0-1]], $$[$0]) } // t: 2oneOfdot;
break;
case 152:
this.$ = $$[$0] // t: 2oneOfdot;
break;
case 153:
this.$ = [$$[$0]] // t: 2oneOfdot;
break;
case 154:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 2oneOfdot;
break;
case 157:
this.$ = $$[$0] ? { type: "EachOf", expressions: unionAll([$$[$0-1]], $$[$0]) } : $$[$0-1] // t: 2groupOfdot;
break;
case 165:
this.$ = { type: "EachOf", expressions: unionAll([$$[$0-2]], $$[$0-1]) } // t: 2groupOfdot;
break;
case 166: case 167:
this.$ = $$[$0] // t: 2groupOfdot;
break;
case 168:
this.$ = [$$[$0]] // t: 2groupOfdot;
break;
case 169:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 2groupOfdot;
break;
case 170: case 172:

        this.$ = extend({ id: $$[$0-1] }, $$[$0]);
        addProduction($$[$0-1],  this.$);
      
break;
case 176:

        // t: open1dotOr1dot, !openopen1dotcloseCode1closeCode2
        this.$ = $$[$0-4];
        // Copy all of the new attributes into the encapsulated shape.
        if ("min" in $$[$0-2]) { this.$.min = $$[$0-2].min; } // t: open3groupdotclosecard23Annot3Code2
        if ("max" in $$[$0-2]) { this.$.max = $$[$0-2].max; } // t: open3groupdotclosecard23Annot3Code2
        if ($$[$0-1].length) { this.$.annotations = $$[$0-1]; } // t: open3groupdotcloseAnnot3, open3groupdotclosecard23Annot3Code2
        if ($$[$0]) { this.$.semActs = "semActs" in $$[$0-4] ? $$[$0-4].semActs.concat($$[$0].semActs) : $$[$0].semActs; } // t: open3groupdotcloseCode1, !open1dotOr1dot
      
break;
case 177:
this.$ = {} // t: 1dot;
break;
case 179:

        // $$[$0]: t: 1dotCode1
	if ($$[$0-3] !== EmptyShape && false) {
	  var t = blank();
	  addShape(t, $$[$0-3]);
	  $$[$0-3] = { type: "ShapeRef", reference: t };
	}
        this.$ = extend({ type: "TripleConstraint", predicate: $$[$0-4]}, ($$[$0-3] === EmptyShape ? {} : { valueExpr: $$[$0-3] }), $$[$0-2], $$[$0]); // t: 1dot
        if ($$[$0-1].length)
          this.$["annotations"] = $$[$0-1]; // t: 1dotAnnot3
      
break;
case 180:

        // %6: t: 1inversedotCode1
        this.$ = extend({ type: "TripleConstraint" }, $$[$0-5], { predicate: $$[$0-4] }, ($$[$0-3] === EmptyShape ? {} : { valueExpr: $$[$0-3] }), $$[$0-2], $$[$0]); // t: 1inversedot
        if ($$[$0-1].length)
          this.$["annotations"] = $$[$0-1]; // t: 1inversedotAnnot3
      
break;
case 181:
this.$ = { min:0, max:UNBOUNDED } // t: 1cardStar;
break;
case 182:
this.$ = { min:1, max:UNBOUNDED } // t: 1cardPlus;
break;
case 183:
this.$ = { min:0, max:1 } // t: 1cardOpt;
break;
case 184:

        $$[$0] = $$[$0].substr(1, $$[$0].length-2);
        var nums = $$[$0].match(/(\d+)/g);
        this.$ = { min: parseInt(nums[0], 10) }; // t: 1card2blank, 1card2Star
        if (nums.length === 2)
            this.$["max"] = parseInt(nums[1], 10); // t: 1card23
        else if ($$[$0].indexOf(',') === -1) // t: 1card2
            this.$["max"] = parseInt(nums[0], 10);
        else
            this.$["max"] = UNBOUNDED;
      
break;
case 185:
this.$ = { inverse: true } // t: 1inversedot;
break;
case 186:
this.$ = $$[$0-1] // t: 1val1IRIREF;
break;
case 187:
this.$ = [] // t: 1val1IRIREF;
break;
case 188:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1val1IRIREF;
break;
case 190:
this.$ = Parser._termResolver.resolve($$[$0], Parser._prefixes);
break;
case 193:
this.$ = { type: "IriStemRange", stem: { type: "Wildcard" }, exclusions: $$[$0] } // t:1val1dotMinusiri3, 1val1dotMinusiriStem3;
break;
case 194:
this.$ = { type: "LiteralStemRange", stem: { type: "Wildcard" }, exclusions: $$[$0] } // t:1val1dotMinusliteral3, 1val1dotMinusliteralStem3;
break;
case 195:
this.$ = { type: "LanguageStemRange", stem: { type: "Wildcard" }, exclusions: $$[$0] } // t:1val1dotMinuslanguage3, 1val1dotMinuslanguageStem3;
break;
case 196:

        if ($$[$0]) {
          this.$ = {  // t: 1val1iriStem, 1val1iriStemMinusiri3
            type: $$[$0].length ? "IriStemRange" : "IriStem",
            stem: $$[$0-1]
          };
          if ($$[$0].length)
            this.$["exclusions"] = $$[$0]; // t: 1val1iriStemMinusiri3
        } else {
          this.$ = $$[$0-1]; // t: 1val1IRIREF, 1AvalA
        }
      
break;
case 197:
this.$ = [] // t: 1val1iriStem, 1val1iriStemMinusiri3;
break;
case 198:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1val1iriStemMinusiri3;
break;
case 199: case 204:
this.$ = $$[$0] // t: 1val1iriStemMinusiri3;
break;
case 202:
this.$ = [$$[$0]] // t:1val1dotMinusiri3, 1val1dotMinusiriStem3;
break;
case 203:
this.$ = appendTo($$[$0-1], $$[$0]) // t:1val1dotMinusiri3, 1val1dotMinusiriStem3;
break;
case 205:
this.$ = { type: "IriStem", stem: $$[$0-1] } // t: 1val1iriStemMinusiriStem3;
break;
case 206:

        if ($$[$0]) {
          this.$ = {  // t: 1val1literalStemMinusliteralStem3, 1val1literalStem
            type: $$[$0].length ? "LiteralStemRange" : "LiteralStem",
            stem: $$[$0-1].value
          };
          if ($$[$0].length)
            this.$["exclusions"] = $$[$0]; // t: 1val1literalStemMinusliteral3
        } else {
          this.$ = $$[$0-1]; // t: 1val1LITERAL
        }
      
break;
case 207:
this.$ = [] // t: 1val1literalStem, 1val1literalStemMinusliteral3;
break;
case 208:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1val1literalStemMinusliteral3;
break;
case 209:
this.$ = $$[$0] // t: 1val1literalStemMinusliteral3;
break;
case 212:
this.$ = [$$[$0]] // t:1val1dotMinusliteral3, 1val1dotMinusliteralStem3;
break;
case 213:
this.$ = appendTo($$[$0-1], $$[$0]) // t:1val1dotMinusliteral3, 1val1dotMinusliteralStem3;
break;
case 214:
this.$ = $$[$0].value // t: 1val1literalStemMinusliteral3;
break;
case 215:
this.$ = { type: "LiteralStem", stem: $$[$0-1].value } // t: 1val1literalStemMinusliteralStem3;
break;
case 216:

        if ($$[$0]) {
          this.$ = {  // t: 1val1languageStemMinuslanguage3 1val1languageStemMinuslanguageStem3 : 1val1languageStem
            type: $$[$0].length ? "LanguageStemRange" : "LanguageStem",
            stem: $$[$0-1]
          };
          if ($$[$0].length)
            this.$["exclusions"] = $$[$0]; // t: 1val1languageStemMinuslanguage3, 1val1languageStemMinuslanguageStem3
        } else {
          this.$ = { type: "Language", languageTag: $$[$0-1] }; // t: 1val1language
        }
      
break;
case 217:
this.$ = [] // t: 1val1languageStem, 1val1languageStemMinuslanguage3;
break;
case 218:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1val1languageStemMinuslanguage3;
break;
case 219: case 224:
this.$ = $$[$0] // t: 1val1languageStemMinuslanguage3;
break;
case 222:
this.$ = [$$[$0]] // t:1val1dotMinuslanguage3, 1val1dotMinuslanguageStem3;
break;
case 223:
this.$ = appendTo($$[$0-1], $$[$0]) // t:1val1dotMinuslanguage3, 1val1dotMinuslanguageStem3;
break;
case 225:
this.$ = { type: "LanguageStem", stem: $$[$0-1] } // t: 1val1languageStemMinuslanguageStem3;
break;
case 226:
this.$ = $$[$0].substr(1);
break;
case 227:
this.$ = { type: "Inclusion", "include": $$[$0] } // t: 2groupInclude1;
break;
case 228:
this.$ = { type: "Annotation", predicate: $$[$0-1], object: $$[$0] } // t: 1dotAnnotIRIREF;
break;
case 231:
this.$ = $$[$0].length ? { semActs: $$[$0] } : null; // t: 1dotCode1/2oneOfDot;
break;
case 232:
this.$ = [] // t: 1dot, 1dotCode1;
break;
case 233:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1dotCode1;
break;
case 234:
this.$ = unescapeSemanticAction($$[$0-1], $$[$0]) // t: 1dotCode1;
break;
case 235:
this.$ = { type: "SemAct", name: $$[$0-1] } // t: 1dotNoCode1;
break;
case 237:
this.$ = $$[$0] ? extend($$[$0-1], { type: $$[$0] }) : $$[$0-1]; // t: 1val1Datatype;
break;
case 239:
this.$ = { value: "true", type: XSD_BOOLEAN } // t: 1val1true;
break;
case 240:
this.$ = { value: "false", type: XSD_BOOLEAN } // t: 1val1false;
break;
case 244:
this.$ = RDF_TYPE // t: 1AvalA;
break;
case 250:
this.$ = createLiteral($$[$0], XSD_INTEGER) // t: 1val1INTEGER;
break;
case 251:
this.$ = createLiteral($$[$0], XSD_DECIMAL) // t: 1val1DECIMAL;
break;
case 252:
this.$ = createLiteral($$[$0], XSD_DOUBLE) // t: 1val1DOUBLE;
break;
case 253:
 // t: 1dot
        var unesc = ShExUtil.unescapeText($$[$0].slice(1,-1), {});
        this.$ = Parser._base === null || absoluteIRI.test($$[$0].slice(1, -1)) ? unesc : _resolveIRI(unesc)
      
break;
case 254: case 257:
 // t:1dotPNex, 1dotPNdefault, ShExParser-test.js/with pre-defined prefixes
        var namePos = $$[$0].indexOf(':');
        this.$ = expandPrefix($$[$0].substr(0, namePos)) + $$[$0].substr(namePos + 1);
    
break;
case 255: case 258:
 // t: 1dotNS2, 1dotNSdefault, ShExParser-test.js/PNAME_NS with pre-defined prefixes
        this.$ = expandPrefix($$[$0].substr(0, $$[$0].length - 1));
    
break;
case 256:
this.$ = this._base === null || absoluteIRI.test($$[$0].slice(1, -1)) ? ShExUtil.unescapeText($$[$0].slice(1,-1), {}) : _resolveIRI(ShExUtil.unescapeText($$[$0].slice(1,-1), {})) // t: 1dot;
break;
case 259:

        this.$ = Parser._termResolver.resolve($$[$0], Parser._prefixes);
    
break;
case 261:
this.$ = $$[$0] // t: 1dotInherit1, 1dot3Inherit, 1dotInherit3;
break;
case 262:
this.$ = [$$[$0]] // t: 1dotInherit1, 1dot3Inherit, 1dotInherit3;
break;
case 263:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1dotInherit3;
break;
}
},
table: [o($V0,[2,2],{3:1,4:2}),{1:[3]},o($V0,[2,3],{5:3}),{6:4,7:[2,10],8:5,9:11,10:16,11:17,14:6,15:7,16:8,17:9,18:10,19:$V1,20:$V2,21:$V3,22:$V4,23:$V5,24:$V6,27:24,30:18,31:19,32:$V7,35:20,36:23,37:22,187:$V8,195:25,196:$V9,197:$Va},{7:[1,31]},o($V0,[2,4]),{7:[2,11]},o($V0,[2,12]),o($V0,[2,13]),o($V0,[2,14]),o($V0,[2,15]),o($Vb,[2,7],{12:32}),{20:[1,33]},{22:[1,34]},{20:[1,35]},{20:$V2,22:$V4,25:36,27:37,28:[1,38],196:$V9},o($Vb,[2,5]),o($Vb,[2,6]),o($Vb,[2,24]),o($Vb,[2,25]),o($Vb,[2,27],{36:39,187:$V8}),{33:[1,40]},o($Vc,$Vd,{38:41,39:42,41:44,45:46,40:[1,43],44:$Ve,76:$Vf,77:$Vg,78:$Vh}),o($V0,[2,28]),o($Vi,[2,246]),o($Vi,[2,247]),{20:$V2,22:$V4,27:50,196:$V9},o($Vj,[2,253]),o($Vj,[2,254]),o($Vj,[2,255]),o([7,19,20,21,22,23,24,28,32,40,44,52,55,69,70,71,76,77,78,79,90,91,92,95,96,97,98,106,107,108,109,110,111,113,115,121,124,132,137,138,151,152,153,154,155,159,182,183,187,194,196,197],[2,260]),{1:[2,1]},{7:[2,9],8:52,10:53,13:51,15:7,16:8,17:9,18:10,19:$V1,20:$V2,21:$V3,22:$V4,23:$V5,24:$V6,27:24,30:18,31:19,32:$V7,37:22,195:25,196:$V9,197:$Va},o($V0,[2,16]),{20:[1,54]},o($V0,[2,18]),o($V0,[2,19]),o($V0,[2,22]),o($Vk,[2,20],{26:55}),o($V0,[2,29]),o($Vl,$Vm,{34:56,47:57,57:58,61:59,65:60,66:62,68:63,74:64,85:67,86:68,81:70,82:71,83:72,75:73,45:74,89:78,185:79,87:81,112:82,93:83,99:89,101:90,20:$Vn,22:$Vo,28:$Vp,44:$Vq,69:$Vr,71:$Vs,76:$Vf,77:$Vg,78:$Vh,79:$Vt,90:$Vu,91:$Vv,92:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,106:$VB,107:$VC,108:$VD,109:$VE,110:$VF,111:$VG,159:$VH,196:$VI}),o($Vb,[2,32]),o($Vb,[2,33]),o($Vb,[2,34]),o($Vl,$Vm,{85:67,86:68,81:70,82:71,83:72,89:78,185:79,87:81,93:83,99:89,101:90,42:100,66:101,68:102,73:103,112:106,20:$Vn,22:$Vo,28:$Vp,69:[1,104],71:[1,105],79:$Vt,90:$Vu,91:$Vv,92:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,106:$VB,107:$VC,108:$VD,109:$VE,110:$VF,111:$VG,159:$VH,196:$VI}),o($Vc,[2,39],{45:107,76:$Vf,77:$Vg,78:$Vh}),{46:108,48:109,49:110,51:111,52:$VJ,54:112,55:$VK},o($VL,[2,94]),o($VL,[2,95]),{20:$V2,22:$V4,27:24,37:115,195:25,196:$V9,197:$Va},{187:[1,117],188:[1,116]},o($Vb,[2,8]),o($Vb,[2,30]),o($Vb,[2,31]),o($V0,[2,17]),{20:$V2,22:$V4,27:119,29:[1,118],196:$V9},o($Vb,[2,26]),o($VM,[2,42]),o($VN,[2,55],{58:120}),o($VO,[2,62],{62:121}),o($VO,[2,66]),o($Vl,$Vm,{66:62,68:63,74:64,85:67,86:68,81:70,82:71,83:72,75:73,45:74,89:78,185:79,87:81,112:82,93:83,99:89,101:90,65:122,20:$Vn,22:$Vo,28:$Vp,69:$Vr,71:$Vs,76:$Vf,77:$Vg,78:$Vh,79:$Vt,90:$Vu,91:$Vv,92:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,106:$VB,107:$VC,108:$VD,109:$VE,110:$VF,111:$VG,159:$VH,196:$VI}),o($VO,[2,84],{75:73,45:74,112:82,74:123,76:$Vf,77:$Vg,78:$Vh,113:$Vm,121:$Vm,124:$Vm,182:$Vm}),o($VO,[2,86]),o($VO,[2,75],{85:67,86:68,89:78,93:83,72:124,66:125,90:$Vu,91:$Vv,92:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA}),o($Vc,$Vd,{41:44,45:46,39:126,44:$Ve,76:$Vf,77:$Vg,78:$Vh}),o($VO,[2,89]),o($VP,[2,103],{89:78,93:83,86:127,95:$Vx,96:$Vy,97:$Vz,98:$VA}),o($VP,[2,105],{93:83,89:128,95:$Vx,96:$Vy,97:$Vz,98:$VA}),o($VQ,$VR,{80:129}),o($VQ,$VR,{80:130}),o($VQ,$VR,{80:131}),o($VO,[2,100],{99:89,101:90,87:132,106:$VB,107:$VC,108:$VD,109:$VE,110:$VF,111:$VG}),o($VL,[2,92]),o($VL,[2,93]),o($VS,[2,112]),o($VS,[2,113]),o($VS,[2,114]),o($VS,[2,110]),o([7,19,20,21,22,23,24,29,32,52,55,70,71,90,91,92,94,95,96,97,98,102,103,104,106,107,108,109,110,111,115,132,137,138,151,152,153,154,159,169,170,181,183,187,189,192,193,196,197],[2,245]),o($VT,[2,187],{156:133}),o($VU,[2,106]),{113:[1,134],118:135,119:136,120:137,121:$VV,124:$VW,182:$VX},{94:[1,141]},o($VY,[2,118]),o($VZ,[2,256]),o($VZ,[2,257]),o($VZ,[2,258]),o($VZ,[2,259]),{94:[1,143],100:142,102:[1,144],103:[1,145],104:[1,146]},{94:[1,147]},{94:[2,119]},{94:[2,120]},{94:[2,121]},o($V_,[2,128]),o($V_,[2,129]),o($V_,[2,130]),o($V_,[2,131]),{94:[2,132]},{94:[2,133]},o($V$,$V01,{48:109,49:110,51:111,54:112,43:148,46:149,52:$VJ,55:$VK}),o($V11,[2,77],{112:106,67:150,73:151,45:152,76:$Vf,77:$Vg,78:$Vh,113:$Vm,121:$Vm,124:$Vm,182:$Vm}),o($V11,[2,79]),o($V11,[2,80],{85:67,86:68,89:78,93:83,66:153,90:$Vu,91:$Vv,92:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA}),o($Vc,$Vd,{41:44,45:46,39:154,44:$Ve,76:$Vf,77:$Vg,78:$Vh}),o($V11,[2,83]),{113:[1,155],118:135,119:136,120:137,121:$VV,124:$VW,182:$VX},o($V$,$V01,{48:109,49:110,51:111,54:112,46:149,43:156,52:$VJ,55:$VK}),o($V$,[2,37]),o($V$,[2,43],{51:157,52:$VJ}),o($V21,[2,51],{50:158,54:159,55:$VK}),o($V21,[2,46]),o($V11,[2,49]),o($Vl,$Vm,{85:67,86:68,81:70,82:71,83:72,89:78,185:79,87:81,93:83,99:89,101:90,112:106,73:151,45:152,53:160,56:161,64:162,66:164,68:165,67:166,20:$Vn,22:$Vo,28:$Vp,44:$V31,69:$V41,71:$V51,76:$Vf,77:$Vg,78:$Vh,79:$Vt,90:$Vu,91:$Vv,92:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,106:$VB,107:$VC,108:$VD,109:$VE,110:$VF,111:$VG,159:$VH,196:$VI}),o($Vl,$Vm,{85:67,86:68,81:70,82:71,83:72,89:78,185:79,87:81,93:83,99:89,101:90,112:106,73:151,45:152,64:162,66:164,68:165,67:166,56:169,20:$Vn,22:$Vo,28:$Vp,44:$V31,69:$V41,71:$V51,76:$Vf,77:$Vg,78:$Vh,79:$Vt,90:$Vu,91:$Vv,92:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,106:$VB,107:$VC,108:$VD,109:$VE,110:$VF,111:$VG,159:$VH,196:$VI}),o($VL,[2,96]),o($V61,[2,234]),o($V61,[2,235]),o($V0,[2,23]),o($Vk,[2,21]),o($VM,[2,53],{59:170,52:[1,171]}),o($VN,[2,60],{63:172,55:[1,173]}),o($VO,[2,67]),o($VO,[2,85]),o($VO,[2,87]),o($VO,[2,76]),{70:[1,174]},o($VP,[2,104],{93:83,89:128,95:$Vx,96:$Vy,97:$Vz,98:$VA}),o($VS,[2,111]),o($VO,[2,97],{93:83,99:89,101:90,84:175,89:176,87:177,95:$Vx,96:$Vy,97:$Vz,98:$VA,106:$VB,107:$VC,108:$VD,109:$VE,110:$VF,111:$VG}),o($VO,[2,98],{93:83,99:89,101:90,84:175,89:176,87:177,95:$Vx,96:$Vy,97:$Vz,98:$VA,106:$VB,107:$VC,108:$VD,109:$VE,110:$VF,111:$VG}),o($VO,[2,99],{93:83,99:89,101:90,84:175,89:176,87:177,95:$Vx,96:$Vy,97:$Vz,98:$VA,106:$VB,107:$VC,108:$VD,109:$VE,110:$VF,111:$VG}),o($VU,[2,107]),{20:$V2,22:$V4,27:185,29:[1,178],71:[1,184],94:$V71,102:$V81,103:$V91,104:$Va1,157:179,158:180,159:[1,181],160:182,161:183,171:186,176:187,181:$Vb1,189:$Vc1,191:190,192:$Vd1,193:$Ve1,196:$V9},{20:$Vn,22:$Vo,69:$Vf1,114:197,115:$Vg1,122:198,126:208,127:199,128:200,129:201,135:202,142:$Vh1,144:204,145:205,146:$Vi1,147:207,150:209,155:$Vj1,159:$VH,182:$Vk1,185:212,194:$Vl1,196:$VI},o($Vl,[2,139]),o($Vl,[2,135]),o($Vl,[2,136]),o($Vl,[2,137]),{20:$V2,22:$V4,27:24,37:216,195:25,196:$V9,197:$Va,198:215},{20:$Vn,22:$Vo,125:217,126:218,159:$VH,185:212,194:$Vl1,196:$VI},o($VY,[2,117]),o($VQ,[2,122]),o($VQ,[2,124]),o($VQ,[2,125]),o($VQ,[2,126]),{105:[1,219]},o($VQ,[2,123]),o($V$,[2,35]),o($V$,[2,41]),o($V11,[2,78]),o($Vm1,[2,90]),o($Vm1,[2,91]),o($V11,[2,81]),{70:[1,220]},{20:$Vn,22:$Vo,69:$Vf1,114:221,115:$Vg1,122:198,126:208,127:199,128:200,129:201,135:202,142:$Vh1,144:204,145:205,146:$Vi1,147:207,150:209,155:$Vj1,159:$VH,182:$Vk1,185:212,194:$Vl1,196:$VI},o($V$,[2,36]),o($V21,[2,47]),o($V$,[2,44],{51:222,52:$VJ}),o($V11,[2,50]),o($V21,[2,45]),o($V11,[2,58],{60:223}),o($V11,[2,64]),o($Vl,$Vm,{85:67,86:68,81:70,82:71,83:72,89:78,185:79,87:81,93:83,99:89,101:90,112:106,73:151,45:152,66:164,68:165,67:166,64:224,20:$Vn,22:$Vo,28:$Vp,69:$V41,71:$V51,76:$Vf,77:$Vg,78:$Vh,79:$Vt,90:$Vu,91:$Vv,92:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,106:$VB,107:$VC,108:$VD,109:$VE,110:$VF,111:$VG,159:$VH,196:$VI}),o($V11,[2,68],{112:106,73:151,45:152,67:225,76:$Vf,77:$Vg,78:$Vh,113:$Vm,121:$Vm,124:$Vm,182:$Vm}),o($V11,[2,70]),o($V11,[2,71],{85:67,86:68,89:78,93:83,66:226,90:$Vu,91:$Vv,92:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA}),o($Vc,$Vd,{41:44,45:46,39:227,44:$Ve,76:$Vf,77:$Vg,78:$Vh}),o($V11,[2,74]),o($V11,[2,48]),o($VN,[2,56]),o($Vl,$Vm,{61:59,65:60,66:62,68:63,74:64,85:67,86:68,81:70,82:71,83:72,75:73,45:74,89:78,185:79,87:81,112:82,93:83,99:89,101:90,57:228,20:$Vn,22:$Vo,28:$Vp,44:$Vq,69:$Vr,71:$Vs,76:$Vf,77:$Vg,78:$Vh,79:$Vt,90:$Vu,91:$Vv,92:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,106:$VB,107:$VC,108:$VD,109:$VE,110:$VF,111:$VG,159:$VH,196:$VI}),o($VO,[2,63]),o($Vl,$Vm,{65:60,66:62,68:63,74:64,85:67,86:68,81:70,82:71,83:72,75:73,45:74,89:78,185:79,87:81,112:82,93:83,99:89,101:90,61:229,20:$Vn,22:$Vo,28:$Vp,44:$Vq,69:$Vr,71:$Vs,76:$Vf,77:$Vg,78:$Vh,79:$Vt,90:$Vu,91:$Vv,92:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,106:$VB,107:$VC,108:$VD,109:$VE,110:$VF,111:$VG,159:$VH,196:$VI}),o($VO,[2,88]),o($VQ,[2,102]),o($VQ,[2,115]),o($VQ,[2,116]),o($VQ,[2,186]),o($VT,[2,188]),o($VT,[2,189]),o($VT,[2,190]),o($VT,[2,191]),o($VT,[2,192]),{162:230,163:231,164:232,167:233,170:[1,236],174:234,179:235},o($VT,[2,200],{165:237,168:238,169:[1,239]}),o($VT,[2,210],{172:240,175:241,169:[1,242]}),o($VT,[2,220],{177:243,180:244,169:[1,245]}),o($Vn1,[2,236]),o($Vn1,[2,241],{190:246,105:[1,247]}),o($Vn1,[2,238]),o($Vn1,[2,239]),o($Vn1,[2,240]),o([20,22,29,71,94,102,103,104,159,169,170,181,189,192,193,196],[2,226]),o($Vn1,[2,250]),o($Vn1,[2,251]),o($Vn1,[2,252]),{115:[1,248]},{115:[2,141]},{115:[2,148]},{115:[2,149],130:249,131:250,132:$Vo1},{115:[2,150]},o($Vp1,$Vq1,{136:252,139:255,141:256,137:$Vr1,138:$Vs1}),{20:$V2,22:$V4,27:258,143:257,195:259,196:$V9,197:$Va},o($Vt1,[2,171]),o($Vt1,[2,173]),o($Vt1,[2,174]),o($Vt1,[2,175]),o($Vl,$Vm,{47:57,57:58,61:59,65:60,66:62,68:63,74:64,85:67,86:68,81:70,82:71,83:72,75:73,45:74,89:78,185:79,87:81,112:82,93:83,99:89,101:90,34:260,20:$Vn,22:$Vo,28:$Vp,44:$Vq,69:$Vr,71:$Vs,76:$Vf,77:$Vg,78:$Vh,79:$Vt,90:$Vu,91:$Vv,92:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,106:$VB,107:$VC,108:$VD,109:$VE,110:$VF,111:$VG,159:$VH,196:$VI}),{20:$Vn,22:$Vo,126:261,159:$VH,185:212,194:$Vl1,196:$VI},{20:$Vn,22:$Vo,69:$Vf1,126:208,128:266,129:264,133:262,134:263,135:265,142:$Vh1,144:204,145:205,146:$Vi1,147:207,150:209,155:$Vj1,159:$VH,182:$Vk1,185:212,194:$Vl1,196:$VI},{20:$V2,22:$V4,27:258,143:267,195:259,196:$V9,197:$Va},o($Vu1,[2,243]),o($Vu1,[2,244]),o([20,22,159,194,196],[2,185]),o($Vl,[2,261],{27:24,195:25,37:268,20:$V2,22:$V4,196:$V9,197:$Va}),o($Vv1,[2,262]),o($Vl,[2,145],{185:212,126:269,20:$Vn,22:$Vo,159:$VH,194:$Vl1,196:$VI}),o($Vw1,[2,146]),{20:$Vn,22:$Vo,81:270,159:$VH,185:79,196:$VI},o($V11,[2,82]),{115:[1,271]},o($V21,[2,52]),o($V21,[2,57],{54:272,55:$VK}),o($V11,[2,65]),o($V11,[2,69]),o($V11,[2,72]),{70:[1,273]},o($VN,[2,54]),o($VO,[2,61]),o($VT,[2,193],{167:274,170:$Vx1}),o($VT,[2,194],{174:276,170:$Vy1}),o($VT,[2,195],{179:278,170:$Vz1}),o($VA1,[2,202]),o($VA1,[2,212]),o($VA1,[2,222]),{20:$V2,22:$V4,27:280,94:$V71,102:$V81,103:$V91,104:$Va1,171:281,176:282,181:$Vb1,189:$Vc1,191:190,192:$Vd1,193:$Ve1,196:$V9},o($VT,[2,196]),o($VT,[2,201]),o($VA1,[2,197],{166:283}),o($VT,[2,206]),o($VT,[2,211]),o($VA1,[2,207],{173:284}),o($VT,[2,216]),o($VT,[2,221]),o($VA1,[2,217],{178:285}),o($Vn1,[2,237]),{20:$Vn,22:$Vo,81:286,159:$VH,185:79,196:$VI},o($VL,[2,144]),o([70,115],[2,151],{131:287,132:$Vo1}),o($Vp1,[2,153]),{20:$Vn,22:$Vo,69:$Vf1,126:208,128:288,135:202,142:$Vh1,144:204,145:205,146:$Vi1,147:207,150:209,155:$Vj1,159:$VH,182:$Vk1,185:212,194:$Vl1,196:$VI},o($Vp1,[2,157]),o($Vp1,[2,159],{144:204,145:205,147:207,126:208,150:209,185:212,135:289,20:$Vn,22:$Vo,69:$Vf1,142:$Vh1,146:$Vi1,155:$Vj1,159:$VH,182:$Vk1,194:$Vl1,196:$VI}),o($Vp1,[2,160],{144:204,145:205,147:207,126:208,150:209,185:212,135:290,20:$Vn,22:$Vo,69:$Vf1,142:$Vh1,146:$Vi1,155:$Vj1,159:$VH,182:$Vk1,194:$Vl1,196:$VI}),o($Vp1,$VB1,{140:291,141:292,137:$VC1,138:$VD1}),o($Vt1,[2,168]),{20:$Vn,22:$Vo,69:$Vf1,126:208,144:295,145:296,150:209,155:$Vj1,159:$VH,185:212,194:$Vl1,196:$VI},o($VE1,[2,248]),o($VE1,[2,249]),o($VF1,$VG1,{148:297,149:298,151:$VH1,152:$VI1,153:$VJ1,154:$VK1}),o($Vl,$Vm,{47:57,57:58,61:59,65:60,66:62,68:63,74:64,85:67,86:68,81:70,82:71,83:72,75:73,45:74,89:78,185:79,87:81,112:82,93:83,99:89,101:90,34:303,20:$Vn,22:$Vo,28:$Vp,44:$Vq,69:$Vr,71:$Vs,76:$Vf,77:$Vg,78:$Vh,79:$Vt,90:$Vu,91:$Vv,92:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,106:$VB,107:$VC,108:$VD,109:$VE,110:$VF,111:$VG,159:$VH,196:$VI}),{70:[1,304]},{70:[2,155]},{70:[2,156]},{132:$Vq1,136:252,137:$Vr1,138:$Vs1,139:305,141:256},{130:249,131:250,132:$Vo1},o($Vt1,[2,227]),o($Vv1,[2,263]),o($Vw1,[2,147]),o($VQ,[2,127]),o([7,19,20,21,22,23,24,32,52,55,70,90,91,92,95,96,97,98,183,187,196,197],$VL1,{116:306}),o($V11,[2,59]),o($V11,[2,73]),o($VA1,[2,203]),{20:$V2,22:$V4,27:280,196:$V9},o($VA1,[2,213]),{94:$V71,102:$V81,103:$V91,104:$Va1,171:281,189:$Vc1,191:190,192:$Vd1,193:$Ve1},o($VA1,[2,223]),{176:282,181:$Vb1},o($VA1,[2,204],{169:[1,307]}),o($VA1,[2,214],{169:[1,308]}),o($VA1,[2,224],{169:[1,309]}),o($VT,[2,199],{167:310,170:$Vx1}),o($VT,[2,209],{174:311,170:$Vy1}),o($VT,[2,219],{179:312,170:$Vz1}),o($Vn1,[2,242]),o($Vp1,[2,154]),o($Vp1,[2,152]),o($Vt1,[2,166]),o($Vt1,[2,167]),o($Vp1,$VM1),o($Vt1,[2,169]),o($Vp1,[2,163],{144:204,145:205,147:207,126:208,150:209,185:212,135:289,20:$Vn,22:$Vo,69:$Vf1,142:$Vh1,146:$Vi1,155:$Vj1,159:$VH,182:$Vk1,194:$Vl1,196:$VI}),o($Vp1,[2,164],{144:204,145:205,147:207,126:208,150:209,185:212,135:290,20:$Vn,22:$Vo,69:$Vf1,142:$Vh1,146:$Vi1,155:$Vj1,159:$VH,182:$Vk1,194:$Vl1,196:$VI}),o($Vt1,[2,170]),o($Vt1,[2,172]),o($VF1,$VL1,{116:313}),o($VF1,[2,178]),o($VF1,[2,181]),o($VF1,[2,182]),o($VF1,[2,183]),o($VF1,[2,184]),o($VF1,$VG1,{149:298,148:314,151:$VH1,152:$VI1,153:$VJ1,154:$VK1}),o($VF1,$VG1,{149:298,148:315,151:$VH1,152:$VI1,153:$VJ1,154:$VK1}),o([70,132],$VB1,{141:292,140:316,137:$VC1,138:$VD1}),o([7,19,20,21,22,23,24,32,52,55,70,90,91,92,95,96,97,98,187,196,197],$VN1,{117:317,123:318,186:319,183:$VO1}),o($VA1,[2,205]),o($VA1,[2,215]),o($VA1,[2,225]),o($VA1,[2,198]),o($VA1,[2,208]),o($VA1,[2,218]),o($VP1,$VN1,{123:318,186:319,117:321,183:$VO1}),o($VF1,$VL1,{116:322}),o($VF1,$VL1,{116:323}),{70:[2,165],132:$VM1},o($Vm1,[2,134]),o($VQ1,[2,143]),o([7,19,20,21,22,23,24,32,52,55,70,90,91,92,95,96,97,98,115,132,137,138,196,197],[2,231],{36:324,187:$V8}),{20:$Vn,22:$Vo,126:325,159:$VH,185:212,194:$Vl1,196:$VI},o($Vt1,[2,179]),o($VP1,$VN1,{123:318,186:319,117:326,183:$VO1}),o($VP1,$VN1,{123:318,186:319,117:327,183:$VO1}),o($V61,[2,233]),{20:$Vn,22:$Vo,94:$V71,102:$V81,103:$V91,104:$Va1,159:$VH,171:330,184:328,185:329,189:$Vc1,191:190,192:$Vd1,193:$Ve1,196:$VI},o($Vt1,[2,180]),o($Vt1,[2,176]),o($VQ1,[2,228]),o($VQ1,[2,229]),o($VQ1,[2,230])],
defaultActions: {6:[2,11],31:[2,1],91:[2,119],92:[2,120],93:[2,121],98:[2,132],99:[2,133],198:[2,141],199:[2,148],201:[2,150],263:[2,155],264:[2,156]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = new Error();

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  /*
    ShEx parser in the Jison parser generator format.
  */

  var UNBOUNDED = -1;

  var ShExUtil = require("./ShExUtil");

  // Common namespaces and entities
  var RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
      RDF_TYPE  = RDF + 'type',
      RDF_FIRST = RDF + 'first',
      RDF_REST  = RDF + 'rest',
      RDF_NIL   = RDF + 'nil',
      XSD = 'http://www.w3.org/2001/XMLSchema#',
      XSD_INTEGER  = XSD + 'integer',
      XSD_DECIMAL  = XSD + 'decimal',
      XSD_FLOAT   = XSD + 'float',
      XSD_DOUBLE   = XSD + 'double',
      XSD_BOOLEAN  = XSD + 'boolean',
      XSD_TRUE =  '"true"^^'  + XSD_BOOLEAN,
      XSD_FALSE = '"false"^^' + XSD_BOOLEAN,
      XSD_PATTERN        = XSD + 'pattern',
      XSD_MININCLUSIVE   = XSD + 'minInclusive',
      XSD_MINEXCLUSIVE   = XSD + 'minExclusive',
      XSD_MAXINCLUSIVE   = XSD + 'maxInclusive',
      XSD_MAXEXCLUSIVE   = XSD + 'maxExclusive',
      XSD_LENGTH         = XSD + 'length',
      XSD_MINLENGTH      = XSD + 'minLength',
      XSD_MAXLENGTH      = XSD + 'maxLength',
      XSD_TOTALDIGITS    = XSD + 'totalDigits',
      XSD_FRACTIONDIGITS = XSD + 'fractionDigits';

  var numericDatatypes = [
      XSD + "integer",
      XSD + "decimal",
      XSD + "float",
      XSD + "double",
      XSD + "string",
      XSD + "boolean",
      XSD + "dateTime",
      XSD + "nonPositiveInteger",
      XSD + "negativeInteger",
      XSD + "long",
      XSD + "int",
      XSD + "short",
      XSD + "byte",
      XSD + "nonNegativeInteger",
      XSD + "unsignedLong",
      XSD + "unsignedInt",
      XSD + "unsignedShort",
      XSD + "unsignedByte",
      XSD + "positiveInteger"
  ];

  var absoluteIRI = /^[a-z][a-z0-9+.-]*:/i,
    schemeAuthority = /^(?:([a-z][a-z0-9+.-]*:))?(?:\/\/[^\/]*)?/i,
    dotSegments = /(?:^|\/)\.\.?(?:$|[\/#?])/;

  var numericFacets = ["mininclusive", "minexclusive",
                       "maxinclusive", "maxexclusive"];

  // Returns a lowercase version of the given string
  function lowercase(string) {
    return string.toLowerCase();
  }

  // Appends the item to the array and returns the array
  function appendTo(array, item) {
    return array.push(item), array;
  }

  // Appends the items to the array and returns the array
  function appendAllTo(array, items) {
    return array.push.apply(array, items), array;
  }

  // Extends a base object with properties of other objects
  function extend(base) {
    if (!base) base = {};
    for (var i = 1, l = arguments.length, arg; i < l && (arg = arguments[i] || {}); i++)
      for (var name in arg)
        base[name] = arg[name];
    return base;
  }

  // Creates an array that contains all items of the given arrays
  function unionAll() {
    var union = [];
    for (var i = 0, l = arguments.length; i < l; i++)
      union = union.concat.apply(union, arguments[i]);
    return union;
  }

  // N3.js:lib/N3Parser.js<0.4.5>:58 with
  //   s/this\./Parser./g
  // ### `_setBase` sets the base IRI to resolve relative IRIs.
  Parser._setBase = function (baseIRI) {
    if (!baseIRI)
      baseIRI = null;

    // baseIRI '#' check disabled to allow -x 'data:text/shex,...#'
    // else if (baseIRI.indexOf('#') >= 0)
    //   throw new Error('Invalid base IRI ' + baseIRI);

    // Set base IRI and its components
    if (Parser._base = baseIRI) {
      Parser._basePath   = baseIRI.replace(/[^\/?]*(?:\?.*)?$/, '');
      baseIRI = baseIRI.match(schemeAuthority);
      Parser._baseRoot   = baseIRI[0];
      Parser._baseScheme = baseIRI[1];
    }
  }

  // N3.js:lib/N3Parser.js<0.4.5>:576 with
  //   s/this\./Parser./g
  //   s/token/iri/
  // ### `_resolveIRI` resolves a relative IRI token against the base path,
  // assuming that a base path has been set and that the IRI is indeed relative.
  function _resolveIRI (iri) {
    switch (iri[0]) {
    // An empty relative IRI indicates the base IRI
    case undefined: return Parser._base;
    // Resolve relative fragment IRIs against the base IRI
    case '#': return Parser._base + iri;
    // Resolve relative query string IRIs by replacing the query string
    case '?': return Parser._base.replace(/(?:\?.*)?$/, iri);
    // Resolve root-relative IRIs at the root of the base IRI
    case '/':
      // Resolve scheme-relative IRIs to the scheme
      return (iri[1] === '/' ? Parser._baseScheme : Parser._baseRoot) + _removeDotSegments(iri);
    // Resolve all other IRIs at the base IRI's path
    default: {
      return _removeDotSegments(Parser._basePath + iri);
    }
    }
  }

  // ### `_removeDotSegments` resolves './' and '../' path segments in an IRI as per RFC3986.
  function _removeDotSegments (iri) {
    // Don't modify the IRI if it does not contain any dot segments
    if (!dotSegments.test(iri))
      return iri;

    // Start with an imaginary slash before the IRI in order to resolve trailing './' and '../'
    var result = '', length = iri.length, i = -1, pathStart = -1, segmentStart = 0, next = '/';

    while (i < length) {
      switch (next) {
      // The path starts with the first slash after the authority
      case ':':
        if (pathStart < 0) {
          // Skip two slashes before the authority
          if (iri[++i] === '/' && iri[++i] === '/')
            // Skip to slash after the authority
            while ((pathStart = i + 1) < length && iri[pathStart] !== '/')
              i = pathStart;
        }
        break;
      // Don't modify a query string or fragment
      case '?':
      case '#':
        i = length;
        break;
      // Handle '/.' or '/..' path segments
      case '/':
        if (iri[i + 1] === '.') {
          next = iri[++i + 1];
          switch (next) {
          // Remove a '/.' segment
          case '/':
            result += iri.substring(segmentStart, i - 1);
            segmentStart = i + 1;
            break;
          // Remove a trailing '/.' segment
          case undefined:
          case '?':
          case '#':
            return result + iri.substring(segmentStart, i) + iri.substr(i + 1);
          // Remove a '/..' segment
          case '.':
            next = iri[++i + 1];
            if (next === undefined || next === '/' || next === '?' || next === '#') {
              result += iri.substring(segmentStart, i - 2);
              // Try to remove the parent path from result
              if ((segmentStart = result.lastIndexOf('/')) >= pathStart)
                result = result.substr(0, segmentStart);
              // Remove a trailing '/..' segment
              if (next !== '/')
                return result + '/' + iri.substr(i + 1);
              segmentStart = i + 1;
            }
          }
        }
      }
      next = iri[++i];
    }
    return result + iri.substring(segmentStart);
  }

  Parser._setTermResolver = function (res) {
    Parser._termResolver = res;
  }

  // Creates an expression with the given type and attributes
  function expression(expr, attr) {
    var expression = { expression: expr };
    if (attr)
      for (var a in attr)
        expression[a] = attr[a];
    return expression;
  }

  // Creates a path with the given type and items
  function path(type, items) {
    return { type: 'path', pathType: type, items: items };
  }

  // Creates a literal with the given value and type
  function createLiteral(value, type) {
    return { value: value, type: type };
  }

  // Creates a new blank node identifier
  function blank() {
    return '_:b' + blankId++;
  };
  var blankId = 0;
  Parser._resetBlanks = function () { blankId = 0; }
  Parser.reset = function () {
    Parser._prefixes = Parser._imports = Parser._termResolver = Parser.valueExprDefns = Parser.shapes = Parser.productions = Parser.start = Parser.startActs = null; // Reset state.
    Parser._base = Parser._baseIRI = Parser._baseIRIPath = Parser._baseIRIRoot = null;
  }
  var _fileName; // for debugging
  Parser._setFileName = function (fn) { _fileName = fn; }

  // Regular expression and replacement strings to escape strings
  var stringEscapeReplacements = { '\\': '\\', "'": "'", '"': '"',
                                   't': '\t', 'b': '\b', 'n': '\n', 'r': '\r', 'f': '\f' },
      semactEscapeReplacements = { '\\': '\\', '%': '%' };

  // Translates string escape codes in the string into their textual equivalent
  function unescapeString(string, trimLength) {
    string = string.substring(trimLength, string.length - trimLength);
    return { value: ShExUtil.unescapeText(string, stringEscapeReplacements) };
  }

  function unescapeLangString(string, trimLength) {
    var at = string.lastIndexOf("@");
    var lang = string.substr(at);
    string = string.substr(0, at);
    var u = unescapeString(string, trimLength);
    return extend(u, { language: lowercase(lang.substr(1)) });
  }

  // Translates regular expression escape codes in the string into their textual equivalent
  function unescapeRegexp (regexp) {
    var end = regexp.lastIndexOf("/");
    var s = regexp.substr(1, end-1);
    var regexpEscapeReplacements = {
      '.': "\\.", '\\': "\\\\", '?': "\\?", '*': "\\*", '+': "\\+",
      '{': "\\{", '}': "\\}", '(': "\\(", ')': "\\)", '|': "\\|",
      '^': "\\^", '$': "\\$", '[': "\\[", ']': "\\]", '/': "\\/",
      't': '\\t', 'n': '\\n', 'r': '\\r', '-': "\\-", '/': '/'
    };
    s = ShExUtil.unescapeText(s, regexpEscapeReplacements)
    var ret = {
      pattern: s
    };
    if (regexp.length > end+1)
      ret.flags = regexp.substr(end+1);
    return ret;
  }

  // Convenience function to return object with p1 key, value p2
  function keyValObject(key, val) {
    var ret = {};
    ret[key] = val;
    return ret;
  }

  // Return object with p1 key, p2 string value
  function unescapeSemanticAction(key, string) {
    string = string.substring(1, string.length - 2);
    return {
      type: "SemAct",
      name: key,
      code: ShExUtil.unescapeText(string, semactEscapeReplacements)
    };
  }

  function error (msg) {
    Parser.reset();
    throw new Error(msg);
  }

  // Expand declared prefix or throw Error
  function expandPrefix (prefix) {
    if (!(prefix in Parser._prefixes))
      error('Parse error; unknown prefix: ' + prefix);
    return Parser._prefixes[prefix];
  }

  // Add a shape to the map
  function addShape (label, shape) {
    if (Parser.productions && label in Parser.productions)
      error("Structural error: "+label+" is a shape");
    if (!Parser.shapes)
      Parser.shapes = {};
    if (label in Parser.shapes) {
      if (Parser.options.duplicateShape === "replace")
        Parser.shapes[label] = shape;
      else if (Parser.options.duplicateShape !== "ignore")
        error("Parse error: "+label+" already defined");
    } else
      Parser.shapes[label] = shape;
  }

  // Add a production to the map
  function addProduction (label, production) {
    if (Parser.shapes && label in Parser.shapes)
      error("Structural error: "+label+" is a shape");
    if (!Parser.productions)
      Parser.productions = {};
    if (label in Parser.productions) {
      if (Parser.options.duplicateShape === "replace")
        Parser.productions[label] = production;
      else if (Parser.options.duplicateShape !== "ignore")
        error("Parse error: "+label+" already defined");
    } else
      Parser.productions[label] = production;
  }

  function shapeJunction (type, container, elts) {
    if (elts.length === 0) {
      return container;
    } else if (container.type === type) {
      container.shapeExprs = container.shapeExprs.concat(elts);
      return container;
    } else {
      return { type: type, shapeExprs: [container].concat(elts) };
    }
  }

  var EmptyObject = {  };
  var EmptyShape = { type: "Shape" };
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
  var iBacktick = yy_.yytext.indexOf('`');
  var prefix = null;
  if (iBacktick > 0) {
    prefix = yy_.yytext.substr(0, iBacktick-1);
    yy_.yytext = yy_.yytext.substr(iBacktick);
  }
  yy_.yytext = { prefix: prefix, label: unescapeString(yy_.yytext, 1) };
  return 159;

break;
case 1:/**/
break;
case 2:return 76;
break;
case 3:return 77;
break;
case 4:return 181;
break;
case 5:return 78;
break;
case 6:return 196;
break;
case 7:return 154;
break;
case 8:return 103;
break;
case 9:return 102;
break;
case 10:return 94;
break;
case 11:return 'ANON';
break;
case 12:return 20;
break;
case 13:return 22;
break;
case 14:return 194;
break;
case 15:return 95;
break;
case 16:return 197;
break;
case 17:return 188;
break;
case 18: yy_.yytext = unescapeLangString(yy_.yytext, 3); return 189; 
break;
case 19: yy_.yytext = unescapeLangString(yy_.yytext, 3); return 189; 
break;
case 20: yy_.yytext = unescapeLangString(yy_.yytext, 1); return 189; 
break;
case 21: yy_.yytext = unescapeLangString(yy_.yytext, 1); return 189; 
break;
case 22: yy_.yytext = unescapeString(yy_.yytext, 3); return 104; 
break;
case 23: yy_.yytext = unescapeString(yy_.yytext, 3); return 104; 
break;
case 24: yy_.yytext = unescapeString(yy_.yytext, 1); return 104; 
break;
case 25: yy_.yytext = unescapeString(yy_.yytext, 1); return 104; 
break;
case 26:return 19;
break;
case 27:return 21;
break;
case 28:return 23;
break;
case 29:return 24;
break;
case 30:return 32;
break;
case 31:return 40;
break;
case 32:return 'IT_VIRTUAL';
break;
case 33:return 121;
break;
case 34:return 124;
break;
case 35:return 79;
break;
case 36:return 91;
break;
case 37:return 90;
break;
case 38:return 92;
break;
case 39:return 55;
break;
case 40:return 52;
break;
case 41:return 44;
break;
case 42:return 106;
break;
case 43:return 107;
break;
case 44:return 108;
break;
case 45:return 109;
break;
case 46:return 96;
break;
case 47:return 97;
break;
case 48:return 98;
break;
case 49:return 110;
break;
case 50:return 111;
break;
case 51:return 33;
break;
case 52:return 183;
break;
case 53:return 113;
break;
case 54:return 115;
break;
case 55:return 182;
break;
case 56:return '||';
break;
case 57:return 132;
break;
case 58:return 137;
break;
case 59:return 69;
break;
case 60:return 70;
break;
case 61:return 28;
break;
case 62:return 29;
break;
case 63:return 142;
break;
case 64:return '!';
break;
case 65:return 105;
break;
case 66:return 155;
break;
case 67:return 71;
break;
case 68:return 169;
break;
case 69:return 138;
break;
case 70:return 151;
break;
case 71:return 152;
break;
case 72:return 153;
break;
case 73:return 170;
break;
case 74:return 187;
break;
case 75:return 192;
break;
case 76:return 193;
break;
case 77:return 7;
break;
case 78:return 'unexpected word "'+yy_.yytext+'"';
break;
case 79:return 'invalid character '+yy_.yytext;
break;
}
},
rules: [/^(?:(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:)?`([^\u0060\u005c\u000a\u000d]|(\\[\"\'\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*`))/,/^(?:\s+|(#[^\u000a\u000d]*))/,/^(?:(@(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:)(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|:|[0-9]|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))*(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%)))))?))))/,/^(?:(@((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:)))/,/^(?:(@([A-Za-z])+((-([0-9A-Za-z])+))*))/,/^(?:@)/,/^(?:(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:)(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|:|[0-9]|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))*(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%)))))?)))/,/^(?:(\{((([+-])?([0-9])+))((,(((([+-])?([0-9])+))|\*)?))?\}))/,/^(?:(([+-])?((([0-9])+\.([0-9])*(([Ee]([+-])?([0-9])+)))|((\.)?([0-9])+(([Ee]([+-])?([0-9])+))))))/,/^(?:(([+-])?([0-9])*\.([0-9])+))/,/^(?:(([+-])?([0-9])+))/,/^(?:{ANON})/,/^(?:(<([^\u0000-\u0020<>\"{}|^`\\]|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*>))/,/^(?:((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:))/,/^(?:a\b)/,/^(?:(\/([^\u002f\u005C\u000A\u000D]|\\[nrt\\|.?*+(){}$\u002D\u005B\u005D\u005E\/]|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))+\/[smix]*))/,/^(?:(_:((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|[0-9])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?))/,/^(?:(\{([^%\\]|\\[%\\]|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*%\}))/,/^(?:('''(('|'')?([^\'\\]|(\\[\"\'\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*'''(@([A-Za-z])+((-([0-9A-Za-z])+))*)))/,/^(?:("""(("|"")?([^\"\\]|(\\[\"\'\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*"""(@([A-Za-z])+((-([0-9A-Za-z])+))*)))/,/^(?:('([^\u0027\u005c\u000a\u000d]|(\\[\"\'\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*'(@([A-Za-z])+((-([0-9A-Za-z])+))*)))/,/^(?:("([^\u0022\u005c\u000a\u000d]|(\\[\"\'\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*"(@([A-Za-z])+((-([0-9A-Za-z])+))*)))/,/^(?:('''(('|'')?([^\'\\]|(\\[\"\'\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*'''))/,/^(?:("""(("|"")?([^\"\\]|(\\[\"\'\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*"""))/,/^(?:('([^\u0027\u005c\u000a\u000d]|(\\[\"\'\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*'))/,/^(?:("([^\u0022\u005c\u000a\u000d]|(\\[\"\'\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*"))/,/^(?:([Bb][Aa][Ss][Ee]))/,/^(?:([Pp][Rr][Ee][Ff][Ii][Xx]))/,/^(?:([iI][mM][pP][oO][rR][tT]))/,/^(?:([Ll][Aa][Bb][Ee][Ll]))/,/^(?:([sS][tT][aA][rR][tT]))/,/^(?:([eE][xX][tT][eE][rR][nN][aA][lL]))/,/^(?:([Vv][Ii][Rr][Tt][Uu][Aa][Ll]))/,/^(?:([Cc][Ll][Oo][Ss][Ee][Dd]))/,/^(?:([Ee][Xx][Tt][Rr][Aa]))/,/^(?:([Ll][Ii][Tt][Ee][Rr][Aa][Ll]))/,/^(?:([Bb][Nn][Oo][Dd][Ee]))/,/^(?:([Ii][Rr][Ii]))/,/^(?:([Nn][Oo][Nn][Ll][Ii][Tt][Ee][Rr][Aa][Ll]))/,/^(?:([Aa][Nn][Dd]))/,/^(?:([Oo][Rr]))/,/^(?:([No][Oo][Tt]))/,/^(?:([Mm][Ii][Nn][Ii][Nn][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Mm][Ii][Nn][Ee][Xx][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Mm][Aa][Xx][Ii][Nn][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Mm][Aa][Xx][Ee][Xx][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Ll][Ee][Nn][Gg][Tt][Hh]))/,/^(?:([Mm][Ii][Nn][Ll][Ee][Nn][Gg][Tt][Hh]))/,/^(?:([Mm][Aa][Xx][Ll][Ee][Nn][Gg][Tt][Hh]))/,/^(?:([Tt][Oo][Tt][Aa][Ll][Dd][Ii][Gg][Ii][Tt][Ss]))/,/^(?:([Ff][Rr][Aa][Cc][Tt][Ii][Oo][Nn][Dd][Ii][Gg][Ii][Tt][Ss]))/,/^(?:=)/,/^(?:\/\/)/,/^(?:\{)/,/^(?:\})/,/^(?:&)/,/^(?:\|\|)/,/^(?:\|)/,/^(?:,)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\$)/,/^(?:!)/,/^(?:\^\^)/,/^(?:\^)/,/^(?:\.)/,/^(?:~)/,/^(?:;)/,/^(?:\*)/,/^(?:\+)/,/^(?:\?)/,/^(?:-)/,/^(?:%)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:$)/,/^(?:[a-zA-Z0-9_-]+)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = ShExJison;
exports.Parser = ShExJison.Parser;
exports.parse = function () { return ShExJison.parse.apply(ShExJison, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}