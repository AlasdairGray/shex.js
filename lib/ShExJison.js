/* parser generated by jison 0.4.16 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ShExJison = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[7,17,18,19,20,23,180,181,182],$V1=[1,10],$V2=[1,23],$V3=[1,11],$V4=[1,25],$V5=[1,17],$V6=[1,24],$V7=[1,26],$V8=[1,22],$V9=[7,17,18,19,20,23,180,181],$Va=[54,62,66,166],$Vb=[2,55],$Vc=[1,40],$Vd=[1,41],$Ve=[1,45],$Vf=[1,46],$Vg=[1,47],$Vh=[1,56],$Vi=[1,57],$Vj=[1,58],$Vk=[1,63],$Vl=[1,64],$Vm=[1,65],$Vn=[1,66],$Vo=[1,67],$Vp=[1,60],$Vq=[1,51],$Vr=[1,52],$Vs=[1,53],$Vt=[7,17,18,19,20,23,30,35,39,41,42,54,56,62,66,73,78,79,85,89,108,111,120,121,122,126,128,129,130,131,146,163,164,165,166,168,171,172,173,174,180,181,182],$Vu=[7,17,18,19,20,23,24,30,35,39,41,42,54,56,62,66,73,78,79,85,89,94,95,96,108,111,120,121,122,125,126,128,129,130,131,135,136,138,139,140,141,142,143,145,146,148,158,161,162,163,164,165,166,168,170,171,172,173,174,176,177,178,179,180,181,182,183],$Vv=[7,17,18,19,20,23,89,180,181],$Vw=[7,17,18,19,20,23,35,89,180,181],$Vx=[7,17,18,19,20,23,35,39,89,180,181],$Vy=[7,17,18,19,20,23,35,39,54,56,62,66,73,78,79,89,126,128,129,130,131,138,139,140,141,142,143,163,164,165,166,168,171,172,173,174,180,181,182],$Vz=[2,129],$VA=[7,17,18,19,20,23,35,39,54,56,62,66,73,78,79,89,163,164,165,166,168,171,172,173,174,180,181,182],$VB=[7,17,18,19,20,23,35,39,54,56,62,66,73,78,79,89,126,128,129,130,131,163,164,165,166,168,171,172,173,174,180,181,182],$VC=[18,20,108,125,135,136,148,161,162,176,177,178,179,180],$VD=[1,92],$VE=[1,94],$VF=[1,93],$VG=[1,97],$VH=[1,98],$VI=[1,99],$VJ=[1,100],$VK=[1,114],$VL=[1,115],$VM=[1,116],$VN=[1,117],$VO=[1,118],$VP=[1,119],$VQ=[1,130],$VR=[1,131],$VS=[1,132],$VT=[1,128],$VU=[1,129],$VV=[1,153],$VW=[2,57],$VX=[1,147],$VY=[1,146],$VZ=[1,154],$V_=[1,155],$V$=[1,152],$V01=[1,149],$V11=[1,151],$V21=[1,143],$V31=[7,17,18,19,20,23,35,39,54,56,62,66,73,78,79,89,108,125,126,128,129,130,131,135,136,137,138,139,140,141,142,143,148,159,161,162,163,164,165,166,168,171,172,173,174,176,177,178,179,180,181,182],$V41=[7,17,18,19,20,23,35,39,56,73,78,79,89,180,181,182],$V51=[125,135,136,176,177,178,179],$V61=[1,173],$V71=[7,17,18,19,20,23,35,39,56,73,78,79,89,108,125,135,136,148,161,162,168,176,177,178,179,180,181,182],$V81=[1,179],$V91=[56,73,89],$Va1=[2,74],$Vb1=[1,181],$Vc1=[1,182],$Vd1=[2,98],$Ve1=[56,73,78,79,89],$Vf1=[1,194],$Vg1=[1,195],$Vh1=[1,199],$Vi1=[1,200],$Vj1=[1,201],$Vk1=[1,202],$Vl1=[1,203],$Vm1=[18,20,41,42,54,62,66,85,108,111,120,121,122,125,126,128,129,130,131,135,136,146,161,162,163,164,165,166,170,176,177,178,179,180],$Vn1=[18,20,170,180],$Vo1=[18,20,54,62,66,166,180,181],$Vp1=[18,20,54,62,66,166,170,180],$Vq1=[18,20,108,125,135,136,148,158,161,162,176,177,178,179,180],$Vr1=[2,59],$Vs1=[2,78],$Vt1=[1,237],$Vu1=[1,238],$Vv1=[18,20,24,41,56,73,78,79,85,89,94,95,96,145,170,180],$Vw1=[56,73,78,79,89,168,182],$Vx1=[2,108],$Vy1=[1,241],$Vz1=[1,242],$VA1=[1,243],$VB1=[1,244],$VC1=[56,73,78,79,89,168,171,172,173,174,182],$VD1=[35,56,73,78,79,89,168,171,172,173,174,182],$VE1=[35,39,56,73,78,79,89,168,171,172,173,174,182],$VF1=[18,20,35,39,56,73,78,79,89,111,120,121,122,146,168,171,172,173,174,180,182],$VG1=[98,99,184],$VH1=[2,198],$VI1=[1,272],$VJ1=[2,77],$VK1=[7,17,18,19,20,23,35,39,56,73,78,79,89,168,180,181,182],$VL1=[56,73,78,79,89,182],$VM1=[78,89],$VN1=[24,56,73,78,79,89,94,95,96];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"shexDoc":3,"initParser":4,"Qdirective_E_Star":5,"Q_O_QnotStartAction_E_Or_QstartActions_E_S_Qstatement_E_Star_C_E_Opt":6,"EOF":7,"directive":8,"O_QnotStartAction_E_Or_QstartActions_E_C":9,"notStartAction":10,"startActions":11,"Qstatement_E_Star":12,"statement":13,"O_QnotStartAction_E_Or_QstartActions_E_S_Qstatement_E_Star_C":14,"baseDecl":15,"prefixDecl":16,"IT_BASE":17,"IRIREF":18,"IT_PREFIX":19,"PNAME_NS":20,"start":21,"shapeExprDecl":22,"IT_start":23,"=":24,"shapeExpression":25,"QcodeDecl_E_Plus":26,"codeDecl":27,"shapeLabel":28,"O_QshapeExpression_E_Or_QIT_EXTERNAL_E_C":29,"IT_EXTERNAL":30,"shapeOr":31,"shapeAnd":32,"Q_O_QIT_OR_E_S_QshapeAnd_E_C_E_Star":33,"O_QIT_OR_E_S_QshapeAnd_E_C":34,"IT_OR":35,"shapeNot":36,"Q_O_QIT_AND_E_S_QshapeNot_E_C_E_Star":37,"O_QIT_AND_E_S_QshapeNot_E_C":38,"IT_AND":39,"shapeAtom":40,"!":41,"IT_NOT":42,"inlineShapeExpression":43,"inlineShapeOr":44,"inlineShapeAnd":45,"Q_O_QIT_OR_E_S_QinlineShapeAnd_E_C_E_Star":46,"O_QIT_OR_E_S_QinlineShapeAnd_E_C":47,"inlineShapeNot":48,"Q_O_QIT_AND_E_S_QinlineShapeNot_E_C_E_Star":49,"O_QIT_AND_E_S_QinlineShapeNot_E_C":50,"inlineShapeAtom":51,"shapeDefinition":52,"Q_O_QincludeSet_E_Or_QextraPropertySet_E_Or_QIT_CLOSED_E_C_E_Star":53,"{":54,"QsomeOfShape_E_Opt":55,"}":56,"Qannotation_E_Star":57,"semanticActions":58,"O_QincludeSet_E_Or_QextraPropertySet_E_Or_QIT_CLOSED_E_C":59,"includeSet":60,"extraPropertySet":61,"IT_CLOSED":62,"someOfShape":63,"annotation":64,"inlineShapeDefinition":65,"IT_EXTRA":66,"Qpredicate_E_Plus":67,"predicate":68,"groupShape":69,"multiElementSomeOf":70,"Q_O_QGT_PIPE_E_S_QgroupShape_E_C_E_Plus":71,"O_QGT_PIPE_E_S_QgroupShape_E_C":72,"|":73,"innerShape":74,"multiElementGroup":75,"unaryShape":76,"groupShape_right":77,",":78,";":79,"Q_O_QGT_COMMA_E_S_QunaryShape_E_C_E_Plus":80,"QGT_COMMA_E_Opt":81,"O_QGT_COMMA_E_S_QunaryShape_E_C":82,"valueConstraint":83,"IT_UNIQUE":84,"(":85,"Q_O_QIT_FOCUS_E_S_QGT_COMMA_E_C_E_Opt":86,"accessor":87,"Q_O_QGT_COMMA_E_S_Qaccessor_E_C_E_Star":88,")":89,"O_QGT_LT_E_Or_QGT_EQUAL_E_Or_QGT_NEQUAL_E_Or_QGT_GT_E_C":90,"O_QIT_FOCUS_E_S_QGT_COMMA_E_C":91,"IT_FOCUS":92,"O_QGT_COMMA_E_S_Qaccessor_E_C":93,"<":94,"!=":95,">":96,"productionLabel":97,"IT_LANGTAG":98,"IT_DATATYPE":99,"tripleConstraint":100,"encapsulatedShape":101,"include":102,"Qcardinality_E_Opt":103,"cardinality":104,"nodeConstraint":105,"shapeOrRef":106,"QstringFacet_E_Plus":107,".":108,"inlineShapeOrRef":109,"QnodeConstraint_E_Opt":110,"IT_LITERAL":111,"QxsFacet_E_Star":112,"nonLiteralKind":113,"datatype":114,"valueSet":115,"xsFacet":116,"QstringFacet_E_Star":117,"stringFacet":118,"QxsFacet_E_Plus":119,"IT_IRI":120,"IT_BNODE":121,"IT_NONLITERAL":122,"numericFacet":123,"stringLength":124,"INTEGER":125,"IT_PATTERN":126,"string":127,"~":128,"IT_LENGTH":129,"IT_MINLENGTH":130,"IT_MAXLENGTH":131,"numericRange":132,"rawNumeric":133,"numericLength":134,"DECIMAL":135,"DOUBLE":136,"^^":137,"IT_MININCLUSIVE":138,"IT_MINEXCLUSIVE":139,"IT_MAXINCLUSIVE":140,"IT_MAXEXCLUSIVE":141,"IT_TOTALDIGITS":142,"IT_FRACTIONDIGITS":143,"senseFlags":144,"^":145,"[":146,"QvalueSetValue_E_Star":147,"]":148,"valueSetValue":149,"iriRange":150,"literal":151,"iri":152,"Q_O_Q_TILDE_E_S_Qexclusion_E_Star_C_E_Opt":153,"Qexclusion_E_Plus":154,"Qexclusion_E_Star":155,"exclusion":156,"O_Q_TILDE_E_S_Qexclusion_E_Star_C":157,"-":158,"LANGTAG":159,"numericLiteral":160,"IT_true":161,"IT_false":162,"ATPNAME_LN":163,"ATPNAME_NS":164,"@":165,"&":166,"QcodeDecl_E_Star":167,"//":168,"O_Qiri_E_Or_Qliteral_E_C":169,"a":170,"*":171,"+":172,"?":173,"REPEAT_RANGE":174,"blankNode":175,"STRING_LITERAL1":176,"STRING_LITERAL2":177,"STRING_LITERAL_LONG1":178,"STRING_LITERAL_LONG2":179,"PNAME_LN":180,"BLANK_NODE_LABEL":181,"%":182,"CODE":183,"$":184,"QshapeLabel_E_Plus":185,"$accept":0,"$end":1},
terminals_: {2:"error",7:"EOF",17:"IT_BASE",18:"IRIREF",19:"IT_PREFIX",20:"PNAME_NS",23:"IT_start",24:"=",30:"IT_EXTERNAL",35:"IT_OR",39:"IT_AND",41:"!",42:"IT_NOT",54:"{",56:"}",62:"IT_CLOSED",66:"IT_EXTRA",73:"|",78:",",79:";",84:"IT_UNIQUE",85:"(",89:")",92:"IT_FOCUS",94:"<",95:"!=",96:">",98:"IT_LANGTAG",99:"IT_DATATYPE",108:".",111:"IT_LITERAL",120:"IT_IRI",121:"IT_BNODE",122:"IT_NONLITERAL",125:"INTEGER",126:"IT_PATTERN",128:"~",129:"IT_LENGTH",130:"IT_MINLENGTH",131:"IT_MAXLENGTH",135:"DECIMAL",136:"DOUBLE",137:"^^",138:"IT_MININCLUSIVE",139:"IT_MINEXCLUSIVE",140:"IT_MAXINCLUSIVE",141:"IT_MAXEXCLUSIVE",142:"IT_TOTALDIGITS",143:"IT_FRACTIONDIGITS",145:"^",146:"[",148:"]",158:"-",159:"LANGTAG",161:"IT_true",162:"IT_false",163:"ATPNAME_LN",164:"ATPNAME_NS",165:"@",166:"&",168:"//",170:"a",171:"*",172:"+",173:"?",174:"REPEAT_RANGE",176:"STRING_LITERAL1",177:"STRING_LITERAL2",178:"STRING_LITERAL_LONG1",179:"STRING_LITERAL_LONG2",180:"PNAME_LN",181:"BLANK_NODE_LABEL",182:"%",183:"CODE",184:"$"},
productions_: [0,[3,4],[4,0],[5,0],[5,2],[9,1],[9,1],[12,0],[12,2],[14,2],[6,0],[6,1],[8,1],[8,1],[15,2],[16,3],[10,1],[10,1],[21,3],[11,1],[26,1],[26,2],[13,1],[13,1],[22,2],[29,1],[29,1],[25,1],[31,2],[34,2],[33,0],[33,2],[32,2],[38,2],[37,0],[37,2],[36,1],[36,2],[36,2],[43,1],[44,2],[47,2],[46,0],[46,2],[45,2],[50,2],[49,0],[49,2],[48,1],[48,2],[48,2],[52,6],[59,1],[59,1],[59,1],[53,0],[53,2],[55,0],[55,1],[57,0],[57,2],[65,4],[61,2],[67,1],[67,2],[63,1],[63,1],[70,2],[72,2],[71,1],[71,2],[74,1],[74,1],[69,2],[77,0],[77,1],[77,1],[77,2],[81,0],[81,1],[81,1],[75,3],[82,2],[82,2],[80,1],[80,2],[83,6],[83,3],[91,2],[86,0],[86,1],[93,2],[88,0],[88,2],[90,1],[90,1],[90,1],[90,1],[87,1],[87,4],[87,4],[76,2],[76,1],[76,2],[76,1],[76,1],[76,1],[101,6],[103,0],[103,1],[40,1],[40,2],[40,1],[40,2],[40,3],[40,1],[51,1],[51,2],[51,2],[51,2],[51,3],[51,1],[110,0],[110,1],[105,2],[105,1],[105,2],[105,2],[105,2],[112,0],[112,2],[117,0],[117,2],[119,1],[119,2],[113,1],[113,1],[113,1],[107,1],[107,2],[116,1],[116,1],[118,2],[118,2],[118,2],[124,1],[124,1],[124,1],[123,2],[123,2],[133,1],[133,1],[133,1],[133,3],[132,1],[132,1],[132,1],[132,1],[134,1],[134,1],[100,5],[100,6],[144,1],[144,2],[144,1],[144,2],[115,3],[147,0],[147,2],[149,1],[149,1],[150,2],[150,2],[155,0],[155,2],[157,2],[153,0],[153,1],[154,1],[154,2],[156,2],[156,3],[151,1],[151,2],[151,3],[151,1],[151,1],[151,1],[106,1],[106,1],[106,2],[106,1],[109,1],[109,1],[109,2],[109,1],[102,2],[58,1],[167,0],[167,2],[64,3],[169,1],[169,1],[68,1],[68,1],[114,1],[104,1],[104,1],[104,1],[104,1],[28,1],[28,1],[160,1],[160,1],[160,1],[127,1],[127,1],[127,1],[127,1],[152,1],[152,1],[152,1],[175,1],[27,3],[27,3],[97,2],[97,2],[60,2],[185,1],[185,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        var valueExprDefns = Parser.valueExprDefns ? { valueExprDefns: Parser.valueExprDefns } : {};
        var startObj = Parser.start ? { start: Parser.start } : {};
        var startActs = Parser.startActs ? { startActs: Parser.startActs } : {};
        var ret = extend({ type: "Schema"},
                         Object.keys(Parser._prefixes).length ? { prefixes: Parser._prefixes } : {}, // Build return object from
                         valueExprDefns, startActs, startObj,                  // components in parser state
                         Parser.shapes ? {shapes: Parser.shapes} : {});        // maintaining intuitve order.
        if (Parser._base !== null)
          ret.base = Parser._base;
        Parser.reset();
        return ret;
      
break;
case 2:
 yy.parser.yy = { lexer: yy.lexer} ; 
break;
case 14:
 // t: @@
        Parser._setBase(Parser._base === null ||
                    absoluteIRI.test($$[$0].slice(1, -1)) ? $$[$0].slice(1, -1) : _resolveIRI($$[$0].slice(1, -1)));
      
break;
case 15:
 // t: ShExParser-test.js/with pre-defined prefixes
        var prefixIRI;
        if (this._base === null || absoluteIRI.test($$[$0].slice(1, -1)))
          prefixIRI = $$[$0].slice(1, -1);
        else
          prefixIRI = _resolveIRI($$[$0].slice(1, -1));
        Parser._prefixes[$$[$0-1].slice(0, -1)] = prefixIRI;
      
break;
case 18:

        if (Parser.start)
          error("Parse error: start alread defined as " + Parser.start);
        Parser.start = $$[$0]; // t: startInline
      
break;
case 19:

        Parser.startActs = $$[$0]; // t: startCode1
      
break;
case 20:
this.$ = [$$[$0]] // t: startCode1;
break;
case 21:
this.$ = appendTo($$[$0-1], $$[$0]) // t: startCode3;
break;
case 24:
 // t: 1dot 1val1vsMinusiri3??
        addShape($$[$0-1],  $$[$0]);
      
break;
case 25:

        this.$ = $$[$0];
      
break;
case 26:
this.$ = { type: "ShapeExternal" };
break;
case 28: case 40:
this.$ = shapeJunction("ShapeOr", $$[$0-1], $$[$0]);
break;
case 29: case 33: case 41: case 45: case 91:
this.$ = $$[$0];
break;
case 30: case 34: case 42: case 46: case 92:
this.$ = [];
break;
case 31: case 35: case 43: case 47: case 93:
this.$ = $$[$0-1].concat($$[$0]);
break;
case 32: case 44:
this.$ = shapeJunction("ShapeAnd", $$[$0-1], $$[$0]);
break;
case 37: case 38: case 49: case 50:
this.$ = { type: "ShapeNot", "shapeExpr": $$[$0] };
break;
case 51:
 // t: 1dotInherit3
        var exprObj = $$[$0-3] ? { expression: $$[$0-3] } : EmptyObject; // t: 0, 0Inherit1
        this.$ = (exprObj === EmptyObject && $$[$0-5] === EmptyObject) ?
	  EmptyShape :
	  extend({ type: "Shape" }, exprObj, $$[$0-5]);
        if ($$[$0-1].length) { this.$.annotations = $$[$0-1]; } // t: !! look to open3groupdotcloseAnnot3, open3groupdotclosecard23Annot3Code2
        if ($$[$0]) { this.$.semActs = $$[$0].semActs; } // t: !! look to open3groupdotcloseCode1, !open1dotOr1dot
      
break;
case 52:
this.$ = [ "inherit", $$[$0] ] // t: 1dotInherit1;
break;
case 53:
this.$ = [ "extra", $$[$0] ] // t: 1dotExtra1, 3groupdot3Extra, 3groupdotExtra3;
break;
case 54:
this.$ = [ "closed", true ] // t: 1dotClosed;
break;
case 55:
this.$ = EmptyObject;
break;
case 56:

      if ($$[$0-1] === EmptyObject)
	$$[$0-1] = {};
      if ($$[$0][0] === "closed")
        $$[$0-1]["closed"] = true; // t: 1dotClosed
      else if ($$[$0][0] in $$[$0-1])
        $$[$0-1][$$[$0][0]] = unionAll($$[$0-1][$$[$0][0]], $$[$0][1]); // t: 1dotInherit3, 3groupdot3Extra, 3groupdotExtra3
      else
        $$[$0-1][$$[$0][0]] = $$[$0][1]; // t: 1dotInherit1
      this.$ = $$[$0-1];
    
break;
case 59:
this.$ = [] // t: 1dot, 1dotAnnot3;
break;
case 60:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1dotAnnot3;
break;
case 61:
 // t: 1dotInherit3
        var exprObj = $$[$0-1] ? { expression: $$[$0-1] } : EmptyObject; // t: 0, 0Inherit1
        this.$ = (exprObj === EmptyObject && $$[$0-3] === EmptyObject) ?
	  EmptyShape :
	  extend({ type: "Shape" }, exprObj, $$[$0-3]);
      
break;
case 62:
this.$ = $$[$0] // t: 1dotExtra1, 3groupdot3Extra;
break;
case 63:
this.$ = [$$[$0]] // t: 1dotExtra1, 3groupdot3Extra, 3groupdotExtra3;
break;
case 64:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 3groupdotExtra3;
break;
case 67:
this.$ = { type: "SomeOf", expressions: unionAll([$$[$0-1]], $$[$0]) } // t: 2someOfdot;
break;
case 68:
this.$ = $$[$0] // t: 2someOfdot;
break;
case 69:
this.$ = [$$[$0]] // t: 2someOfdot;
break;
case 70:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 2someOfdot;
break;
case 73:
this.$ = $$[$0] ? { type: "EachOf", expressions: unionAll([$$[$0-1]], $$[$0]) } : $$[$0-1] // t: 2groupOfdot;
break;
case 74: case 75: case 76:
this.$ = null;
break;
case 77:
this.$ = $$[$0-1];
break;
case 81:
this.$ = { type: "EachOf", expressions: unionAll([$$[$0-2]], $$[$0-1]) } // t: 2groupOfdot;
break;
case 82: case 83:
this.$ = $$[$0] // t: 2groupOfdot;
break;
case 84:
this.$ = [$$[$0]] // t: 2groupOfdot;
break;
case 85:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 2groupOfdot;
break;
case 86:

        this.$ = { type: "Unique", focus: $$[$0-3], uniques: [$$[$0-2]].concat($$[$0-1]) };
      
break;
case 87:

        this.$ = { type: "ValueComparison", left: $$[$0-2], comparator: $$[$0-1], right: $$[$0] };
      
break;
case 89:
this.$ = false;
break;
case 90:
this.$ = true;
break;
case 98:
this.$ = { type: "TermAccessor", productionLabel: $$[$0] };
break;
case 99:
this.$ = { type: "LangtagAccessor", name: $$[$0-1] };
break;
case 100:
this.$ = { type: "DatatypeAccessor", name: $$[$0-1] };
break;
case 101: case 103:
this.$ = extend({ productionLabel: $$[$0-1] }, $$[$0]);
break;
case 107:

        // t: open1dotOr1dot, !openopen1dotcloseCode1closeCode2
        this.$ = $$[$0-4];
        // Copy all of the new attributes into the encapsulated shape.
        if ("min" in $$[$0-2]) { this.$.min = $$[$0-2].min; } // t: open3groupdotclosecard23Annot3Code2
        if ("max" in $$[$0-2]) { this.$.max = $$[$0-2].max; } // t: open3groupdotclosecard23Annot3Code2
        if ($$[$0-1].length) { this.$.annotations = $$[$0-1]; } // t: open3groupdotcloseAnnot3, open3groupdotclosecard23Annot3Code2
        if ($$[$0]) { this.$.semActs = "semActs" in $$[$0-4] ? $$[$0-4].semActs.concat($$[$0].semActs) : $$[$0].semActs; } // t: open3groupdotcloseCode1, !open1dotOr1dot
      
break;
case 108:
this.$ = {} // t: 1dot;
break;
case 111: case 117:

        this.$ = $$[$0] === EmptyShape ?
          extend({ type: "NodeConstraint"}, $$[$0-1]) :
          { type: "ShapeAnd", shapeExprs: [ extend({ type: "NodeConstraint" }, $$[$0-1]), $$[$0] ] }
      
break;
case 113: case 119:
this.$ = { type: "ShapeAnd", shapeExprs: [ extend({ type: "NodeConstraint" }, $$[$0-1]), $$[$0] ] } // t: 1bnodeRefOrRefMinlength;
break;
case 114: case 120:
this.$ = $$[$0-1] // t: 1val1vsMinusiri3;
break;
case 115: case 121:
this.$ = EmptyShape // t: 1dot;
break;
case 118:
this.$ = $$[$0] ? { type: "ShapeAnd", shapeExprs: [ extend({ type: "NodeConstraint" }, $$[$0-1]), $$[$0] ] } : $$[$0-1] // t: !! look to 1dotRef1;
break;
case 124:
this.$ = extend({ type: "NodeConstraint", nodeKind: "literal" }, $$[$0]) // t: 1literalPattern;
break;
case 125:
this.$ = extend({ type: "NodeConstraint" }, $$[$0]) // t: 1iriPattern;
break;
case 126:
this.$ = extend({ type: "NodeConstraint"}, $$[$0-1], $$[$0]) // t: 1iriPattern;
break;
case 127:

        if (numericDatatypes.indexOf($$[$0-1]) === -1)
          numericFacets.forEach(function (facet) {
            if (facet in $$[$0])
              error("Parse error: facet " + facet + " not allowed for unknown datatype " + $$[$0-1]);
          });
        this.$ = extend({ type: "NodeConstraint", datatype: $$[$0-1] }, $$[$0]) // t: 1datatype
      
break;
case 128:
this.$ = { type: "NodeConstraint", values: $$[$0-1] } // t: 1val1IRIREF;
break;
case 129:
this.$ = {} // t: 1literalPattern;
break;
case 130:

        if (Object.keys($$[$0-1]).indexOf(Object.keys($$[$0])[0]) !== -1) {
          error("Parse error: facet "+Object.keys($$[$0])[0]+" defined multiple times");
        }
        this.$ = extend($$[$0-1], $$[$0]) // t: 1literalLength
      
break;
case 131:
this.$ = {};
break;
case 132: case 139:

        if (Object.keys($$[$0-1]).indexOf(Object.keys($$[$0])[0]) !== -1) {
          error("Parse error: facet "+Object.keys($$[$0])[0]+" defined multiple times");
        }
        this.$ = extend($$[$0-1], $$[$0])
      
break;
case 134:

        if (Object.keys($$[$0-1]).indexOf(Object.keys($$[$0])[0]) !== -1) {
          error("Parse error: facet "+Object.keys($$[$0])[0]+" defined multiple times");
        }
        this.$ = extend($$[$0-1], $$[$0]) // t: !! look to 1literalLength
      
break;
case 135:
this.$ = { nodeKind: "iri" } // t: 1iriPattern;
break;
case 136:
this.$ = { nodeKind: "bnode" } // t: 1bnodeLength;
break;
case 137:
this.$ = { nodeKind: "nonliteral" } // t: 1nonliteralLength;
break;
case 142:
this.$ = keyValObject($$[$0-1], parseInt($$[$0], 10)) // t: 1literalLength;
break;
case 143: case 144:
this.$ = { pattern: $$[$0].substr(1, $$[$0].length-2) } // t: 1literalPattern;
break;
case 145:
this.$ = "length" // t: 1literalLength;
break;
case 146:
this.$ = "minlength" // t: 1literalMinlength;
break;
case 147:
this.$ = "maxlength" // t: 1literalMaxlength;
break;
case 148:
this.$ = keyValObject($$[$0-1], $$[$0]) // t: 1literalMininclusive;
break;
case 149:
this.$ = keyValObject($$[$0-1], parseInt($$[$0], 10)) // t: 1literalTotaldigits;
break;
case 150:
this.$ = parseInt($$[$0], 10);;
break;
case 151: case 152:
this.$ = parseFloat($$[$0]);;
break;
case 153:

        $$[$0-2] = $$[$0-2].substr(1, $$[$0-2].length - 2);
        if ($$[$0] === XSD_DECIMAL || $$[$0] === XSD_FLOAT || $$[$0] === XSD_DOUBLE)
          this.$ = parseFloat($$[$0-2]);
        else if (numericDatatypes.indexOf($$[$0]) !== -1)
          this.$ = parseInt($$[$0-2])
        else
          error("Parse error: numeric range facet expected numeric datatype instead of " + $$[$0]);
      
break;
case 154:
this.$ = "mininclusive" // t: 1literalMininclusive;
break;
case 155:
this.$ = "minexclusive" // t: 1literalMinexclusive;
break;
case 156:
this.$ = "maxinclusive" // t: 1literalMaxinclusive;
break;
case 157:
this.$ = "maxexclusive" // t: 1literalMaxexclusive;
break;
case 158:
this.$ = "totaldigits" // t: 1literalTotaldigits;
break;
case 159:
this.$ = "fractiondigits" // t: 1literalFractiondigits;
break;
case 160:

        // $$[$0]: t: 1dotCode1
	if ($$[$0-3] !== EmptyShape && false) {
	  var t = blank();
	  addShape(t, $$[$0-3]);
	  $$[$0-3] = { type: "ShapeRef", reference: t };
	}
        this.$ = extend({ type: "TripleConstraint", predicate: $$[$0-4]}, ($$[$0-3] === EmptyShape ? {} : { valueExpr: $$[$0-3] }), $$[$0-2], $$[$0]); // t: 1dot
        if ($$[$0-1].length)
          this.$["annotations"] = $$[$0-1]; // t: 1dotAnnot3
      
break;
case 161:

        // %6: t: 1inversedotCode1
        this.$ = extend({ type: "TripleConstraint" }, $$[$0-5], { predicate: $$[$0-4] }, ($$[$0-3] === EmptyShape ? {} : { valueExpr: $$[$0-3] }), $$[$0-2], $$[$0]); // t: 1inversedot, 1negatedinversedot
        if ($$[$0-1].length)
          this.$["annotations"] = $$[$0-1]; // t: 1inversedotAnnot3
      
break;
case 162:
this.$ = { inverse: true } // t: 1inversedot;
break;
case 163:
this.$ = { inverse: true, negated: true } // t: 1negatedinversedot;
break;
case 164:
this.$ = { negated: true } // t: 1negateddot;
break;
case 165:
this.$ = { inverse: true, negated: true } // t: 1inversenegateddot;
break;
case 166:
this.$ = $$[$0-1] // t: 1val1IRIREF;
break;
case 167:
this.$ = [] // t: 1val1IRIREF;
break;
case 168:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1val1IRIREF;
break;
case 171:

        if ($$[$0]) {
          this.$ = {  // t: 1val1iriStem, 1val1iriStemMinusiri3
            type: "StemRange",
            stem: $$[$0-1]
          };
          if ($$[$0].length)
            this.$["exclusions"] = $$[$0]; // t: 1val1iriStemMinusiri3
        } else {
          this.$ = $$[$0-1]; // t: 1val1IRIREF, 1AvalA
        }
      
break;
case 172:
this.$ = { type: "StemRange", stem: { type: "Wildcard" }, exclusions: $$[$0] } // t:1val1dotMinusiri3, 1val1dotMinusiriStem3;
break;
case 173:
this.$ = [] // t: 1val1iriStem, 1val1iriStemMinusiri3;
break;
case 174:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1val1iriStemMinusiri3;
break;
case 175: case 180:
this.$ = $$[$0] // t: 1val1iriStemMinusiri3;
break;
case 178:
this.$ = [$$[$0]] // t:1val1dotMinusiri3, 1val1dotMinusiriStem3;
break;
case 179:
this.$ = appendTo($$[$0-1], $$[$0]) // t:1val1dotMinusiri3, 1val1dotMinusiriStem3;
break;
case 181:
this.$ = { type: "Stem", stem: $$[$0-1] } // t: 1val1iriStemMinusiriStem3;
break;
case 183:
this.$ = $$[$0-1] + lowercase($$[$0]) // t: 1val1LANGTAG;
break;
case 184:
this.$ = $$[$0-2] + '^^' + $$[$0] // t: 1val1Datatype;
break;
case 186:
this.$ = XSD_TRUE // t: 1val1true;
break;
case 187:
this.$ = XSD_FALSE // t: 1val1false;
break;
case 188: case 192:
 // t: 1dotRefLNex
        $$[$0] = $$[$0].substr(1, $$[$0].length-1);
        var namePos = $$[$0].indexOf(':');
        this.$ = { type: "ShapeRef", reference: expandPrefix($$[$0].substr(0, namePos)) + $$[$0].substr(namePos + 1) };
      
break;
case 189: case 193:
 // t: 1dotRefNS1
        $$[$0] = $$[$0].substr(1, $$[$0].length-1);
        this.$ = { type: "ShapeRef", reference: expandPrefix($$[$0].substr(0, $$[$0].length - 1)) };
      
break;
case 190: case 194:
this.$ = { type: "ShapeRef", reference: $$[$0] } // t: 1dotRef1, 1dotRefSpaceLNex, 1dotRefSpaceNS1;
break;
case 196:
this.$ = { type: "Inclusion", "include": $$[$0] } // t: 2groupInclude1;
break;
case 197:
this.$ = $$[$0].length ? { semActs: $$[$0] } : null; // t: 1dotCode1/2oneOfDot;
break;
case 198:
this.$ = [] // t: 1dot, 1dotCode1;
break;
case 199:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1dotCode1;
break;
case 200:
this.$ = { type: "Annotation", predicate: $$[$0-1], object: $$[$0] } // t: 1dotAnnotIRIREF;
break;
case 204:
this.$ = RDF_TYPE // t: 1AvalA;
break;
case 206:
this.$ = { min:0, max:"*" } // t: 1cardStar;
break;
case 207:
this.$ = { min:1, max:"*" } // t: 1cardPlus;
break;
case 208:
this.$ = { min:0, max:1 } // t: 1cardOpt;
break;
case 209:

        $$[$0] = $$[$0].substr(1, $$[$0].length-2);
        var nums = $$[$0].match(/(\d+)/g);
        this.$ = { min: parseInt(nums[0], 10) }; // t: 1card2blank, 1card2Star
        if (nums.length === 2)
            this.$["max"] = parseInt(nums[1], 10); // t: 1card23
        else if ($$[$0].indexOf(',') === -1) // t: 1card2
            this.$["max"] = parseInt(nums[0], 10);
        else
            this.$["max"] = "*";
      
break;
case 212:
this.$ = createLiteral($$[$0], XSD_INTEGER) // t: 1val1INTEGER;
break;
case 213:
this.$ = createLiteral($$[$0], XSD_DECIMAL) // t: 1val1DECIMAL;
break;
case 214:
this.$ = createLiteral($$[$0].toLowerCase(), XSD_DOUBLE) // t: 1val1DOUBLE;
break;
case 215:
this.$ = unescapeString($$[$0], 1) // t: 1val1STRING_LITERAL1;
break;
case 216:
this.$ = unescapeString($$[$0], 1) // t: 1val1STRING_LITERAL2;
break;
case 217:
this.$ = unescapeString($$[$0], 3) // t: 1val1STRING_LITERAL_LONG1;
break;
case 218:
this.$ = unescapeString($$[$0], 3) // t: 1val1STRING_LITERAL_LONG2;
break;
case 219:
this.$ = this._base === null || absoluteIRI.test($$[$0].slice(1, -1)) ? unescape($$[$0].slice(1,-1), irirefEscapeSequence) : _resolveIRI(unescape($$[$0].slice(1,-1), irirefEscapeSequence)) // t: 1dot;
break;
case 220:
 // t:1dotPNex, 1dotPNdefault, ShExParser-test.js/with pre-defined prefixes
        var namePos = $$[$0].indexOf(':');
        this.$ = expandPrefix($$[$0].substr(0, namePos)) + $$[$0].substr(namePos + 1);
    
break;
case 221:
 // t: 1dotNS2, 1dotNSdefault, ShExParser-test.js/PNAME_NS with pre-defined prefixes
        this.$ = expandPrefix($$[$0].substr(0, $$[$0].length - 1));
    
break;
case 223:
this.$ = unescapeSemanticAction($$[$0-1], $$[$0]) // t: 1dotCode1;
break;
case 224:
this.$ = { type: "SemAct", name: $$[$0-1] } // t: @@;
break;
case 225:
this.$ = $$[$0] // t: 1val1vcrefIRIREF;
break;
case 226:
this.$ = $$[$0] // t: 1val1vcrefbnode;
break;
case 227:
this.$ = $$[$0] // t: 1dotInherit1, 1dot3Inherit, 1dotInherit3;
break;
case 228:
this.$ = [$$[$0]] // t: 1dotInherit1, 1dot3Inherit, 1dotInherit3;
break;
case 229:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1dotInherit3;
break;
}
},
table: [o($V0,[2,2],{3:1,4:2}),{1:[3]},o($V0,[2,3],{5:3}),{6:4,7:[2,10],8:5,9:9,10:12,11:13,14:6,15:7,16:8,17:$V1,18:$V2,19:$V3,20:$V4,21:14,22:15,23:$V5,26:16,27:19,28:18,152:20,175:21,180:$V6,181:$V7,182:$V8},{7:[1,27]},o($V0,[2,4]),{7:[2,11]},o($V0,[2,12]),o($V0,[2,13]),o($V9,[2,7],{12:28}),{18:[1,29]},{20:[1,30]},o($V9,[2,5]),o($V9,[2,6]),o($V9,[2,16]),o($V9,[2,17]),o($V9,[2,19],{27:31,182:$V8}),{24:[1,32]},o($Va,$Vb,{29:33,25:34,31:36,32:37,36:38,40:39,105:42,106:43,107:44,113:48,114:49,115:50,52:54,118:55,152:59,53:61,124:62,18:$V2,20:$V4,30:[1,35],41:$Vc,42:$Vd,85:$Ve,108:$Vf,111:$Vg,120:$Vh,121:$Vi,122:$Vj,126:$Vk,128:$Vl,129:$Vm,130:$Vn,131:$Vo,146:$Vp,163:$Vq,164:$Vr,165:$Vs,180:$V6}),o($V0,[2,20]),o($Vt,[2,210]),o($Vt,[2,211]),{18:$V2,20:$V4,152:68,180:$V6},o($Vu,[2,219]),o($Vu,[2,220]),o($Vu,[2,221]),o([7,17,18,19,20,23,24,30,35,39,41,42,54,56,62,66,73,78,79,85,89,94,95,96,108,111,120,121,122,126,128,129,130,131,145,146,163,164,165,166,168,170,171,172,173,174,180,181,182],[2,222]),{1:[2,1]},{7:[2,9],8:70,10:71,13:69,15:7,16:8,17:$V1,18:$V2,19:$V3,20:$V4,21:14,22:15,23:$V5,28:18,152:20,175:21,180:$V6,181:$V7},o($V0,[2,14]),{18:[1,72]},o($V0,[2,21]),o($Va,$Vb,{31:36,32:37,36:38,40:39,105:42,106:43,107:44,113:48,114:49,115:50,52:54,118:55,152:59,53:61,124:62,25:73,18:$V2,20:$V4,41:$Vc,42:$Vd,85:$Ve,108:$Vf,111:$Vg,120:$Vh,121:$Vi,122:$Vj,126:$Vk,128:$Vl,129:$Vm,130:$Vn,131:$Vo,146:$Vp,163:$Vq,164:$Vr,165:$Vs,180:$V6}),o($V9,[2,24]),o($V9,[2,25]),o($V9,[2,26]),o($Vv,[2,27]),o($Vw,[2,30],{33:74}),o($Vx,[2,34],{37:75}),o($Vx,[2,36]),o($Va,$Vb,{105:42,106:43,107:44,113:48,114:49,115:50,52:54,118:55,152:59,53:61,124:62,40:76,18:$V2,20:$V4,85:$Ve,108:$Vf,111:$Vg,120:$Vh,121:$Vi,122:$Vj,126:$Vk,128:$Vl,129:$Vm,130:$Vn,131:$Vo,146:$Vp,163:$Vq,164:$Vr,165:$Vs,180:$V6}),o($Va,$Vb,{105:42,106:43,107:44,113:48,114:49,115:50,52:54,118:55,152:59,53:61,124:62,40:77,18:$V2,20:$V4,85:$Ve,108:$Vf,111:$Vg,120:$Vh,121:$Vi,122:$Vj,126:$Vk,128:$Vl,129:$Vm,130:$Vn,131:$Vo,146:$Vp,163:$Vq,164:$Vr,165:$Vs,180:$V6}),o($Vx,[2,110],{52:54,53:61,106:78,54:$Vb,62:$Vb,66:$Vb,166:$Vb,163:$Vq,164:$Vr,165:$Vs}),o($Vx,[2,112]),o($Va,$Vb,{52:54,53:61,124:62,106:79,118:80,126:$Vk,128:$Vl,129:$Vm,130:$Vn,131:$Vo,163:$Vq,164:$Vr,165:$Vs}),o($Va,$Vb,{31:36,32:37,36:38,40:39,105:42,106:43,107:44,113:48,114:49,115:50,52:54,118:55,152:59,53:61,124:62,25:81,18:$V2,20:$V4,41:$Vc,42:$Vd,85:$Ve,108:$Vf,111:$Vg,120:$Vh,121:$Vi,122:$Vj,126:$Vk,128:$Vl,129:$Vm,130:$Vn,131:$Vo,146:$Vp,163:$Vq,164:$Vr,165:$Vs,180:$V6}),o($Vx,[2,115]),o($Vy,$Vz,{112:82}),o($VA,[2,125],{118:55,124:62,107:83,126:$Vk,128:$Vl,129:$Vm,130:$Vn,131:$Vo}),o($Vy,$Vz,{112:84}),o($Vy,$Vz,{112:85}),o($Vx,[2,188]),o($Vx,[2,189]),{18:$V2,20:$V4,28:86,152:20,175:21,180:$V6,181:$V7},o($Vx,[2,191]),o($VB,[2,138]),o($VB,[2,135]),o($VB,[2,136]),o($VB,[2,137]),o([7,17,18,19,20,23,35,39,54,56,62,66,73,78,79,89,108,125,126,128,129,130,131,135,136,138,139,140,141,142,143,148,161,162,163,164,165,166,168,171,172,173,174,176,177,178,179,180,181,182],[2,205]),o($VC,[2,167],{147:87}),{54:[1,88],59:89,60:90,61:91,62:$VD,66:$VE,166:$VF},{125:[1,95]},{127:96,176:$VG,177:$VH,178:$VI,179:$VJ},{127:101,176:$VG,177:$VH,178:$VI,179:$VJ},{125:[2,145]},{125:[2,146]},{125:[2,147]},{182:[1,103],183:[1,102]},o($V9,[2,8]),o($V9,[2,22]),o($V9,[2,23]),o($V0,[2,15]),o($V9,[2,18]),o($Vv,[2,28],{34:104,35:[1,105]}),o($Vw,[2,32],{38:106,39:[1,107]}),o($Vx,[2,37]),o($Vx,[2,38]),o($Vx,[2,111]),o($Vx,[2,113]),o($VB,[2,139]),{89:[1,108]},o($VA,[2,124],{124:62,116:109,118:110,123:111,132:112,134:113,126:$Vk,128:$Vl,129:$Vm,130:$Vn,131:$Vo,138:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP}),o($VA,[2,126],{124:62,118:80,126:$Vk,128:$Vl,129:$Vm,130:$Vn,131:$Vo}),o($VA,[2,127],{124:62,116:109,118:110,123:111,132:112,134:113,126:$Vk,128:$Vl,129:$Vm,130:$Vn,131:$Vo,138:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP}),o($VA,[2,128],{124:62,116:109,118:110,123:111,132:112,134:113,126:$Vk,128:$Vl,129:$Vm,130:$Vn,131:$Vo,138:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP}),o($Vx,[2,190]),{18:$V2,20:$V4,108:[1,125],125:$VQ,127:126,135:$VR,136:$VS,148:[1,120],149:121,150:122,151:123,152:124,160:127,161:$VT,162:$VU,176:$VG,177:$VH,178:$VI,179:$VJ,180:$V6},{18:$V2,20:$V4,41:$VV,55:133,56:$VW,63:134,68:144,69:135,70:136,76:137,83:141,84:$VX,85:$VY,87:148,97:138,98:$VZ,99:$V_,100:139,101:140,102:142,144:145,145:$V$,152:150,166:$V01,170:$V11,180:$V6,184:$V21},o($Va,[2,56]),o($Va,[2,52]),o($Va,[2,53]),o($Va,[2,54]),{18:$V2,20:$V4,28:157,152:20,175:21,180:$V6,181:$V7,185:156},{18:$V2,20:$V4,67:158,68:159,152:150,170:$V11,180:$V6},o($Vy,[2,142]),o($Vy,[2,143]),o($V31,[2,215]),o($V31,[2,216]),o($V31,[2,217]),o($V31,[2,218]),o($Vy,[2,144]),o($V41,[2,223]),o($V41,[2,224]),o($Vw,[2,31]),o($Va,$Vb,{36:38,40:39,105:42,106:43,107:44,113:48,114:49,115:50,52:54,118:55,152:59,53:61,124:62,32:160,18:$V2,20:$V4,41:$Vc,42:$Vd,85:$Ve,108:$Vf,111:$Vg,120:$Vh,121:$Vi,122:$Vj,126:$Vk,128:$Vl,129:$Vm,130:$Vn,131:$Vo,146:$Vp,163:$Vq,164:$Vr,165:$Vs,180:$V6}),o($Vx,[2,35]),o($Va,$Vb,{40:39,105:42,106:43,107:44,113:48,114:49,115:50,52:54,118:55,152:59,53:61,124:62,36:161,18:$V2,20:$V4,41:$Vc,42:$Vd,85:$Ve,108:$Vf,111:$Vg,120:$Vh,121:$Vi,122:$Vj,126:$Vk,128:$Vl,129:$Vm,130:$Vn,131:$Vo,146:$Vp,163:$Vq,164:$Vr,165:$Vs,180:$V6}),o($Vx,[2,114]),o($Vy,[2,130]),o($Vy,[2,140]),o($Vy,[2,141]),{125:[1,163],127:166,133:162,135:[1,164],136:[1,165],176:$VG,177:$VH,178:$VI,179:$VJ},{125:[1,167]},o($V51,[2,154]),o($V51,[2,155]),o($V51,[2,156]),o($V51,[2,157]),{125:[2,158]},{125:[2,159]},o($Vy,[2,166]),o($VC,[2,168]),o($VC,[2,169]),o($VC,[2,170]),o($VC,[2,176],{153:168,157:169,128:[1,170]}),{154:171,156:172,158:$V61},o($V71,[2,182],{137:[1,175],159:[1,174]}),o($V71,[2,185]),o($V71,[2,186]),o($V71,[2,187]),o($V71,[2,212]),o($V71,[2,213]),o($V71,[2,214]),{56:[1,176]},{56:[2,58]},{56:[2,65],71:177,72:178,73:$V81},{56:[2,66]},o($V91,$Va1,{77:180,80:183,82:184,78:$Vb1,79:$Vc1}),o([24,94,95,96],$Vd1,{68:144,144:145,152:150,100:185,101:186,18:$V2,20:$V4,41:$VV,85:$VY,145:$V$,170:$V11,180:$V6}),o($Ve1,[2,102]),o($Ve1,[2,104]),o($Ve1,[2,105]),o($Ve1,[2,106]),{18:$V2,20:$V4,152:187,175:188,180:$V6,181:$V7},o($Va,$Vb,{113:48,114:49,115:50,118:55,152:59,124:62,43:189,44:190,45:191,48:192,51:193,105:196,109:197,107:198,65:204,53:205,18:$V2,20:$V4,41:$Vf1,42:$Vg1,85:$Vh1,108:$Vi1,111:$Vg,120:$Vh,121:$Vi,122:$Vj,126:$Vk,128:$Vl,129:$Vm,130:$Vn,131:$Vo,146:$Vp,163:$Vj1,164:$Vk1,165:$Vl1,180:$V6}),{18:$V2,20:$V4,68:206,152:150,170:$V11,180:$V6},{18:$V2,20:$V4,41:$VV,68:144,69:211,70:209,74:207,75:208,76:210,83:141,84:$VX,85:$VY,87:148,97:138,98:$VZ,99:$V_,100:139,101:140,102:142,144:145,145:$V$,152:150,166:$V01,170:$V11,180:$V6,184:$V21},{85:[1,212]},{24:[1,215],90:213,94:[1,214],95:[1,216],96:[1,217]},{18:$V2,20:$V4,28:218,152:20,175:21,180:$V6,181:$V7},o($Vm1,[2,203]),o($Vm1,[2,204]),o($Vn1,[2,162],{41:[1,219]}),o($Vn1,[2,164],{145:[1,220]}),{85:[1,221]},{85:[1,222]},o($Va,[2,227],{152:20,175:21,28:223,18:$V2,20:$V4,180:$V6,181:$V7}),o($Vo1,[2,228]),o($Va,[2,62],{152:150,68:224,18:$V2,20:$V4,170:$V11,180:$V6}),o($Vp1,[2,63]),o($Vw,[2,29]),o($Vx,[2,33]),o($Vy,[2,148]),o($Vy,[2,150]),o($Vy,[2,151]),o($Vy,[2,152]),{137:[1,225]},o($Vy,[2,149]),o($VC,[2,171]),o($VC,[2,177]),o($Vq1,[2,173],{155:226}),o($VC,[2,172],{156:227,158:$V61}),o($Vq1,[2,178]),{18:$V2,20:$V4,152:228,180:$V6},o($V71,[2,183]),{18:$V2,20:$V4,114:229,152:59,180:$V6},o([7,17,18,19,20,23,35,39,89,168,180,181,182],$Vr1,{57:230}),o([56,89],[2,67],{72:231,73:$V81}),o($V91,[2,69]),{18:$V2,20:$V4,41:$VV,68:144,69:232,76:137,83:141,84:$VX,85:$VY,87:148,97:138,98:$VZ,99:$V_,100:139,101:140,102:142,144:145,145:$V$,152:150,166:$V01,170:$V11,180:$V6,184:$V21},o($V91,[2,73]),o($V91,[2,75],{97:138,100:139,101:140,83:141,102:142,68:144,144:145,87:148,152:150,76:233,18:$V2,20:$V4,41:$VV,84:$VX,85:$VY,98:$VZ,99:$V_,145:$V$,166:$V01,170:$V11,180:$V6,184:$V21}),o($V91,[2,76],{97:138,100:139,101:140,83:141,102:142,68:144,144:145,87:148,152:150,76:234,18:$V2,20:$V4,41:$VV,84:$VX,85:$VY,98:$VZ,99:$V_,145:$V$,166:$V01,170:$V11,180:$V6,184:$V21}),o($V91,$Vs1,{81:235,82:236,78:$Vt1,79:$Vu1}),o($Ve1,[2,84]),o($Ve1,[2,101]),o($Ve1,[2,103]),o($Vv1,[2,225]),o($Vv1,[2,226]),o($Vw1,$Vx1,{103:239,104:240,171:$Vy1,172:$Vz1,173:$VA1,174:$VB1}),o($VC1,[2,39]),o($VD1,[2,42],{46:245}),o($VE1,[2,46],{49:246}),o($VE1,[2,48]),o($Va,$Vb,{113:48,114:49,115:50,118:55,152:59,124:62,105:196,109:197,107:198,65:204,53:205,51:247,18:$V2,20:$V4,85:$Vh1,108:$Vi1,111:$Vg,120:$Vh,121:$Vi,122:$Vj,126:$Vk,128:$Vl,129:$Vm,130:$Vn,131:$Vo,146:$Vp,163:$Vj1,164:$Vk1,165:$Vl1,180:$V6}),o($Va,$Vb,{113:48,114:49,115:50,118:55,152:59,124:62,105:196,109:197,107:198,65:204,53:205,51:248,18:$V2,20:$V4,85:$Vh1,108:$Vi1,111:$Vg,120:$Vh,121:$Vi,122:$Vj,126:$Vk,128:$Vl,129:$Vm,130:$Vn,131:$Vo,146:$Vp,163:$Vj1,164:$Vk1,165:$Vl1,180:$V6}),o($VE1,[2,116],{65:204,53:205,109:249,54:$Vb,62:$Vb,66:$Vb,166:$Vb,163:$Vj1,164:$Vk1,165:$Vl1}),o($VE1,[2,122],{113:48,114:49,115:50,152:59,110:250,105:251,18:$V2,20:$V4,111:$Vg,120:$Vh,121:$Vi,122:$Vj,146:$Vp,180:$V6}),o($Va,$Vb,{124:62,118:80,65:204,53:205,109:252,126:$Vk,128:$Vl,129:$Vm,130:$Vn,131:$Vo,163:$Vj1,164:$Vk1,165:$Vl1}),o($Va,$Vb,{31:36,32:37,36:38,40:39,105:42,106:43,107:44,113:48,114:49,115:50,52:54,118:55,152:59,53:61,124:62,25:253,18:$V2,20:$V4,41:$Vc,42:$Vd,85:$Ve,108:$Vf,111:$Vg,120:$Vh,121:$Vi,122:$Vj,126:$Vk,128:$Vl,129:$Vm,130:$Vn,131:$Vo,146:$Vp,163:$Vq,164:$Vr,165:$Vs,180:$V6}),o($VE1,[2,121]),o($VF1,[2,192]),o($VF1,[2,193]),{18:$V2,20:$V4,28:254,152:20,175:21,180:$V6,181:$V7},o($VF1,[2,195]),{54:[1,255],59:89,60:90,61:91,62:$VD,66:$VE,166:$VF},o($Va,$Vb,{113:48,114:49,115:50,118:55,152:59,124:62,44:190,45:191,48:192,51:193,105:196,109:197,107:198,65:204,53:205,43:256,18:$V2,20:$V4,41:$Vf1,42:$Vg1,85:$Vh1,108:$Vi1,111:$Vg,120:$Vh,121:$Vi,122:$Vj,126:$Vk,128:$Vl,129:$Vm,130:$Vn,131:$Vo,146:$Vp,163:$Vj1,164:$Vk1,165:$Vl1,180:$V6}),{89:[1,257]},{89:[2,71]},{89:[2,72]},{73:$Va1,77:180,78:$Vb1,79:$Vc1,80:258,82:184},{71:177,72:178,73:$V81},o($VG1,[2,89],{86:259,91:260,92:[1,261]}),{87:262,97:263,98:$VZ,99:$V_,184:$V21},o($VG1,[2,94]),o($VG1,[2,95]),o($VG1,[2,96]),o($VG1,[2,97]),o($Ve1,[2,196]),o($Vn1,[2,163]),o($Vn1,[2,165]),{97:264,184:$V21},{97:265,184:$V21},o($Vo1,[2,229]),o($Vp1,[2,64]),{18:$V2,20:$V4,114:266,152:59,180:$V6},o($VC,[2,175],{156:267,158:$V61}),o($Vq1,[2,179]),o($Vq1,[2,180],{128:[1,268]}),o($V71,[2,184]),o([7,17,18,19,20,23,35,39,89,180,181,182],$VH1,{58:269,64:270,167:271,168:$VI1}),o($V91,[2,70]),o($V91,[2,68]),o($Ve1,[2,82]),o($Ve1,[2,83]),o($V91,$VJ1),o($Ve1,[2,85]),o($V91,[2,79],{97:138,100:139,101:140,83:141,102:142,68:144,144:145,87:148,152:150,76:233,18:$V2,20:$V4,41:$VV,84:$VX,85:$VY,98:$VZ,99:$V_,145:$V$,166:$V01,170:$V11,180:$V6,184:$V21}),o($V91,[2,80],{97:138,100:139,101:140,83:141,102:142,68:144,144:145,87:148,152:150,76:234,18:$V2,20:$V4,41:$VV,84:$VX,85:$VY,98:$VZ,99:$V_,145:$V$,166:$V01,170:$V11,180:$V6,184:$V21}),o($Vw1,$Vr1,{57:273}),o($Vw1,[2,109]),o($Vw1,[2,206]),o($Vw1,[2,207]),o($Vw1,[2,208]),o($Vw1,[2,209]),o($VC1,[2,40],{47:274,35:[1,275]}),o($VD1,[2,44],{50:276,39:[1,277]}),o($VE1,[2,49]),o($VE1,[2,50]),o($VE1,[2,117]),o($VE1,[2,118]),o($VE1,[2,123]),o($VE1,[2,119]),{89:[1,278]},o($VF1,[2,194]),{18:$V2,20:$V4,41:$VV,55:279,56:$VW,63:134,68:144,69:135,70:136,76:137,83:141,84:$VX,85:$VY,87:148,97:138,98:$VZ,99:$V_,100:139,101:140,102:142,144:145,145:$V$,152:150,166:$V01,170:$V11,180:$V6,184:$V21},o($Vw1,$Vx1,{104:240,103:280,171:$Vy1,172:$Vz1,173:$VA1,174:$VB1}),o($Vw1,$Vx1,{104:240,103:281,171:$Vy1,172:$Vz1,173:$VA1,174:$VB1}),o([73,89],$Vs1,{82:236,81:282,78:$Vt1,79:$Vu1}),{87:283,97:263,98:$VZ,99:$V_,184:$V21},o($VG1,[2,90]),{78:[1,284]},o($Ve1,[2,87]),o($Ve1,$Vd1),{89:[1,285]},{89:[1,286]},o($Vy,[2,153]),o($Vq1,[2,174]),o($Vq1,[2,181]),o($Vx,[2,51]),o($VK1,[2,60]),o([7,17,18,19,20,23,35,39,56,73,78,79,89,180,181],[2,197],{27:287,182:$V8}),{18:$V2,20:$V4,68:288,152:150,170:$V11,180:$V6},o($VL1,$VH1,{64:270,167:271,58:289,168:$VI1}),o($VD1,[2,43]),o($Va,$Vb,{113:48,114:49,115:50,118:55,152:59,124:62,48:192,51:193,105:196,109:197,107:198,65:204,53:205,45:290,18:$V2,20:$V4,41:$Vf1,42:$Vg1,85:$Vh1,108:$Vi1,111:$Vg,120:$Vh,121:$Vi,122:$Vj,126:$Vk,128:$Vl,129:$Vm,130:$Vn,131:$Vo,146:$Vp,163:$Vj1,164:$Vk1,165:$Vl1,180:$V6}),o($VE1,[2,47]),o($Va,$Vb,{113:48,114:49,115:50,118:55,152:59,124:62,51:193,105:196,109:197,107:198,65:204,53:205,48:291,18:$V2,20:$V4,41:$Vf1,42:$Vg1,85:$Vh1,108:$Vi1,111:$Vg,120:$Vh,121:$Vi,122:$Vj,126:$Vk,128:$Vl,129:$Vm,130:$Vn,131:$Vo,146:$Vp,163:$Vj1,164:$Vk1,165:$Vl1,180:$V6}),o($VE1,[2,120]),{56:[1,292]},o($Vw1,$Vr1,{57:293}),o($Vw1,$Vr1,{57:294}),{73:$VJ1,89:[2,81]},o($VM1,[2,92],{88:295}),o($VG1,[2,88]),o($VN1,[2,99]),o($VN1,[2,100]),o($V41,[2,199]),{18:$V2,20:$V4,125:$VQ,127:126,135:$VR,136:$VS,151:298,152:297,160:127,161:$VT,162:$VU,169:296,176:$VG,177:$VH,178:$VI,179:$VJ,180:$V6},o($Ve1,[2,160]),o($VD1,[2,41]),o($VE1,[2,45]),o($VF1,[2,61]),o($VL1,$VH1,{64:270,167:271,58:299,168:$VI1}),o($VL1,$VH1,{64:270,167:271,58:300,168:$VI1}),{78:[1,303],89:[1,301],93:302},o($VK1,[2,200]),o($VK1,[2,201]),o($VK1,[2,202]),o($Ve1,[2,161]),o($Ve1,[2,107]),o($Ve1,[2,86]),o($VM1,[2,93]),{87:304,97:263,98:$VZ,99:$V_,184:$V21},o($VM1,[2,91])],
defaultActions: {6:[2,11],27:[2,1],65:[2,145],66:[2,146],67:[2,147],118:[2,158],119:[2,159],134:[2,58],136:[2,66],208:[2,71],209:[2,72]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = new Error();

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  /*
    ShEx parser in the Jison parser generator format.
  */

  // Common namespaces and entities
  var RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
      RDF_TYPE  = RDF + 'type',
      RDF_FIRST = RDF + 'first',
      RDF_REST  = RDF + 'rest',
      RDF_NIL   = RDF + 'nil',
      XSD = 'http://www.w3.org/2001/XMLSchema#',
      XSD_INTEGER  = XSD + 'integer',
      XSD_DECIMAL  = XSD + 'decimal',
      XSD_FLOAT   = XSD + 'float',
      XSD_DOUBLE   = XSD + 'double',
      XSD_BOOLEAN  = XSD + 'boolean',
      XSD_TRUE =  '"true"^^'  + XSD_BOOLEAN,
      XSD_FALSE = '"false"^^' + XSD_BOOLEAN,
      XSD_PATTERN        = XSD + 'pattern',
      XSD_MININCLUSIVE   = XSD + 'minInclusive',
      XSD_MINEXCLUSIVE   = XSD + 'minExclusive',
      XSD_MAXINCLUSIVE   = XSD + 'maxInclusive',
      XSD_MAXEXCLUSIVE   = XSD + 'maxExclusive',
      XSD_LENGTH         = XSD + 'length',
      XSD_MINLENGTH      = XSD + 'minLength',
      XSD_MAXLENGTH      = XSD + 'maxLength',
      XSD_TOTALDIGITS    = XSD + 'totalDigits',
      XSD_FRACTIONDIGITS = XSD + 'fractionDigits';

  var numericDatatypes = [
      XSD + "integer",
      XSD + "decimal",
      XSD + "float",
      XSD + "double",
      XSD + "string",
      XSD + "boolean",
      XSD + "dateTime",
      XSD + "nonPositiveInteger",
      XSD + "negativeInteger",
      XSD + "long",
      XSD + "int",
      XSD + "short",
      XSD + "byte",
      XSD + "nonNegativeInteger",
      XSD + "unsignedLong",
      XSD + "unsignedInt",
      XSD + "unsignedShort",
      XSD + "unsignedByte",
      XSD + "positiveInteger"
  ];

  var absoluteIRI = /^[a-z][a-z0-9+.-]*:/i,
    schemeAuthority = /^(?:([a-z][a-z0-9+.-]*:))?(?:\/\/[^\/]*)?/i,
    dotSegments = /(?:^|\/)\.\.?(?:$|[\/#?])/;

  var numericFacets = ["mininclusive", "minexclusive",
                       "maxinclusive", "maxexclusive"];

  // Returns a lowercase version of the given string
  function lowercase(string) {
    return string.toLowerCase();
  }

  // Appends the item to the array and returns the array
  function appendTo(array, item) {
    return array.push(item), array;
  }

  // Appends the items to the array and returns the array
  function appendAllTo(array, items) {
    return array.push.apply(array, items), array;
  }

  // Extends a base object with properties of other objects
  function extend(base) {
    if (!base) base = {};
    for (var i = 1, l = arguments.length, arg; i < l && (arg = arguments[i] || {}); i++)
      for (var name in arg)
        base[name] = arg[name];
    return base;
  }

  // Creates an array that contains all items of the given arrays
  function unionAll() {
    var union = [];
    for (var i = 0, l = arguments.length; i < l; i++)
      union = union.concat.apply(union, arguments[i]);
    return union;
  }

  // N3.js:lib/N3Parser.js<0.4.5>:58 with
  //   s/this\./Parser./g
  // ### `_setBase` sets the base IRI to resolve relative IRIs.
  Parser._setBase = function (baseIRI) {
    if (!baseIRI)
      baseIRI = null;
    else if (baseIRI.indexOf('#') >= 0)
      throw new Error('Invalid base IRI ' + baseIRI);
    // Set base IRI and its components
    if (Parser._base = baseIRI) {
      Parser._basePath   = baseIRI.replace(/[^\/?]*(?:\?.*)?$/, '');
      baseIRI = baseIRI.match(schemeAuthority);
      Parser._baseRoot   = baseIRI[0];
      Parser._baseScheme = baseIRI[1];
    }
  }

  // N3.js:lib/N3Parser.js<0.4.5>:576 with
  //   s/this\./Parser./g
  //   s/token/iri/
  // ### `_resolveIRI` resolves a relative IRI token against the base path,
  // assuming that a base path has been set and that the IRI is indeed relative.
  function _resolveIRI (iri) {
    switch (iri[0]) {
    // An empty relative IRI indicates the base IRI
    case undefined: return Parser._base;
    // Resolve relative fragment IRIs against the base IRI
    case '#': return Parser._base + iri;
    // Resolve relative query string IRIs by replacing the query string
    case '?': return Parser._base.replace(/(?:\?.*)?$/, iri);
    // Resolve root-relative IRIs at the root of the base IRI
    case '/':
      // Resolve scheme-relative IRIs to the scheme
      return (iri[1] === '/' ? Parser._baseScheme : Parser._baseRoot) + _removeDotSegments(iri);
    // Resolve all other IRIs at the base IRI's path
    default: {
      return _removeDotSegments(Parser._basePath + iri);
    }
    }
  }

  // ### `_removeDotSegments` resolves './' and '../' path segments in an IRI as per RFC3986.
  function _removeDotSegments (iri) {
    // Don't modify the IRI if it does not contain any dot segments
    if (!dotSegments.test(iri))
      return iri;

    // Start with an imaginary slash before the IRI in order to resolve trailing './' and '../'
    var result = '', length = iri.length, i = -1, pathStart = -1, segmentStart = 0, next = '/';

    while (i < length) {
      switch (next) {
      // The path starts with the first slash after the authority
      case ':':
        if (pathStart < 0) {
          // Skip two slashes before the authority
          if (iri[++i] === '/' && iri[++i] === '/')
            // Skip to slash after the authority
            while ((pathStart = i + 1) < length && iri[pathStart] !== '/')
              i = pathStart;
        }
        break;
      // Don't modify a query string or fragment
      case '?':
      case '#':
        i = length;
        break;
      // Handle '/.' or '/..' path segments
      case '/':
        if (iri[i + 1] === '.') {
          next = iri[++i + 1];
          switch (next) {
          // Remove a '/.' segment
          case '/':
            result += iri.substring(segmentStart, i - 1);
            segmentStart = i + 1;
            break;
          // Remove a trailing '/.' segment
          case undefined:
          case '?':
          case '#':
            return result + iri.substring(segmentStart, i) + iri.substr(i + 1);
          // Remove a '/..' segment
          case '.':
            next = iri[++i + 1];
            if (next === undefined || next === '/' || next === '?' || next === '#') {
              result += iri.substring(segmentStart, i - 2);
              // Try to remove the parent path from result
              if ((segmentStart = result.lastIndexOf('/')) >= pathStart)
                result = result.substr(0, segmentStart);
              // Remove a trailing '/..' segment
              if (next !== '/')
                return result + '/' + iri.substr(i + 1);
              segmentStart = i + 1;
            }
          }
        }
      }
      next = iri[++i];
    }
    return result + iri.substring(segmentStart);
  }

  // Creates an expression with the given type and attributes
  function expression(expr, attr) {
    var expression = { expression: expr };
    if (attr)
      for (var a in attr)
        expression[a] = attr[a];
    return expression;
  }

  // Creates a path with the given type and items
  function path(type, items) {
    return { type: 'path', pathType: type, items: items };
  }

  // Creates a literal with the given value and type
  function createLiteral(value, type) {
    return '"' + value + '"^^' + type;
  }

  // Creates a new blank node identifier
  function blank() {
    return '_:b' + blankId++;
  };
  var blankId = 0;
  Parser._resetBlanks = function () { blankId = 0; }
  Parser.reset = function () {
    Parser._prefixes = Parser.valueExprDefns = Parser.shapes = Parser.start = Parser.startActs = null; // Reset state.
    Parser._base = Parser._baseIRI = Parser._baseIRIPath = Parser._baseIRIRoot = null;
  }
  var _fileName; // for debugging
  Parser._setFileName = function (fn) { _fileName = fn; }

  // Regular expression and replacement strings to escape strings
  var stringEscapeSequence = /\\u([a-fA-F0-9]{4})|\\U([a-fA-F0-9]{8})|\\(.)/g,
      irirefEscapeSequence = /\\u([a-fA-F0-9]{4})|\\U([a-fA-F0-9]{8})/g,
      stringEscapeReplacements = { '\\': '\\', "'": "'", '"': '"',
                             't': '\t', 'b': '\b', 'n': '\n', 'r': '\r', 'f': '\f' },
      semactEscapeReplacements = { '\\': '\\', '%': '%' },
      fromCharCode = String.fromCharCode;

  function unescape(string, regex, replacements) {
    try {
      string = string.replace(regex, function (sequence, unicode4, unicode8, escapedChar) {
        var charCode;
        if (unicode4) {
          charCode = parseInt(unicode4, 16);
          if (isNaN(charCode)) throw new Error(); // can never happen (regex), but helps performance
          return fromCharCode(charCode);
        }
        else if (unicode8) {
          charCode = parseInt(unicode8, 16);
          if (isNaN(charCode)) throw new Error(); // can never happen (regex), but helps performance
          if (charCode < 0xFFFF) return fromCharCode(charCode);
          return fromCharCode(0xD800 + ((charCode -= 0x10000) >> 10), 0xDC00 + (charCode & 0x3FF));
        }
        else {
          var replacement = replacements[escapedChar];
          if (!replacement) throw new Error();
          return replacement;
        }
      });
      return string;
    }
    catch (error) { return ''; }
  };

  // Translates string escape codes in the string into their textual equivalent
  function unescapeString(string, trimLength) {
    string = string.substring(trimLength, string.length - trimLength);
    return '"' + unescape(string, stringEscapeSequence, stringEscapeReplacements) + '"';
  }

  // Convenience function to return object with p1 key, value p2
  function keyValObject(key, val) {
    var ret = {};
    ret[key] = val;
    return ret;
  }

  // Return object with p1 key, p2 string value
  function unescapeSemanticAction(key, string) {
    string = string.substring(1, string.length - 2);
    return {
      type: "SemAct",
      name: key,
      code: unescape(string, stringEscapeSequence, semactEscapeReplacements)
    };
  }

  function error (msg) {
    Parser._prefixes = Parser.valueExprDefns = Parser.shapes = Parser.start = Parser.startActs = null; // Reset state.
    Parser._base = Parser._baseIRI = Parser._baseIRIPath = Parser._baseIRIRoot = '';
    throw new Error(msg);
  }

  // Expand declared prefix or throw Error
  function expandPrefix (prefix) {
    if (!(prefix in Parser._prefixes))
      error('Parse error; unknown prefix: ' + prefix);
    return Parser._prefixes[prefix];
  }

  // Add a shape to the map
  function addShape (label, shape) {
    if (!Parser.shapes)
      Parser.shapes = {};
    if (label in Parser.shapes) {
      if (Parser.options.duplicateShape === "abort")
        error("Parse error: "+label+" alread defined");
      else if (Parser.options.duplicateShape !== "ignore")
        Parser.shapes[label] = shape;
    } else
      Parser.shapes[label] = shape;
  }

  function shapeJunction (type, container, elts) {
    if (elts.length === 0) {
      return container;
    } else if (container.type === type) {
      container.shapeExprs = container.shapeExprs.concat(elts);
      return container;
    } else {
      return { type: type, shapeExprs: [container].concat(elts) };
    }
  }

  var EmptyObject = {  };
  var EmptyShape = { type: "Shape" };
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/**/
break;
case 1:return 163;
break;
case 2:return 164;
break;
case 3:return 159;
break;
case 4:return 165;
break;
case 5:return 180;
break;
case 6:return 174;
break;
case 7:return 136;
break;
case 8:return 135;
break;
case 9:return 125;
break;
case 10:return 'ANON';
break;
case 11:return 18;
break;
case 12:return 20;
break;
case 13:return 170;
break;
case 14:return 181;
break;
case 15:return 183;
break;
case 16:return 178;
break;
case 17:return 'NON_TERMINATED_STRING_LITERAL_LONG2';
break;
case 18:return 179;
break;
case 19:return 'NON_TERMINATED_STRING_LITERAL_LONG2';
break;
case 20:return 176;
break;
case 21:return 177;
break;
case 22:return 17;
break;
case 23:return 19;
break;
case 24:return 23;
break;
case 25:return 30;
break;
case 26:return 'IT_VIRTUAL';
break;
case 27:return 62;
break;
case 28:return 66;
break;
case 29:return 111;
break;
case 30:return 121;
break;
case 31:return 120;
break;
case 32:return 122;
break;
case 33:return 126;
break;
case 34:return 39;
break;
case 35:return 35;
break;
case 36:return 42;
break;
case 37:return 138;
break;
case 38:return 139;
break;
case 39:return 140;
break;
case 40:return 141;
break;
case 41:return 129;
break;
case 42:return 130;
break;
case 43:return 131;
break;
case 44:return 142;
break;
case 45:return 143;
break;
case 46:return 84;
break;
case 47:return 92;
break;
case 48:return 99;
break;
case 49:return 98;
break;
case 50:return 94;
break;
case 51:return 24;
break;
case 52:return 96;
break;
case 53:return 95;
break;
case 54:return 168;
break;
case 55:return 54;
break;
case 56:return 56;
break;
case 57:return 166;
break;
case 58:return '||';
break;
case 59:return 73;
break;
case 60:return 78;
break;
case 61:return 85;
break;
case 62:return 89;
break;
case 63:return 146;
break;
case 64:return 148;
break;
case 65:return 184;
break;
case 66:return 41;
break;
case 67:return 137;
break;
case 68:return 145;
break;
case 69:return 108;
break;
case 70:return 128;
break;
case 71:return 79;
break;
case 72:return 171;
break;
case 73:return 172;
break;
case 74:return 173;
break;
case 75:return 158;
break;
case 76:return 182;
break;
case 77:return 161;
break;
case 78:return 162;
break;
case 79:return 7;
break;
case 80:return 'invalid character '+yy_.yytext;
break;
}
},
rules: [/^(?:\s+|(#[^\u000a\u000d]*))/,/^(?:(@((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:)(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|:|[0-9]|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))*(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%)))))?)))/,/^(?:(@(([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:))/,/^(?:(@([A-Za-z])+((-([0-9A-Za-z])+))*))/,/^(?:@)/,/^(?:(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:)(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|:|[0-9]|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))*(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%)))))?)))/,/^(?:(\{((([+-])?([0-9])+))((,(((([+-])?([0-9])+))|\*)?))?\}))/,/^(?:(([+-])?((([0-9])+\.([0-9])*(([Ee]([+-])?([0-9])+)))|((\.)?([0-9])+(([Ee]([+-])?([0-9])+))))))/,/^(?:(([+-])?([0-9])*\.([0-9])+))/,/^(?:(([+-])?([0-9])+))/,/^(?:{ANON})/,/^(?:(<([^\u0000-\u0020<>\"{}|^`\\]|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*>))/,/^(?:((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:))/,/^(?:a\b)/,/^(?:(_:((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|[0-9])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?))/,/^(?:(\{([^%\\]|\\[%\\]|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*%\}))/,/^(?:('''(('|'')?([^\'\\]|(\\[\"\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*'''))/,/^(?:('''))/,/^(?:("""(("|"")?([^\"\\]|(\\[\"\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*"""))/,/^(?:("""))/,/^(?:('([^\u0027\u005c\u000a\u000d]|(\\[\"\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*'))/,/^(?:("([^\u0022\u005c\u000a\u000d]|(\\[\"\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*"))/,/^(?:([Bb][Aa][Ss][Ee]))/,/^(?:([Pp][Rr][Ee][Ff][Ii][Xx]))/,/^(?:([sS][tT][aA][rR][tT]))/,/^(?:([eE][xX][tT][eE][rR][nN][aA][lL]))/,/^(?:([Vv][Ii][Rr][Tt][Uu][Aa][Ll]))/,/^(?:([Cc][Ll][Oo][Ss][Ee][Dd]))/,/^(?:([Ee][Xx][Tt][Rr][Aa]))/,/^(?:([Ll][Ii][Tt][Ee][Rr][Aa][Ll]))/,/^(?:([Bb][Nn][Oo][Dd][Ee]))/,/^(?:([Ii][Rr][Ii]))/,/^(?:([Nn][Oo][Nn][Ll][Ii][Tt][Ee][Rr][Aa][Ll]))/,/^(?:([Pp][Aa][Tt][Tt][Ee][Rr][Nn]))/,/^(?:([Aa][Nn][Dd]))/,/^(?:([Oo][Rr]))/,/^(?:([No][Oo][Tt]))/,/^(?:([Mm][Ii][Nn][Ii][Nn][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Mm][Ii][Nn][Ee][Xx][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Mm][Aa][Xx][Ii][Nn][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Mm][Aa][Xx][Ee][Xx][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Ll][Ee][Nn][Gg][Tt][Hh]))/,/^(?:([Mm][Ii][Nn][Ll][Ee][Nn][Gg][Tt][Hh]))/,/^(?:([Mm][Aa][Xx][Ll][Ee][Nn][Gg][Tt][Hh]))/,/^(?:([Tt][Oo][Tt][Aa][Ll][Dd][Ii][Gg][Ii][Tt][Ss]))/,/^(?:([Ff][Rr][Aa][Cc][Tt][Ii][Oo][Nn][Dd][Ii][Gg][Ii][Tt][Ss]))/,/^(?:([Uu][Nn][Ii][Qq][Uu][Ee]))/,/^(?:([Ff][Oo][Cc][Uu][Ss]))/,/^(?:([Dd][Aa][Tt][Aa][Tt][Yy][Pp][Ee]))/,/^(?:([Ll][Aa][Nn][Gg][Tt][Aa][Gg]))/,/^(?:<)/,/^(?:=)/,/^(?:>)/,/^(?:!=)/,/^(?:\/\/)/,/^(?:\{)/,/^(?:\})/,/^(?:&)/,/^(?:\|\|)/,/^(?:\|)/,/^(?:,)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\$)/,/^(?:!)/,/^(?:\^\^)/,/^(?:\^)/,/^(?:\.)/,/^(?:~)/,/^(?:;)/,/^(?:\*)/,/^(?:\+)/,/^(?:\?)/,/^(?:-)/,/^(?:%)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = ShExJison;
exports.Parser = ShExJison.Parser;
exports.parse = function () { return ShExJison.parse.apply(ShExJison, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}