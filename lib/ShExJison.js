/* parser generated by jison 0.4.16 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ShExJison = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[7,18,19,20,21,22,30,162,176,177],$V1=[1,11],$V2=[1,25],$V3=[1,12],$V4=[1,27],$V5=[1,13],$V6=[1,19],$V7=[1,24],$V8=[1,26],$V9=[1,28],$Va=[7,18,19,20,21,22,30,176,177],$Vb=[102,110,113,157],$Vc=[2,114],$Vd=[1,66],$Ve=[1,68],$Vf=[1,63],$Vg=[1,45],$Vh=[1,48],$Vi=[1,49],$Vj=[1,56],$Vk=[1,57],$Vl=[1,58],$Vm=[1,50],$Vn=[1,59],$Vo=[1,60],$Vp=[1,61],$Vq=[1,73],$Vr=[1,76],$Vs=[1,77],$Vt=[1,78],$Vu=[1,79],$Vv=[1,80],$Vw=[1,81],$Vx=[1,82],$Vy=[1,83],$Vz=[1,84],$VA=[1,69],$VB=[1,67],$VC=[7,18,19,20,21,22,26,30,37,44,51,56,60,61,62,66,67,68,70,80,81,82,86,87,88,89,95,96,97,98,99,100,102,104,110,113,121,126,127,140,141,142,143,148,157,158,162,176,177],$VD=[7,18,19,20,21,22,26,27,30,37,44,51,56,60,61,62,66,67,68,70,80,81,82,85,86,87,88,89,93,94,95,96,97,98,99,100,102,104,110,113,121,126,127,140,141,142,143,144,148,155,156,157,158,162,163,168,169,170,172,173,174,175,176,177],$VE=[19,21,27,176],$VF=[7,18,19,20,21,22,30,61,176,177],$VG=[7,18,19,20,21,22,30,44,61,176,177],$VH=[7,18,19,20,21,22,30,44,51,61,176,177],$VI=[7,18,19,20,21,22,30,44,51,61,66,67,68,86,87,88,89,95,96,97,98,99,100,102,104,110,113,121,126,127,140,141,142,143,157,158,162,176,177],$VJ=[2,81],$VK=[7,18,19,20,21,22,30,44,51,61,66,67,68,102,104,110,113,121,126,127,140,141,142,143,157,158,162,176,177],$VL=[7,18,19,20,21,22,30,44,51,61,66,67,68,86,87,88,89,102,104,110,113,121,126,127,140,141,142,143,157,158,162,176,177],$VM=[19,21,27,62,85,93,94,148,168,169,172,173,174,175,176],$VN=[1,109],$VO=[1,111],$VP=[1,110],$VQ=[7,18,19,20,21,22,26,27,30,44,51,56,60,61,62,66,67,68,70,80,81,82,85,86,87,88,89,93,94,95,96,97,98,99,100,102,104,110,113,121,126,127,140,141,142,143,148,157,158,162,168,169,170,172,173,174,175,176,177],$VR=[85,93,94],$VS=[1,144],$VT=[1,145],$VU=[1,146],$VV=[1,138],$VW=[1,139],$VX=[1,140],$VY=[1,141],$VZ=[1,142],$V_=[1,143],$V$=[1,160],$V01=[2,116],$V11=[1,153],$V21=[1,156],$V31=[1,164],$V41=[1,161],$V51=[1,163],$V61=[7,18,19,20,21,22,30,44,51,61,104,121,126,127,162,176,177],$V71=[1,176],$V81=[7,18,19,20,21,22,27,30,44,51,61,62,85,93,94,104,121,126,127,148,158,162,168,169,172,173,174,175,176,177],$V91=[7,18,19,20,21,22,27,30,44,51,61,62,85,93,94,104,121,126,127,148,158,162,165,166,168,169,172,173,174,175,176,177],$Va1=[1,182],$Vb1=[61,104,121],$Vc1=[2,134],$Vd1=[1,184],$Ve1=[1,185],$Vf1=[61,104,121,126,127],$Vg1=[1,196],$Vh1=[1,199],$Vi1=[1,200],$Vj1=[1,202],$Vk1=[1,203],$Vl1=[1,204],$Vm1=[19,21,26,56,60,62,66,67,68,70,80,81,82,85,86,87,88,89,93,94,95,96,97,98,99,100,102,110,113,148,157,168,169,170,172,173,174,175,176],$Vn1=[19,21,102,110,113,157,176,177],$Vo1=[19,21,102,110,113,148,157,170,176],$Vp1=[19,21,27,62,85,93,94,148,156,168,169,172,173,174,175,176],$Vq1=[2,118],$Vr1=[2,138],$Vs1=[1,226],$Vt1=[1,227],$Vu1=[19,21,60,61,104,121,126,127,144,148,170,176],$Vv1=[61,104,121,126,127,158,162],$Vw1=[2,153],$Vx1=[1,232],$Vy1=[1,233],$Vz1=[1,234],$VA1=[1,235],$VB1=[61,104,121,126,127,140,141,142,143,158,162],$VC1=[44,61,104,121,126,127,140,141,142,143,158,162],$VD1=[44,51,61,104,121,126,127,140,141,142,143,158,162],$VE1=[19,21,26,44,51,61,70,80,81,82,86,87,88,89,95,96,97,98,99,100,104,121,126,127,140,141,142,143,148,158,162,176],$VF1=[2,184],$VG1=[1,253],$VH1=[2,137],$VI1=[7,18,19,20,21,22,30,44,51,61,104,121,126,127,158,162,176,177],$VJ1=[61,104,121,126,127,162];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"shexDoc":3,"initParser":4,"Qdirective_E_Star":5,"Q_O_QnotStartAction_E_Or_QstartActions_E_S_Qstatement_E_Star_C_E_Opt":6,"EOF":7,"directive":8,"O_QnotStartAction_E_Or_QstartActions_E_C":9,"notStartAction":10,"startActions":11,"Qstatement_E_Star":12,"statement":13,"O_QnotStartAction_E_Or_QstartActions_E_S_Qstatement_E_Star_C":14,"baseDecl":15,"prefixDecl":16,"labelDecl":17,"IT_BASE":18,"IRIREF":19,"IT_PREFIX":20,"PNAME_NS":21,"IT_LABEL":22,"O_Qiri_E_Or_QGT_LBRACKET_E_S_Qiri_E_Star_S_QGT_RBRACKET_E_C":23,"Qiri_E_Star":24,"iri":25,"[":26,"]":27,"start":28,"shapeExprDecl":29,"IT_start":30,"=":31,"shapeExpression":32,"QcodeDecl_E_Plus":33,"codeDecl":34,"shapeExprLabel":35,"O_QshapeExpression_E_Or_QIT_EXTERNAL_E_C":36,"IT_EXTERNAL":37,"shapeOr":38,"inlineShapeExpression":39,"inlineShapeOr":40,"shapeAnd":41,"Q_O_QIT_OR_E_S_QshapeAnd_E_C_E_Star":42,"O_QIT_OR_E_S_QshapeAnd_E_C":43,"IT_OR":44,"inlineShapeAnd":45,"Q_O_QIT_OR_E_S_QinlineShapeAnd_E_C_E_Star":46,"O_QIT_OR_E_S_QinlineShapeAnd_E_C":47,"shapeNot":48,"Q_O_QIT_AND_E_S_QshapeNot_E_C_E_Star":49,"O_QIT_AND_E_S_QshapeNot_E_C":50,"IT_AND":51,"inlineShapeNot":52,"Q_O_QIT_AND_E_S_QinlineShapeNot_E_C_E_Star":53,"O_QIT_AND_E_S_QinlineShapeNot_E_C":54,"shapeAtom":55,"IT_NOT":56,"inlineShapeAtom":57,"nodeConstraint":58,"shapeOrRef":59,"(":60,")":61,".":62,"inlineShapeOrRef":63,"QnodeConstraint_E_Opt":64,"shapeDefinition":65,"ATPNAME_LN":66,"ATPNAME_NS":67,"@":68,"inlineShapeDefinition":69,"IT_LITERAL":70,"QxsFacet_E_Star":71,"nonLiteralKind":72,"QstringFacet_E_Plus":73,"datatype":74,"valueSet":75,"QxsFacet_E_Plus":76,"xsFacet":77,"QstringFacet_E_Star":78,"stringFacet":79,"IT_IRI":80,"IT_BNODE":81,"IT_NONLITERAL":82,"numericFacet":83,"stringLength":84,"INTEGER":85,"REGEXP":86,"IT_LENGTH":87,"IT_MINLENGTH":88,"IT_MAXLENGTH":89,"numericRange":90,"rawNumeric":91,"numericLength":92,"DECIMAL":93,"DOUBLE":94,"IT_MININCLUSIVE":95,"IT_MINEXCLUSIVE":96,"IT_MAXINCLUSIVE":97,"IT_MAXEXCLUSIVE":98,"IT_TOTALDIGITS":99,"IT_FRACTIONDIGITS":100,"Q_O_QincludeSet_E_Or_QextraPropertySet_E_Or_QIT_CLOSED_E_C_E_Star":101,"{":102,"QtripleExpression_E_Opt":103,"}":104,"Qannotation_E_Star":105,"semanticActions":106,"O_QincludeSet_E_Or_QextraPropertySet_E_Or_QIT_CLOSED_E_C":107,"includeSet":108,"extraPropertySet":109,"IT_CLOSED":110,"tripleExpression":111,"annotation":112,"IT_EXTRA":113,"Qpredicate_E_Plus":114,"predicate":115,"oneOfTripleExpr":116,"groupTripleExpr":117,"multiElementOneOf":118,"Q_O_QGT_PIPE_E_S_QgroupTripleExpr_E_C_E_Plus":119,"O_QGT_PIPE_E_S_QgroupTripleExpr_E_C":120,"|":121,"innerTripleExpr":122,"multiElementGroup":123,"unaryTripleExpr":124,"groupTripleExpr_right":125,",":126,";":127,"Q_O_QGT_COMMA_E_S_QunaryTripleExpr_E_C_E_Plus":128,"QGT_COMMA_E_Opt":129,"O_QGT_COMMA_E_S_QunaryTripleExpr_E_C":130,"$":131,"tripleExprLabel":132,"tripleConstraint":133,"bracketedTripleExpr":134,"valueConstraint":135,"include":136,"Qcardinality_E_Opt":137,"cardinality":138,"senseFlags":139,"*":140,"+":141,"?":142,"REPEAT_RANGE":143,"^":144,"QvalueSetValue_E_Star":145,"valueSetValue":146,"iriRange":147,"STRING_GRAVE":148,"literal":149,"Q_O_Q_TILDE_E_S_Qexclusion_E_Star_C_E_Opt":150,"Qexclusion_E_Plus":151,"Qexclusion_E_Star":152,"exclusion":153,"O_Q_TILDE_E_S_Qexclusion_E_Star_C":154,"~":155,"-":156,"&":157,"//":158,"O_QiriOrLabel_E_Or_Qliteral_E_C":159,"iriOrLabel":160,"QcodeDecl_E_Star":161,"%":162,"CODE":163,"string":164,"LANGTAG":165,"^^":166,"numericLiteral":167,"IT_true":168,"IT_false":169,"a":170,"blankNode":171,"STRING_LITERAL1":172,"STRING_LITERAL_LONG1":173,"STRING_LITERAL2":174,"STRING_LITERAL_LONG2":175,"PNAME_LN":176,"BLANK_NODE_LABEL":177,"QshapeExprLabel_E_Plus":178,"$accept":0,"$end":1},
terminals_: {2:"error",7:"EOF",18:"IT_BASE",19:"IRIREF",20:"IT_PREFIX",21:"PNAME_NS",22:"IT_LABEL",26:"[",27:"]",30:"IT_start",31:"=",37:"IT_EXTERNAL",44:"IT_OR",51:"IT_AND",56:"IT_NOT",60:"(",61:")",62:".",66:"ATPNAME_LN",67:"ATPNAME_NS",68:"@",70:"IT_LITERAL",80:"IT_IRI",81:"IT_BNODE",82:"IT_NONLITERAL",85:"INTEGER",86:"REGEXP",87:"IT_LENGTH",88:"IT_MINLENGTH",89:"IT_MAXLENGTH",93:"DECIMAL",94:"DOUBLE",95:"IT_MININCLUSIVE",96:"IT_MINEXCLUSIVE",97:"IT_MAXINCLUSIVE",98:"IT_MAXEXCLUSIVE",99:"IT_TOTALDIGITS",100:"IT_FRACTIONDIGITS",102:"{",104:"}",110:"IT_CLOSED",113:"IT_EXTRA",121:"|",126:",",127:";",131:"$",135:"valueConstraint",140:"*",141:"+",142:"?",143:"REPEAT_RANGE",144:"^",148:"STRING_GRAVE",155:"~",156:"-",157:"&",158:"//",162:"%",163:"CODE",165:"LANGTAG",166:"^^",168:"IT_true",169:"IT_false",170:"a",172:"STRING_LITERAL1",173:"STRING_LITERAL_LONG1",174:"STRING_LITERAL2",175:"STRING_LITERAL_LONG2",176:"PNAME_LN",177:"BLANK_NODE_LABEL"},
productions_: [0,[3,4],[4,0],[5,0],[5,2],[9,1],[9,1],[12,0],[12,2],[14,2],[6,0],[6,1],[8,1],[8,1],[8,1],[15,2],[16,3],[17,2],[24,0],[24,2],[23,1],[23,3],[10,1],[10,1],[28,3],[11,1],[33,1],[33,2],[13,1],[13,1],[29,2],[36,1],[36,1],[32,1],[39,1],[38,2],[43,2],[42,0],[42,2],[40,2],[47,2],[46,0],[46,2],[41,2],[50,2],[49,0],[49,2],[45,2],[54,2],[53,0],[53,2],[48,1],[48,2],[52,1],[52,2],[55,1],[55,2],[55,1],[55,3],[55,1],[57,1],[57,2],[57,2],[57,3],[57,1],[64,0],[64,1],[59,1],[59,1],[59,1],[59,2],[63,1],[63,1],[63,1],[63,2],[58,2],[58,1],[58,2],[58,2],[58,2],[58,1],[71,0],[71,2],[78,0],[78,2],[76,1],[76,2],[72,1],[72,1],[72,1],[73,1],[73,2],[77,1],[77,1],[79,2],[79,1],[84,1],[84,1],[84,1],[83,2],[83,2],[91,1],[91,1],[91,1],[90,1],[90,1],[90,1],[90,1],[92,1],[92,1],[65,6],[107,1],[107,1],[107,1],[101,0],[101,2],[103,0],[103,1],[105,0],[105,2],[69,4],[109,2],[114,1],[114,2],[111,1],[116,1],[116,1],[118,2],[120,2],[119,1],[119,2],[122,1],[122,1],[117,2],[125,0],[125,1],[125,1],[125,2],[129,0],[129,1],[129,1],[123,3],[130,2],[130,2],[128,1],[128,2],[124,3],[124,1],[124,3],[124,1],[124,1],[124,1],[134,6],[137,0],[137,1],[133,5],[133,6],[138,1],[138,1],[138,1],[138,1],[139,1],[75,3],[145,0],[145,2],[146,1],[146,1],[146,1],[147,2],[147,2],[152,0],[152,2],[154,2],[150,0],[150,1],[151,1],[151,2],[153,2],[153,3],[136,2],[112,3],[159,1],[159,1],[106,1],[161,0],[161,2],[34,3],[34,3],[149,1],[149,2],[149,3],[149,1],[149,1],[149,1],[115,1],[115,1],[74,1],[35,1],[35,1],[132,1],[132,1],[167,1],[167,1],[167,1],[164,1],[164,1],[164,1],[164,1],[25,1],[25,1],[25,1],[160,1],[160,1],[160,1],[160,1],[171,1],[108,2],[178,1],[178,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        var valueExprDefns = Parser.valueExprDefns ? { valueExprDefns: Parser.valueExprDefns } : {};
        var startObj = Parser.start ? { start: Parser.start } : {};
        var startActs = Parser.startActs ? { startActs: Parser.startActs } : {};
        var ret = extend({ type: "Schema"},
                         Object.keys(Parser._prefixes).length ? { prefixes: Parser._prefixes } : {}, // Build return object from
                         valueExprDefns, startActs, startObj,                  // components in parser state
                         Parser.shapes ? {shapes: Parser.shapes} : {},         // maintaining intuitve order.
                         Parser.productions ? {productions: Parser.productions} : {});
        if (Parser._base !== null)
          ret.base = Parser._base;
        Parser.reset();
        return ret;
      
break;
case 2:
 yy.parser.yy = { lexer: yy.lexer} ; 
break;
case 15:
 // t: @@
        Parser._setBase(Parser._base === null ||
                    absoluteIRI.test($$[$0].slice(1, -1)) ? $$[$0].slice(1, -1) : _resolveIRI($$[$0].slice(1, -1)));
      
break;
case 16:
 // t: ShExParser-test.js/with pre-defined prefixes
        var prefixIRI;
        if (this._base === null || absoluteIRI.test($$[$0].slice(1, -1)))
          prefixIRI = $$[$0].slice(1, -1);
        else
          prefixIRI = _resolveIRI($$[$0].slice(1, -1));
        Parser._prefixes[$$[$0-1].slice(0, -1)] = prefixIRI;
      
break;
case 17:

        $$[$0].forEach(function (elt) {
	  Parser._termResolver.add(elt);
        });
      
break;
case 18: case 37: case 41: case 45: case 49:
this.$ = [];
break;
case 19: case 38: case 42: case 46: case 50:
this.$ = $$[$0-1].concat($$[$0]);
break;
case 20:
this.$ = [$$[$0]];
break;
case 21: case 137:
this.$ = $$[$0-1];
break;
case 24:

        if (Parser.start)
          error("Parse error: start already defined");
        Parser.start = $$[$0]; // t: startInline
      
break;
case 25:

        Parser.startActs = $$[$0]; // t: startCode1
      
break;
case 26:
this.$ = [$$[$0]] // t: startCode1;
break;
case 27:
this.$ = appendTo($$[$0-1], $$[$0]) // t: startCode3;
break;
case 30:
 // t: 1dot 1val1vsMinusiri3??
        addShape($$[$0-1],  $$[$0]);
      
break;
case 31:

        this.$ = $$[$0];
      
break;
case 32:
this.$ = { type: "ShapeExternal" };
break;
case 35: case 39:
this.$ = shapeJunction("ShapeOr", $$[$0-1], $$[$0]);
break;
case 36: case 40: case 44: case 48:
this.$ = $$[$0];
break;
case 43: case 47:
this.$ = shapeJunction("ShapeAnd", $$[$0-1], $$[$0]);
break;
case 52: case 54:
this.$ = { type: "ShapeNot", "shapeExpr": $$[$0] };
break;
case 56: case 61:

        this.$ = $$[$0] === EmptyShape ?
          extend({ type: "NodeConstraint"}, $$[$0-1]) :
          { type: "ShapeAnd", shapeExprs: [ extend({ type: "NodeConstraint" }, $$[$0-1]), $$[$0] ] }
      
break;
case 58: case 63:
this.$ = $$[$0-1] // t: 1val1vsMinusiri3;
break;
case 59: case 64:
this.$ = EmptyShape // t: 1dot;
break;
case 62:
this.$ = $$[$0] ? { type: "ShapeAnd", shapeExprs: [ extend({ type: "NodeConstraint" }, $$[$0-1]), $$[$0] ] } : $$[$0-1] // t: !! look to 1dotRef1;
break;
case 68: case 72:
 // t: 1dotRefLNex
        $$[$0] = $$[$0].substr(1, $$[$0].length-1);
        var namePos = $$[$0].indexOf(':');
        this.$ = { type: "ShapeRef", reference: expandPrefix($$[$0].substr(0, namePos)) + $$[$0].substr(namePos + 1) };
      
break;
case 69: case 73:
 // t: 1dotRefNS1
        $$[$0] = $$[$0].substr(1, $$[$0].length-1);
        this.$ = { type: "ShapeRef", reference: expandPrefix($$[$0].substr(0, $$[$0].length - 1)) };
      
break;
case 70: case 74:
this.$ = { type: "ShapeRef", reference: $$[$0] } // t: 1dotRef1, 1dotRefSpaceLNex, 1dotRefSpaceNS1;
break;
case 75:
this.$ = extend({ type: "NodeConstraint", nodeKind: "literal" }, $$[$0]) // t: 1literalPattern;
break;
case 76:
this.$ = extend({ type: "NodeConstraint" }, $$[$0]) // t: 1iriPattern;
break;
case 77:
this.$ = extend({ type: "NodeConstraint"}, $$[$0-1], $$[$0]) // t: 1iriPattern;
break;
case 78:

        if (numericDatatypes.indexOf($$[$0-1]) === -1)
          numericFacets.forEach(function (facet) {
            if (facet in $$[$0])
              error("Parse error: facet " + facet + " not allowed for unknown datatype " + $$[$0-1]);
          });
        this.$ = extend({ type: "NodeConstraint", datatype: $$[$0-1] }, $$[$0]) // t: 1datatype
      
break;
case 79:
this.$ = { type: "NodeConstraint", values: $$[$0-1] } // t: 1val1IRIREF;
break;
case 80:
this.$ = extend({ type: "NodeConstraint"}, $$[$0]);
break;
case 81:
this.$ = {} // t: 1literalPattern;
break;
case 82:

        if (Object.keys($$[$0-1]).indexOf(Object.keys($$[$0])[0]) !== -1) {
          error("Parse error: facet "+Object.keys($$[$0])[0]+" defined multiple times");
        }
        this.$ = extend($$[$0-1], $$[$0]) // t: 1literalLength
      
break;
case 83:
this.$ = {};
break;
case 84: case 91:

        if (Object.keys($$[$0-1]).indexOf(Object.keys($$[$0])[0]) !== -1) {
          error("Parse error: facet "+Object.keys($$[$0])[0]+" defined multiple times");
        }
        this.$ = extend($$[$0-1], $$[$0])
      
break;
case 86:

        if (Object.keys($$[$0-1]).indexOf(Object.keys($$[$0])[0]) !== -1) {
          error("Parse error: facet "+Object.keys($$[$0])[0]+" defined multiple times");
        }
        this.$ = extend($$[$0-1], $$[$0]) // t: !! look to 1literalLength
      
break;
case 87:
this.$ = { nodeKind: "iri" } // t: 1iriPattern;
break;
case 88:
this.$ = { nodeKind: "bnode" } // t: 1bnodeLength;
break;
case 89:
this.$ = { nodeKind: "nonliteral" } // t: 1nonliteralLength;
break;
case 94:
this.$ = keyValObject($$[$0-1], parseInt($$[$0], 10)) // t: 1literalLength;
break;
case 95:
this.$ = unescapeRegexp($$[$0]) // t: 1literalPattern;
break;
case 96:
this.$ = "length" // t: 1literalLength;
break;
case 97:
this.$ = "minlength" // t: 1literalMinlength;
break;
case 98:
this.$ = "maxlength" // t: 1literalMaxlength;
break;
case 99:
this.$ = keyValObject($$[$0-1], $$[$0]) // t: 1literalMininclusive;
break;
case 100:
this.$ = keyValObject($$[$0-1], parseInt($$[$0], 10)) // t: 1literalTotaldigits;
break;
case 101:
this.$ = parseInt($$[$0], 10);;
break;
case 102: case 103:
this.$ = parseFloat($$[$0]);;
break;
case 104:
this.$ = "mininclusive" // t: 1literalMininclusive;
break;
case 105:
this.$ = "minexclusive" // t: 1literalMinexclusive;
break;
case 106:
this.$ = "maxinclusive" // t: 1literalMaxinclusive;
break;
case 107:
this.$ = "maxexclusive" // t: 1literalMaxexclusive;
break;
case 108:
this.$ = "totaldigits" // t: 1literalTotaldigits;
break;
case 109:
this.$ = "fractiondigits" // t: 1literalFractiondigits;
break;
case 110:
 // t: 1dotInherit3
        var exprObj = $$[$0-3] ? { expression: $$[$0-3] } : EmptyObject; // t: 0, 0Inherit1
        this.$ = (exprObj === EmptyObject && $$[$0-5] === EmptyObject) ?
	  EmptyShape :
	  extend({ type: "Shape" }, exprObj, $$[$0-5]);
        if ($$[$0-1].length) { this.$.annotations = $$[$0-1]; } // t: !! look to open3groupdotcloseAnnot3, open3groupdotclosecard23Annot3Code2
        if ($$[$0]) { this.$.semActs = $$[$0].semActs; } // t: !! look to open3groupdotcloseCode1, !open1dotOr1dot
      
break;
case 111:
this.$ = [ "inherit", $$[$0] ] // t: 1dotInherit1;
break;
case 112:
this.$ = [ "extra", $$[$0] ] // t: 1dotExtra1, 3groupdot3Extra, 3groupdotExtra3;
break;
case 113:
this.$ = [ "closed", true ] // t: 1dotClosed;
break;
case 114:
this.$ = EmptyObject;
break;
case 115:

      if ($$[$0-1] === EmptyObject)
	$$[$0-1] = {};
      if ($$[$0][0] === "closed")
        $$[$0-1]["closed"] = true; // t: 1dotClosed
      else if ($$[$0][0] in $$[$0-1])
        $$[$0-1][$$[$0][0]] = unionAll($$[$0-1][$$[$0][0]], $$[$0][1]); // t: 1dotInherit3, 3groupdot3Extra, 3groupdotExtra3
      else
        $$[$0-1][$$[$0][0]] = $$[$0][1]; // t: 1dotInherit1
      this.$ = $$[$0-1];
    
break;
case 118:
this.$ = [] // t: 1dot, 1dotAnnot3;
break;
case 119:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1dotAnnot3;
break;
case 120:
 // t: 1dotInherit3
        var exprObj = $$[$0-1] ? { expression: $$[$0-1] } : EmptyObject; // t: 0, 0Inherit1
        this.$ = (exprObj === EmptyObject && $$[$0-3] === EmptyObject) ?
	  EmptyShape :
	  extend({ type: "Shape" }, exprObj, $$[$0-3]);
      
break;
case 121:
this.$ = $$[$0] // t: 1dotExtra1, 3groupdot3Extra;
break;
case 122:
this.$ = [$$[$0]] // t: 1dotExtra1, 3groupdot3Extra, 3groupdotExtra3;
break;
case 123:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 3groupdotExtra3;
break;
case 127:
this.$ = { type: "OneOf", expressions: unionAll([$$[$0-1]], $$[$0]) } // t: 2oneOfdot;
break;
case 128:
this.$ = $$[$0] // t: 2oneOfdot;
break;
case 129:
this.$ = [$$[$0]] // t: 2oneOfdot;
break;
case 130:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 2oneOfdot;
break;
case 133:
this.$ = $$[$0] ? { type: "EachOf", expressions: unionAll([$$[$0-1]], $$[$0]) } : $$[$0-1] // t: 2groupOfdot;
break;
case 134: case 135: case 136:
this.$ = null;
break;
case 141:
this.$ = { type: "EachOf", expressions: unionAll([$$[$0-2]], $$[$0-1]) } // t: 2groupOfdot;
break;
case 142: case 143:
this.$ = $$[$0] // t: 2groupOfdot;
break;
case 144:
this.$ = [$$[$0]] // t: 2groupOfdot;
break;
case 145:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 2groupOfdot;
break;
case 146: case 148:

        this.$ = extend({ id: $$[$0-1] }, $$[$0]);
        addProduction($$[$0-1],  this.$);
      
break;
case 152:

        // t: open1dotOr1dot, !openopen1dotcloseCode1closeCode2
        this.$ = $$[$0-4];
        // Copy all of the new attributes into the encapsulated shape.
        if ("min" in $$[$0-2]) { this.$.min = $$[$0-2].min; } // t: open3groupdotclosecard23Annot3Code2
        if ("max" in $$[$0-2]) { this.$.max = $$[$0-2].max; } // t: open3groupdotclosecard23Annot3Code2
        if ($$[$0-1].length) { this.$.annotations = $$[$0-1]; } // t: open3groupdotcloseAnnot3, open3groupdotclosecard23Annot3Code2
        if ($$[$0]) { this.$.semActs = "semActs" in $$[$0-4] ? $$[$0-4].semActs.concat($$[$0].semActs) : $$[$0].semActs; } // t: open3groupdotcloseCode1, !open1dotOr1dot
      
break;
case 153:
this.$ = {} // t: 1dot;
break;
case 155:

        // $$[$0]: t: 1dotCode1
	if ($$[$0-3] !== EmptyShape && false) {
	  var t = blank();
	  addShape(t, $$[$0-3]);
	  $$[$0-3] = { type: "ShapeRef", reference: t };
	}
        this.$ = extend({ type: "TripleConstraint", predicate: $$[$0-4]}, ($$[$0-3] === EmptyShape ? {} : { valueExpr: $$[$0-3] }), $$[$0-2], $$[$0]); // t: 1dot
        if ($$[$0-1].length)
          this.$["annotations"] = $$[$0-1]; // t: 1dotAnnot3
      
break;
case 156:

        // %6: t: 1inversedotCode1
        this.$ = extend({ type: "TripleConstraint" }, $$[$0-5], { predicate: $$[$0-4] }, ($$[$0-3] === EmptyShape ? {} : { valueExpr: $$[$0-3] }), $$[$0-2], $$[$0]); // t: 1inversedot
        if ($$[$0-1].length)
          this.$["annotations"] = $$[$0-1]; // t: 1inversedotAnnot3
      
break;
case 157:
this.$ = { min:0, max:"unbounded" } // t: 1cardStar;
break;
case 158:
this.$ = { min:1, max:"unbounded" } // t: 1cardPlus;
break;
case 159:
this.$ = { min:0, max:1 } // t: 1cardOpt;
break;
case 160:

        $$[$0] = $$[$0].substr(1, $$[$0].length-2);
        var nums = $$[$0].match(/(\d+)/g);
        this.$ = { min: parseInt(nums[0], 10) }; // t: 1card2blank, 1card2Star
        if (nums.length === 2)
            this.$["max"] = parseInt(nums[1], 10); // t: 1card23
        else if ($$[$0].indexOf(',') === -1) // t: 1card2
            this.$["max"] = parseInt(nums[0], 10);
        else
            this.$["max"] = "unbounded";
      
break;
case 161:
this.$ = { inverse: true } // t: 1inversedot;
break;
case 162:
this.$ = $$[$0-1] // t: 1val1IRIREF;
break;
case 163:
this.$ = [] // t: 1val1IRIREF;
break;
case 164:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1val1IRIREF;
break;
case 166:
this.$ = Parser._termResolver.resolve(unescapeString($$[$0], 1));
break;
case 168:

        if ($$[$0]) {
          this.$ = {  // t: 1val1iriStem, 1val1iriStemMinusiri3
            type: "StemRange",
            stem: $$[$0-1]
          };
          if ($$[$0].length)
            this.$["exclusions"] = $$[$0]; // t: 1val1iriStemMinusiri3
        } else {
          this.$ = $$[$0-1]; // t: 1val1IRIREF, 1AvalA
        }
      
break;
case 169:
this.$ = { type: "StemRange", stem: { type: "Wildcard" }, exclusions: $$[$0] } // t:1val1dotMinusiri3, 1val1dotMinusiriStem3;
break;
case 170:
this.$ = [] // t: 1val1iriStem, 1val1iriStemMinusiri3;
break;
case 171:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1val1iriStemMinusiri3;
break;
case 172: case 177:
this.$ = $$[$0] // t: 1val1iriStemMinusiri3;
break;
case 175:
this.$ = [$$[$0]] // t:1val1dotMinusiri3, 1val1dotMinusiriStem3;
break;
case 176:
this.$ = appendTo($$[$0-1], $$[$0]) // t:1val1dotMinusiri3, 1val1dotMinusiriStem3;
break;
case 178:
this.$ = { type: "Stem", stem: $$[$0-1] } // t: 1val1iriStemMinusiriStem3;
break;
case 179:
this.$ = { type: "Inclusion", "include": $$[$0] } // t: 2groupInclude1;
break;
case 180:
this.$ = { type: "Annotation", predicate: $$[$0-1], object: $$[$0] } // t: 1dotAnnotIRIREF;
break;
case 183:
this.$ = $$[$0].length ? { semActs: $$[$0] } : null; // t: 1dotCode1/2oneOfDot;
break;
case 184:
this.$ = [] // t: 1dot, 1dotCode1;
break;
case 185:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1dotCode1;
break;
case 186:
this.$ = unescapeSemanticAction($$[$0-1], $$[$0]) // t: 1dotCode1;
break;
case 187:
this.$ = { type: "SemAct", name: $$[$0-1] } // t: @@;
break;
case 188:
this.$ = { value: $$[$0] } // t: 1val1STRING_LITERAL1;
break;
case 189:
this.$ = { value: $$[$0-1], language: lowercase($$[$0].substr(1)) } // t: 1val1LANGTAG;
break;
case 190:
this.$ = { value: $$[$0-2], type: $$[$0] } // t: 1val1Datatype;
break;
case 192:
this.$ = { value: "true", type: XSD_BOOLEAN } // t: 1val1true;
break;
case 193:
this.$ = { value: "false", type: XSD_BOOLEAN } // t: 1val1false;
break;
case 195:
this.$ = RDF_TYPE // t: 1AvalA;
break;
case 201:
this.$ = createLiteral($$[$0], XSD_INTEGER) // t: 1val1INTEGER;
break;
case 202:
this.$ = createLiteral($$[$0], XSD_DECIMAL) // t: 1val1DECIMAL;
break;
case 203:
this.$ = createLiteral($$[$0], XSD_DOUBLE) // t: 1val1DOUBLE;
break;
case 204:
this.$ = unescapeString($$[$0], 1) // t: 1val1STRING_LITERAL1;
break;
case 205:
this.$ = unescapeString($$[$0], 3) // t: 1val1STRING_LITERAL_LONG1;
break;
case 206:
this.$ = unescapeString($$[$0], 1) // t: 1val1STRING_LITERAL2;
break;
case 207:
this.$ = unescapeString($$[$0], 3) // t: 1val1STRING_LITERAL_LONG2;
break;
case 208: case 211:
this.$ = this._base === null || absoluteIRI.test($$[$0].slice(1, -1)) ? ShExUtil.unescapeText($$[$0].slice(1,-1), {}) : _resolveIRI(ShExUtil.unescapeText($$[$0].slice(1,-1), {})) // t: 1dot;
break;
case 209: case 212:
 // t:1dotPNex, 1dotPNdefault, ShExParser-test.js/with pre-defined prefixes
        var namePos = $$[$0].indexOf(':');
        this.$ = expandPrefix($$[$0].substr(0, namePos)) + $$[$0].substr(namePos + 1);
    
break;
case 210: case 213:
 // t: 1dotNS2, 1dotNSdefault, ShExParser-test.js/PNAME_NS with pre-defined prefixes
        this.$ = expandPrefix($$[$0].substr(0, $$[$0].length - 1));
    
break;
case 214:

        this.$ = Parser._termResolver.resolve(unescapeString($$[$0], 1));
    
break;
case 216:
this.$ = $$[$0] // t: 1dotInherit1, 1dot3Inherit, 1dotInherit3;
break;
case 217:
this.$ = [$$[$0]] // t: 1dotInherit1, 1dot3Inherit, 1dotInherit3;
break;
case 218:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1dotInherit3;
break;
}
},
table: [o($V0,[2,2],{3:1,4:2}),{1:[3]},o($V0,[2,3],{5:3}),{6:4,7:[2,10],8:5,9:10,10:14,11:15,14:6,15:7,16:8,17:9,18:$V1,19:$V2,20:$V3,21:$V4,22:$V5,25:22,28:16,29:17,30:$V6,33:18,34:21,35:20,162:$V7,171:23,176:$V8,177:$V9},{7:[1,29]},o($V0,[2,4]),{7:[2,11]},o($V0,[2,12]),o($V0,[2,13]),o($V0,[2,14]),o($Va,[2,7],{12:30}),{19:[1,31]},{21:[1,32]},{19:$V2,21:$V4,23:33,25:34,26:[1,35],176:$V8},o($Va,[2,5]),o($Va,[2,6]),o($Va,[2,22]),o($Va,[2,23]),o($Va,[2,25],{34:36,162:$V7}),{31:[1,37]},o($Vb,$Vc,{36:38,32:39,38:41,41:42,48:43,55:44,58:46,59:47,72:51,74:52,75:53,76:54,65:55,160:62,77:64,101:65,79:70,83:71,84:72,90:74,92:75,19:$Vd,21:$Ve,26:$Vf,37:[1,40],56:$Vg,60:$Vh,62:$Vi,66:$Vj,67:$Vk,68:$Vl,70:$Vm,80:$Vn,81:$Vo,82:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,148:$VA,176:$VB}),o($V0,[2,26]),o($VC,[2,197]),o($VC,[2,198]),{19:$V2,21:$V4,25:85,176:$V8},o($VD,[2,208]),o($VD,[2,209]),o($VD,[2,210]),o([7,18,19,20,21,22,26,30,37,44,51,56,60,61,62,66,67,68,70,80,81,82,86,87,88,89,95,96,97,98,99,100,102,104,110,113,121,126,127,140,141,142,143,144,148,157,158,162,170,176,177],[2,215]),{1:[2,1]},{7:[2,9],8:87,10:88,13:86,15:7,16:8,17:9,18:$V1,19:$V2,20:$V3,21:$V4,22:$V5,25:22,28:16,29:17,30:$V6,35:20,171:23,176:$V8,177:$V9},o($V0,[2,15]),{19:[1,89]},o($V0,[2,17]),o($V0,[2,20]),o($VE,[2,18],{24:90}),o($V0,[2,27]),o($Vb,$Vc,{38:41,41:42,48:43,55:44,58:46,59:47,72:51,74:52,75:53,76:54,65:55,160:62,77:64,101:65,79:70,83:71,84:72,90:74,92:75,32:91,19:$Vd,21:$Ve,26:$Vf,56:$Vg,60:$Vh,62:$Vi,66:$Vj,67:$Vk,68:$Vl,70:$Vm,80:$Vn,81:$Vo,82:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,148:$VA,176:$VB}),o($Va,[2,30]),o($Va,[2,31]),o($Va,[2,32]),o($VF,[2,33]),o($VG,[2,37],{42:92}),o($VH,[2,45],{49:93}),o($VH,[2,51]),o($Vb,$Vc,{58:46,59:47,72:51,74:52,75:53,76:54,65:55,160:62,77:64,101:65,79:70,83:71,84:72,90:74,92:75,55:94,19:$Vd,21:$Ve,26:$Vf,60:$Vh,62:$Vi,66:$Vj,67:$Vk,68:$Vl,70:$Vm,80:$Vn,81:$Vo,82:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,148:$VA,176:$VB}),o($VH,[2,55],{65:55,101:65,59:95,66:$Vj,67:$Vk,68:$Vl,102:$Vc,110:$Vc,113:$Vc,157:$Vc}),o($VH,[2,57]),o($Vb,$Vc,{38:41,41:42,48:43,55:44,58:46,59:47,72:51,74:52,75:53,76:54,65:55,160:62,77:64,101:65,79:70,83:71,84:72,90:74,92:75,32:96,19:$Vd,21:$Ve,26:$Vf,56:$Vg,60:$Vh,62:$Vi,66:$Vj,67:$Vk,68:$Vl,70:$Vm,80:$Vn,81:$Vo,82:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,148:$VA,176:$VB}),o($VH,[2,59]),o($VI,$VJ,{71:97}),o($VK,[2,76],{84:72,73:98,79:99,86:$Vq,87:$Vr,88:$Vs,89:$Vt}),o($VI,$VJ,{71:100}),o($VI,$VJ,{71:101}),o($VK,[2,80],{79:70,83:71,84:72,90:74,92:75,77:102,86:$Vq,87:$Vr,88:$Vs,89:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz}),o($VH,[2,67]),o($VH,[2,68]),o($VH,[2,69]),{19:$V2,21:$V4,25:22,35:103,171:23,176:$V8,177:$V9},o($VL,[2,87]),o($VL,[2,88]),o($VL,[2,89]),o([7,18,19,20,21,22,27,30,44,51,61,62,66,67,68,85,86,87,88,89,93,94,95,96,97,98,99,100,102,104,110,113,121,126,127,140,141,142,143,148,157,158,162,168,169,172,173,174,175,176,177],[2,196]),o($VM,[2,163],{145:104}),o($VI,[2,85]),{102:[1,105],107:106,108:107,109:108,110:$VN,113:$VO,157:$VP},o($VQ,[2,211]),o($VQ,[2,212]),o($VQ,[2,213]),o($VQ,[2,214]),o($VI,[2,92]),o($VI,[2,93]),{85:[1,112]},o($VI,[2,95]),{85:[1,114],91:113,93:[1,115],94:[1,116]},{85:[1,117]},{85:[2,96]},{85:[2,97]},{85:[2,98]},o($VR,[2,104]),o($VR,[2,105]),o($VR,[2,106]),o($VR,[2,107]),{85:[2,108]},{85:[2,109]},{162:[1,119],163:[1,118]},o($Va,[2,8]),o($Va,[2,28]),o($Va,[2,29]),o($V0,[2,16]),{19:$V2,21:$V4,25:121,27:[1,120],176:$V8},o($Va,[2,24]),o($VF,[2,35],{43:122,44:[1,123]}),o($VG,[2,43],{50:124,51:[1,125]}),o($VH,[2,52]),o($VH,[2,56]),{61:[1,126]},o($VK,[2,75],{79:70,83:71,84:72,90:74,92:75,77:127,86:$Vq,87:$Vr,88:$Vs,89:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz}),o($VK,[2,77],{84:72,79:128,86:$Vq,87:$Vr,88:$Vs,89:$Vt}),o($VL,[2,90]),o($VK,[2,78],{79:70,83:71,84:72,90:74,92:75,77:127,86:$Vq,87:$Vr,88:$Vs,89:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz}),o($VK,[2,79],{79:70,83:71,84:72,90:74,92:75,77:127,86:$Vq,87:$Vr,88:$Vs,89:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz}),o($VI,[2,86]),o($VH,[2,70]),{19:$V2,21:$V4,25:134,27:[1,129],62:[1,135],85:$VS,93:$VT,94:$VU,146:130,147:131,148:[1,132],149:133,164:136,167:137,168:$VV,169:$VW,172:$VX,173:$VY,174:$VZ,175:$V_,176:$V8},{19:$Vd,21:$Ve,60:$V$,103:147,104:$V01,111:148,115:158,116:149,117:150,118:151,124:152,131:$V11,133:154,134:155,135:$V21,136:157,139:159,144:$V31,148:$VA,157:$V41,160:162,170:$V51,176:$VB},o($Vb,[2,115]),o($Vb,[2,111]),o($Vb,[2,112]),o($Vb,[2,113]),{19:$V2,21:$V4,25:22,35:166,171:23,176:$V8,177:$V9,178:165},{19:$Vd,21:$Ve,114:167,115:168,148:$VA,160:162,170:$V51,176:$VB},o($VI,[2,94]),o($VI,[2,99]),o($VI,[2,101]),o($VI,[2,102]),o($VI,[2,103]),o($VI,[2,100]),o($V61,[2,186]),o($V61,[2,187]),o($V0,[2,21]),o($VE,[2,19]),o($VG,[2,38]),o($Vb,$Vc,{48:43,55:44,58:46,59:47,72:51,74:52,75:53,76:54,65:55,160:62,77:64,101:65,79:70,83:71,84:72,90:74,92:75,41:169,19:$Vd,21:$Ve,26:$Vf,56:$Vg,60:$Vh,62:$Vi,66:$Vj,67:$Vk,68:$Vl,70:$Vm,80:$Vn,81:$Vo,82:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,148:$VA,176:$VB}),o($VH,[2,46]),o($Vb,$Vc,{55:44,58:46,59:47,72:51,74:52,75:53,76:54,65:55,160:62,77:64,101:65,79:70,83:71,84:72,90:74,92:75,48:170,19:$Vd,21:$Ve,26:$Vf,56:$Vg,60:$Vh,62:$Vi,66:$Vj,67:$Vk,68:$Vl,70:$Vm,80:$Vn,81:$Vo,82:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,148:$VA,176:$VB}),o($VH,[2,58]),o($VI,[2,82]),o($VL,[2,91]),o($VI,[2,162]),o($VM,[2,164]),o($VM,[2,165]),o($VM,[2,166]),o($VM,[2,167]),o($VM,[2,173],{150:171,154:172,155:[1,173]}),{151:174,153:175,156:$V71},o($V81,[2,188],{165:[1,177],166:[1,178]}),o($V81,[2,191]),o($V81,[2,192]),o($V81,[2,193]),o($V91,[2,204]),o($V91,[2,205]),o($V91,[2,206]),o($V91,[2,207]),o($V81,[2,201]),o($V81,[2,202]),o($V81,[2,203]),{104:[1,179]},{104:[2,117]},{104:[2,124]},{104:[2,125],119:180,120:181,121:$Va1},{104:[2,126]},o($Vb1,$Vc1,{125:183,128:186,130:187,126:$Vd1,127:$Ve1}),{19:$V2,21:$V4,25:189,132:188,171:190,176:$V8,177:$V9},o($Vf1,[2,147]),o($Vf1,[2,149]),o($Vf1,[2,150]),o($Vf1,[2,151]),o($Vb,$Vc,{72:51,74:52,75:53,76:54,160:62,77:64,79:70,83:71,84:72,90:74,92:75,39:191,40:192,45:193,52:194,57:195,58:197,63:198,69:201,101:205,19:$Vd,21:$Ve,26:$Vf,56:$Vg1,60:$Vh1,62:$Vi1,66:$Vj1,67:$Vk1,68:$Vl1,70:$Vm,80:$Vn,81:$Vo,82:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,148:$VA,176:$VB}),{19:$Vd,21:$Ve,115:206,148:$VA,160:162,170:$V51,176:$VB},{19:$Vd,21:$Ve,60:$V$,115:158,117:211,118:209,122:207,123:208,124:210,131:$V11,133:154,134:155,135:$V21,136:157,139:159,144:$V31,148:$VA,157:$V41,160:162,170:$V51,176:$VB},{19:$V2,21:$V4,25:189,132:212,171:190,176:$V8,177:$V9},o($Vm1,[2,194]),o($Vm1,[2,195]),o([19,21,148,170,176],[2,161]),o($Vb,[2,216],{25:22,171:23,35:213,19:$V2,21:$V4,176:$V8,177:$V9}),o($Vn1,[2,217]),o($Vb,[2,121],{160:162,115:214,19:$Vd,21:$Ve,148:$VA,170:$V51,176:$VB}),o($Vo1,[2,122]),o($VG,[2,36]),o($VH,[2,44]),o($VM,[2,168]),o($VM,[2,174]),o($Vp1,[2,170],{152:215}),o($VM,[2,169],{153:216,156:$V71}),o($Vp1,[2,175]),{19:$V2,21:$V4,25:217,176:$V8},o($V81,[2,189]),{19:$Vd,21:$Ve,74:218,148:$VA,160:62,176:$VB},o([7,18,19,20,21,22,30,44,51,61,158,162,176,177],$Vq1,{105:219}),o([61,104],[2,127],{120:220,121:$Va1}),o($Vb1,[2,129]),{19:$Vd,21:$Ve,60:$V$,115:158,117:221,124:152,131:$V11,133:154,134:155,135:$V21,136:157,139:159,144:$V31,148:$VA,157:$V41,160:162,170:$V51,176:$VB},o($Vb1,[2,133]),o($Vb1,[2,135],{133:154,134:155,136:157,115:158,139:159,160:162,124:222,19:$Vd,21:$Ve,60:$V$,131:$V11,135:$V21,144:$V31,148:$VA,157:$V41,170:$V51,176:$VB}),o($Vb1,[2,136],{133:154,134:155,136:157,115:158,139:159,160:162,124:223,19:$Vd,21:$Ve,60:$V$,131:$V11,135:$V21,144:$V31,148:$VA,157:$V41,170:$V51,176:$VB}),o($Vb1,$Vr1,{129:224,130:225,126:$Vs1,127:$Vt1}),o($Vf1,[2,144]),{19:$Vd,21:$Ve,60:$V$,115:158,133:228,134:229,139:159,144:$V31,148:$VA,160:162,170:$V51,176:$VB},o($Vu1,[2,199]),o($Vu1,[2,200]),o($Vv1,$Vw1,{137:230,138:231,140:$Vx1,141:$Vy1,142:$Vz1,143:$VA1}),o($VB1,[2,34]),o($VC1,[2,41],{46:236}),o($VD1,[2,49],{53:237}),o($VD1,[2,53]),o($Vb,$Vc,{72:51,74:52,75:53,76:54,160:62,77:64,79:70,83:71,84:72,90:74,92:75,58:197,63:198,69:201,101:205,57:238,19:$Vd,21:$Ve,26:$Vf,60:$Vh1,62:$Vi1,66:$Vj1,67:$Vk1,68:$Vl1,70:$Vm,80:$Vn,81:$Vo,82:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,148:$VA,176:$VB}),o($VD1,[2,60],{69:201,101:205,63:239,66:$Vj1,67:$Vk1,68:$Vl1,102:$Vc,110:$Vc,113:$Vc,157:$Vc}),o($VD1,[2,65],{72:51,74:52,75:53,76:54,160:62,77:64,79:70,83:71,84:72,90:74,92:75,64:240,58:241,19:$Vd,21:$Ve,26:$Vf,70:$Vm,80:$Vn,81:$Vo,82:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,148:$VA,176:$VB}),o($Vb,$Vc,{38:41,41:42,48:43,55:44,58:46,59:47,72:51,74:52,75:53,76:54,65:55,160:62,77:64,101:65,79:70,83:71,84:72,90:74,92:75,32:242,19:$Vd,21:$Ve,26:$Vf,56:$Vg,60:$Vh,62:$Vi,66:$Vj,67:$Vk,68:$Vl,70:$Vm,80:$Vn,81:$Vo,82:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,148:$VA,176:$VB}),o($VD1,[2,64]),o($VE1,[2,71]),o($VE1,[2,72]),o($VE1,[2,73]),{19:$V2,21:$V4,25:22,35:243,171:23,176:$V8,177:$V9},{102:[1,244],107:106,108:107,109:108,110:$VN,113:$VO,157:$VP},o($Vb,$Vc,{72:51,74:52,75:53,76:54,160:62,77:64,79:70,83:71,84:72,90:74,92:75,40:192,45:193,52:194,57:195,58:197,63:198,69:201,101:205,39:245,19:$Vd,21:$Ve,26:$Vf,56:$Vg1,60:$Vh1,62:$Vi1,66:$Vj1,67:$Vk1,68:$Vl1,70:$Vm,80:$Vn,81:$Vo,82:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,148:$VA,176:$VB}),{61:[1,246]},{61:[2,131]},{61:[2,132]},{121:$Vc1,125:183,126:$Vd1,127:$Ve1,128:247,130:187},{119:180,120:181,121:$Va1},o($Vf1,[2,179]),o($Vn1,[2,218]),o($Vo1,[2,123]),o($VM,[2,172],{153:248,156:$V71}),o($Vp1,[2,176]),o($Vp1,[2,177],{155:[1,249]}),o($V81,[2,190]),o([7,18,19,20,21,22,30,44,51,61,162,176,177],$VF1,{106:250,112:251,161:252,158:$VG1}),o($Vb1,[2,130]),o($Vb1,[2,128]),o($Vf1,[2,142]),o($Vf1,[2,143]),o($Vb1,$VH1),o($Vf1,[2,145]),o($Vb1,[2,139],{133:154,134:155,136:157,115:158,139:159,160:162,124:222,19:$Vd,21:$Ve,60:$V$,131:$V11,135:$V21,144:$V31,148:$VA,157:$V41,170:$V51,176:$VB}),o($Vb1,[2,140],{133:154,134:155,136:157,115:158,139:159,160:162,124:223,19:$Vd,21:$Ve,60:$V$,131:$V11,135:$V21,144:$V31,148:$VA,157:$V41,170:$V51,176:$VB}),o($Vf1,[2,146]),o($Vf1,[2,148]),o($Vv1,$Vq1,{105:254}),o($Vv1,[2,154]),o($Vv1,[2,157]),o($Vv1,[2,158]),o($Vv1,[2,159]),o($Vv1,[2,160]),o($VB1,[2,39],{47:255,44:[1,256]}),o($VC1,[2,47],{54:257,51:[1,258]}),o($VD1,[2,54]),o($VD1,[2,61]),o($VD1,[2,62]),o($VD1,[2,66]),{61:[1,259]},o($VE1,[2,74]),{19:$Vd,21:$Ve,60:$V$,103:260,104:$V01,111:148,115:158,116:149,117:150,118:151,124:152,131:$V11,133:154,134:155,135:$V21,136:157,139:159,144:$V31,148:$VA,157:$V41,160:162,170:$V51,176:$VB},o($Vv1,$Vw1,{138:231,137:261,140:$Vx1,141:$Vy1,142:$Vz1,143:$VA1}),o($Vv1,$Vw1,{138:231,137:262,140:$Vx1,141:$Vy1,142:$Vz1,143:$VA1}),o([61,121],$Vr1,{130:225,129:263,126:$Vs1,127:$Vt1}),o($Vp1,[2,171]),o($Vp1,[2,178]),o($VH,[2,110]),o($VI1,[2,119]),o([7,18,19,20,21,22,30,44,51,61,104,121,126,127,176,177],[2,183],{34:264,162:$V7}),{19:$Vd,21:$Ve,115:265,148:$VA,160:162,170:$V51,176:$VB},o($VJ1,$VF1,{112:251,161:252,106:266,158:$VG1}),o($VC1,[2,42]),o($Vb,$Vc,{72:51,74:52,75:53,76:54,160:62,77:64,79:70,83:71,84:72,90:74,92:75,52:194,57:195,58:197,63:198,69:201,101:205,45:267,19:$Vd,21:$Ve,26:$Vf,56:$Vg1,60:$Vh1,62:$Vi1,66:$Vj1,67:$Vk1,68:$Vl1,70:$Vm,80:$Vn,81:$Vo,82:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,148:$VA,176:$VB}),o($VD1,[2,50]),o($Vb,$Vc,{72:51,74:52,75:53,76:54,160:62,77:64,79:70,83:71,84:72,90:74,92:75,57:195,58:197,63:198,69:201,101:205,52:268,19:$Vd,21:$Ve,26:$Vf,56:$Vg1,60:$Vh1,62:$Vi1,66:$Vj1,67:$Vk1,68:$Vl1,70:$Vm,80:$Vn,81:$Vo,82:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,148:$VA,176:$VB}),o($VD1,[2,63]),{104:[1,269]},o($Vv1,$Vq1,{105:270}),o($Vv1,$Vq1,{105:271}),{61:[2,141],121:$VH1},o($V61,[2,185]),{19:$Vd,21:$Ve,85:$VS,93:$VT,94:$VU,148:$VA,149:274,159:272,160:273,164:136,167:137,168:$VV,169:$VW,172:$VX,173:$VY,174:$VZ,175:$V_,176:$VB},o($Vf1,[2,155]),o($VC1,[2,40]),o($VD1,[2,48]),o($VE1,[2,120]),o($VJ1,$VF1,{112:251,161:252,106:275,158:$VG1}),o($VJ1,$VF1,{112:251,161:252,106:276,158:$VG1}),o($VI1,[2,180]),o($VI1,[2,181]),o($VI1,[2,182]),o($Vf1,[2,156]),o($Vf1,[2,152])],
defaultActions: {6:[2,11],29:[2,1],76:[2,96],77:[2,97],78:[2,98],83:[2,108],84:[2,109],148:[2,117],149:[2,124],151:[2,126],208:[2,131],209:[2,132]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = new Error();

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  /*
    ShEx parser in the Jison parser generator format.
  */

  var ShExUtil = require("./ShExUtil");

  // Common namespaces and entities
  var RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
      RDF_TYPE  = RDF + 'type',
      RDF_FIRST = RDF + 'first',
      RDF_REST  = RDF + 'rest',
      RDF_NIL   = RDF + 'nil',
      XSD = 'http://www.w3.org/2001/XMLSchema#',
      XSD_INTEGER  = XSD + 'integer',
      XSD_DECIMAL  = XSD + 'decimal',
      XSD_FLOAT   = XSD + 'float',
      XSD_DOUBLE   = XSD + 'double',
      XSD_BOOLEAN  = XSD + 'boolean',
      XSD_TRUE =  '"true"^^'  + XSD_BOOLEAN,
      XSD_FALSE = '"false"^^' + XSD_BOOLEAN,
      XSD_PATTERN        = XSD + 'pattern',
      XSD_MININCLUSIVE   = XSD + 'minInclusive',
      XSD_MINEXCLUSIVE   = XSD + 'minExclusive',
      XSD_MAXINCLUSIVE   = XSD + 'maxInclusive',
      XSD_MAXEXCLUSIVE   = XSD + 'maxExclusive',
      XSD_LENGTH         = XSD + 'length',
      XSD_MINLENGTH      = XSD + 'minLength',
      XSD_MAXLENGTH      = XSD + 'maxLength',
      XSD_TOTALDIGITS    = XSD + 'totalDigits',
      XSD_FRACTIONDIGITS = XSD + 'fractionDigits';

  var numericDatatypes = [
      XSD + "integer",
      XSD + "decimal",
      XSD + "float",
      XSD + "double",
      XSD + "string",
      XSD + "boolean",
      XSD + "dateTime",
      XSD + "nonPositiveInteger",
      XSD + "negativeInteger",
      XSD + "long",
      XSD + "int",
      XSD + "short",
      XSD + "byte",
      XSD + "nonNegativeInteger",
      XSD + "unsignedLong",
      XSD + "unsignedInt",
      XSD + "unsignedShort",
      XSD + "unsignedByte",
      XSD + "positiveInteger"
  ];

  var absoluteIRI = /^[a-z][a-z0-9+.-]*:/i,
    schemeAuthority = /^(?:([a-z][a-z0-9+.-]*:))?(?:\/\/[^\/]*)?/i,
    dotSegments = /(?:^|\/)\.\.?(?:$|[\/#?])/;

  var numericFacets = ["mininclusive", "minexclusive",
                       "maxinclusive", "maxexclusive"];

  // Returns a lowercase version of the given string
  function lowercase(string) {
    return string.toLowerCase();
  }

  // Appends the item to the array and returns the array
  function appendTo(array, item) {
    return array.push(item), array;
  }

  // Appends the items to the array and returns the array
  function appendAllTo(array, items) {
    return array.push.apply(array, items), array;
  }

  // Extends a base object with properties of other objects
  function extend(base) {
    if (!base) base = {};
    for (var i = 1, l = arguments.length, arg; i < l && (arg = arguments[i] || {}); i++)
      for (var name in arg)
        base[name] = arg[name];
    return base;
  }

  // Creates an array that contains all items of the given arrays
  function unionAll() {
    var union = [];
    for (var i = 0, l = arguments.length; i < l; i++)
      union = union.concat.apply(union, arguments[i]);
    return union;
  }

  // N3.js:lib/N3Parser.js<0.4.5>:58 with
  //   s/this\./Parser./g
  // ### `_setBase` sets the base IRI to resolve relative IRIs.
  Parser._setBase = function (baseIRI) {
    if (!baseIRI)
      baseIRI = null;

    // baseIRI '#' check disabled to allow -x 'data:text/shex,...#'
    // else if (baseIRI.indexOf('#') >= 0)
    //   throw new Error('Invalid base IRI ' + baseIRI);

    // Set base IRI and its components
    if (Parser._base = baseIRI) {
      Parser._basePath   = baseIRI.replace(/[^\/?]*(?:\?.*)?$/, '');
      baseIRI = baseIRI.match(schemeAuthority);
      Parser._baseRoot   = baseIRI[0];
      Parser._baseScheme = baseIRI[1];
    }
  }

  // N3.js:lib/N3Parser.js<0.4.5>:576 with
  //   s/this\./Parser./g
  //   s/token/iri/
  // ### `_resolveIRI` resolves a relative IRI token against the base path,
  // assuming that a base path has been set and that the IRI is indeed relative.
  function _resolveIRI (iri) {
    switch (iri[0]) {
    // An empty relative IRI indicates the base IRI
    case undefined: return Parser._base;
    // Resolve relative fragment IRIs against the base IRI
    case '#': return Parser._base + iri;
    // Resolve relative query string IRIs by replacing the query string
    case '?': return Parser._base.replace(/(?:\?.*)?$/, iri);
    // Resolve root-relative IRIs at the root of the base IRI
    case '/':
      // Resolve scheme-relative IRIs to the scheme
      return (iri[1] === '/' ? Parser._baseScheme : Parser._baseRoot) + _removeDotSegments(iri);
    // Resolve all other IRIs at the base IRI's path
    default: {
      return _removeDotSegments(Parser._basePath + iri);
    }
    }
  }

  // ### `_removeDotSegments` resolves './' and '../' path segments in an IRI as per RFC3986.
  function _removeDotSegments (iri) {
    // Don't modify the IRI if it does not contain any dot segments
    if (!dotSegments.test(iri))
      return iri;

    // Start with an imaginary slash before the IRI in order to resolve trailing './' and '../'
    var result = '', length = iri.length, i = -1, pathStart = -1, segmentStart = 0, next = '/';

    while (i < length) {
      switch (next) {
      // The path starts with the first slash after the authority
      case ':':
        if (pathStart < 0) {
          // Skip two slashes before the authority
          if (iri[++i] === '/' && iri[++i] === '/')
            // Skip to slash after the authority
            while ((pathStart = i + 1) < length && iri[pathStart] !== '/')
              i = pathStart;
        }
        break;
      // Don't modify a query string or fragment
      case '?':
      case '#':
        i = length;
        break;
      // Handle '/.' or '/..' path segments
      case '/':
        if (iri[i + 1] === '.') {
          next = iri[++i + 1];
          switch (next) {
          // Remove a '/.' segment
          case '/':
            result += iri.substring(segmentStart, i - 1);
            segmentStart = i + 1;
            break;
          // Remove a trailing '/.' segment
          case undefined:
          case '?':
          case '#':
            return result + iri.substring(segmentStart, i) + iri.substr(i + 1);
          // Remove a '/..' segment
          case '.':
            next = iri[++i + 1];
            if (next === undefined || next === '/' || next === '?' || next === '#') {
              result += iri.substring(segmentStart, i - 2);
              // Try to remove the parent path from result
              if ((segmentStart = result.lastIndexOf('/')) >= pathStart)
                result = result.substr(0, segmentStart);
              // Remove a trailing '/..' segment
              if (next !== '/')
                return result + '/' + iri.substr(i + 1);
              segmentStart = i + 1;
            }
          }
        }
      }
      next = iri[++i];
    }
    return result + iri.substring(segmentStart);
  }

  Parser._setTermResolver = function (res) {
    Parser._termResolver = res;
  }

  // Creates an expression with the given type and attributes
  function expression(expr, attr) {
    var expression = { expression: expr };
    if (attr)
      for (var a in attr)
        expression[a] = attr[a];
    return expression;
  }

  // Creates a path with the given type and items
  function path(type, items) {
    return { type: 'path', pathType: type, items: items };
  }

  // Creates a literal with the given value and type
  function createLiteral(value, type) {
    return { value: value, type: type };
  }

  // Creates a new blank node identifier
  function blank() {
    return '_:b' + blankId++;
  };
  var blankId = 0;
  Parser._resetBlanks = function () { blankId = 0; }
  Parser.reset = function () {
    Parser._prefixes = Parser._termResolver = Parser.valueExprDefns = Parser.shapes = Parser.productions = Parser.start = Parser.startActs = null; // Reset state.
    Parser._base = Parser._baseIRI = Parser._baseIRIPath = Parser._baseIRIRoot = null;
  }
  var _fileName; // for debugging
  Parser._setFileName = function (fn) { _fileName = fn; }

  // Regular expression and replacement strings to escape strings
  var stringEscapeReplacements = { '\\': '\\', "'": "'", '"': '"',
                                   't': '\t', 'b': '\b', 'n': '\n', 'r': '\r', 'f': '\f' },
      semactEscapeReplacements = { '\\': '\\', '%': '%' };

  // Translates string escape codes in the string into their textual equivalent
  function unescapeString(string, trimLength) {
    string = string.substring(trimLength, string.length - trimLength);
    return ShExUtil.unescapeText(string, stringEscapeReplacements);
  }

  // Translates regular expression escape codes in the string into their textual equivalent
  function unescapeRegexp (regexp) {
    var end = regexp.lastIndexOf("/");
    var s = regexp.substr(1, end-1);
    var regexpEscapeReplacements = {
      '.': "\\.", '\\': "\\\\", '?': "\\?", '*': "\\*", '+': "\\+",
      '{': "\\{", '}': "\\}", '(': "\\(", ')': "\\)", '|': "\\|",
      '^': "\\^", '$': "\\$", '[': "\\[", ']': "\\]", '/': "\\/",
      't': '\\t', 'n': '\\n', 'r': '\\r', '-': "\\-", '/': '/'
    };
    s = ShExUtil.unescapeText(s, regexpEscapeReplacements)
    var ret = {
      pattern: s
    };
    if (regexp.length > end+1)
      ret.flags = regexp.substr(end+1);
    return ret;
  }

  // Convenience function to return object with p1 key, value p2
  function keyValObject(key, val) {
    var ret = {};
    ret[key] = val;
    return ret;
  }

  // Return object with p1 key, p2 string value
  function unescapeSemanticAction(key, string) {
    string = string.substring(1, string.length - 2);
    return {
      type: "SemAct",
      name: key,
      code: ShExUtil.unescapeText(string, semactEscapeReplacements)
    };
  }

  function error (msg) {
    Parser.reset();
    throw new Error(msg);
  }

  // Expand declared prefix or throw Error
  function expandPrefix (prefix) {
    if (!(prefix in Parser._prefixes))
      error('Parse error; unknown prefix: ' + prefix);
    return Parser._prefixes[prefix];
  }

  // Add a shape to the map
  function addShape (label, shape) {
    if (Parser.productions && label in Parser.productions)
      error("Structural error: "+label+" is a shape");
    if (!Parser.shapes)
      Parser.shapes = {};
    if (label in Parser.shapes) {
      if (Parser.options.duplicateShape === "replace")
        Parser.shapes[label] = shape;
      else if (Parser.options.duplicateShape !== "ignore")
        error("Parse error: "+label+" already defined");
    } else
      Parser.shapes[label] = shape;
  }

  // Add a production to the map
  function addProduction (label, production) {
    if (Parser.shapes && label in Parser.shapes)
      error("Structural error: "+label+" is a shape");
    if (!Parser.productions)
      Parser.productions = {};
    if (label in Parser.productions) {
      if (Parser.options.duplicateShape === "replace")
        Parser.productions[label] = production;
      else if (Parser.options.duplicateShape !== "ignore")
        error("Parse error: "+label+" already defined");
    } else
      Parser.productions[label] = production;
  }

  function shapeJunction (type, container, elts) {
    if (elts.length === 0) {
      return container;
    } else if (container.type === type) {
      container.shapeExprs = container.shapeExprs.concat(elts);
      return container;
    } else {
      return { type: type, shapeExprs: [container].concat(elts) };
    }
  }

  var EmptyObject = {  };
  var EmptyShape = { type: "Shape" };
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/**/
break;
case 1:return 66;
break;
case 2:return 67;
break;
case 3:return 165;
break;
case 4:return 68;
break;
case 5:return 176;
break;
case 6:return 143;
break;
case 7:return 94;
break;
case 8:return 93;
break;
case 9:return 85;
break;
case 10:return 'ANON';
break;
case 11:return 19;
break;
case 12:return 21;
break;
case 13:return 170;
break;
case 14:return 86;
break;
case 15:return 177;
break;
case 16:return 163;
break;
case 17:return 173;
break;
case 18:return 175;
break;
case 19:return 172;
break;
case 20:return 174;
break;
case 21:return 148;
break;
case 22:return 18;
break;
case 23:return 20;
break;
case 24:return 22;
break;
case 25:return 30;
break;
case 26:return 37;
break;
case 27:return 'IT_VIRTUAL';
break;
case 28:return 110;
break;
case 29:return 113;
break;
case 30:return 70;
break;
case 31:return 81;
break;
case 32:return 80;
break;
case 33:return 82;
break;
case 34:return 51;
break;
case 35:return 44;
break;
case 36:return 56;
break;
case 37:return 95;
break;
case 38:return 96;
break;
case 39:return 97;
break;
case 40:return 98;
break;
case 41:return 87;
break;
case 42:return 88;
break;
case 43:return 89;
break;
case 44:return 99;
break;
case 45:return 100;
break;
case 46:return 31;
break;
case 47:return 158;
break;
case 48:return 102;
break;
case 49:return 104;
break;
case 50:return 157;
break;
case 51:return '||';
break;
case 52:return 121;
break;
case 53:return 126;
break;
case 54:return 60;
break;
case 55:return 61;
break;
case 56:return 26;
break;
case 57:return 27;
break;
case 58:return 131;
break;
case 59:return '!';
break;
case 60:return 166;
break;
case 61:return 144;
break;
case 62:return 62;
break;
case 63:return 155;
break;
case 64:return 127;
break;
case 65:return 140;
break;
case 66:return 141;
break;
case 67:return 142;
break;
case 68:return 156;
break;
case 69:return 162;
break;
case 70:return 168;
break;
case 71:return 169;
break;
case 72:return 7;
break;
case 73:return 'invalid character '+yy_.yytext;
break;
}
},
rules: [/^(?:\s+|(#[^\u000a\u000d]*))/,/^(?:(@((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:)(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|:|[0-9]|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))*(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%)))))?)))/,/^(?:(@(([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:))/,/^(?:(@([A-Za-z])+((-([0-9A-Za-z])+))*))/,/^(?:@)/,/^(?:(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:)(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|:|[0-9]|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))*(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%)))))?)))/,/^(?:(\{((([+-])?([0-9])+))((,(((([+-])?([0-9])+))|\*)?))?\}))/,/^(?:(([+-])?((([0-9])+\.([0-9])*(([Ee]([+-])?([0-9])+)))|((\.)?([0-9])+(([Ee]([+-])?([0-9])+))))))/,/^(?:(([+-])?([0-9])*\.([0-9])+))/,/^(?:(([+-])?([0-9])+))/,/^(?:{ANON})/,/^(?:(<([^\u0000-\u0020<>\"{}|^`\\]|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*>))/,/^(?:((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:))/,/^(?:a\b)/,/^(?:(\/([^\u002f\u005C\u000A\u000D]|\\[nrt\\|.?*+(){}$\u002D\u005B\u005D\u005E\/]|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))+\/[smix]*))/,/^(?:(_:((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|[0-9])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?))/,/^(?:(\{([^%\\]|\\[%\\]|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*%\}))/,/^(?:('''(('|'')?([^\'\\]|(\\[\"\'\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*'''))/,/^(?:("""(("|"")?([^\"\\]|(\\[\"\'\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*"""))/,/^(?:('([^\u0027\u005c\u000a\u000d]|(\\[\"\'\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*'))/,/^(?:("([^\u0022\u005c\u000a\u000d]|(\\[\"\'\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*"))/,/^(?:(`([^\u0060\u005c\u000a\u000d]|(\\[\"\'\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*`))/,/^(?:([Bb][Aa][Ss][Ee]))/,/^(?:([Pp][Rr][Ee][Ff][Ii][Xx]))/,/^(?:([Ll][Aa][Bb][Ee][Ll]))/,/^(?:([sS][tT][aA][rR][tT]))/,/^(?:([eE][xX][tT][eE][rR][nN][aA][lL]))/,/^(?:([Vv][Ii][Rr][Tt][Uu][Aa][Ll]))/,/^(?:([Cc][Ll][Oo][Ss][Ee][Dd]))/,/^(?:([Ee][Xx][Tt][Rr][Aa]))/,/^(?:([Ll][Ii][Tt][Ee][Rr][Aa][Ll]))/,/^(?:([Bb][Nn][Oo][Dd][Ee]))/,/^(?:([Ii][Rr][Ii]))/,/^(?:([Nn][Oo][Nn][Ll][Ii][Tt][Ee][Rr][Aa][Ll]))/,/^(?:([Aa][Nn][Dd]))/,/^(?:([Oo][Rr]))/,/^(?:([No][Oo][Tt]))/,/^(?:([Mm][Ii][Nn][Ii][Nn][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Mm][Ii][Nn][Ee][Xx][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Mm][Aa][Xx][Ii][Nn][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Mm][Aa][Xx][Ee][Xx][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Ll][Ee][Nn][Gg][Tt][Hh]))/,/^(?:([Mm][Ii][Nn][Ll][Ee][Nn][Gg][Tt][Hh]))/,/^(?:([Mm][Aa][Xx][Ll][Ee][Nn][Gg][Tt][Hh]))/,/^(?:([Tt][Oo][Tt][Aa][Ll][Dd][Ii][Gg][Ii][Tt][Ss]))/,/^(?:([Ff][Rr][Aa][Cc][Tt][Ii][Oo][Nn][Dd][Ii][Gg][Ii][Tt][Ss]))/,/^(?:=)/,/^(?:\/\/)/,/^(?:\{)/,/^(?:\})/,/^(?:&)/,/^(?:\|\|)/,/^(?:\|)/,/^(?:,)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\$)/,/^(?:!)/,/^(?:\^\^)/,/^(?:\^)/,/^(?:\.)/,/^(?:~)/,/^(?:;)/,/^(?:\*)/,/^(?:\+)/,/^(?:\?)/,/^(?:-)/,/^(?:%)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = ShExJison;
exports.Parser = ShExJison.Parser;
exports.parse = function () { return ShExJison.parse.apply(ShExJison, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}