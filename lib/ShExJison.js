/* parser generated by jison 0.4.16 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ShExJison = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[7,17,18,19,20,23,166,167,168],$V1=[1,10],$V2=[1,23],$V3=[1,11],$V4=[1,25],$V5=[1,17],$V6=[1,24],$V7=[1,26],$V8=[1,22],$V9=[7,17,18,19,20,23,166,167],$Va=[48,54,56,152],$Vb=[2,45],$Vc=[1,40],$Vd=[1,41],$Ve=[1,48],$Vf=[1,42],$Vg=[1,49],$Vh=[1,50],$Vi=[1,51],$Vj=[1,52],$Vk=[1,62],$Vl=[1,63],$Vm=[1,64],$Vn=[1,65],$Vo=[1,66],$Vp=[1,59],$Vq=[1,54],$Vr=[1,55],$Vs=[1,56],$Vt=[7,17,18,19,20,23,33,38,42,44,45,48,50,54,56,63,68,69,75,79,97,104,106,107,108,112,114,115,116,117,132,149,150,151,152,154,157,158,159,160,166,167,168],$Vu=[7,17,18,19,20,23,24,33,38,42,44,45,48,50,54,56,63,68,69,75,79,84,85,86,97,104,106,107,108,111,112,114,115,116,117,121,122,124,125,126,127,128,129,131,132,134,144,147,148,149,150,151,152,154,156,157,158,159,160,162,163,164,165,166,167,168,169],$Vv=[2,171],$Vw=[7,17,18,19,20,23,50,63,68,69,79,154,157,158,159,160,166,167,168],$Vx=[7,17,18,19,20,23,38,50,63,68,69,79,154,157,158,159,160,166,167,168],$Vy=[7,17,18,19,20,23,38,42,50,63,68,69,79,154,157,158,159,160,166,167,168],$Vz=[7,17,18,19,20,23,38,42,50,63,68,69,79,112,114,115,116,117,124,125,126,127,128,129,154,157,158,159,160,166,167,168],$VA=[2,110],$VB=[7,17,18,19,20,23,38,42,48,50,54,56,63,68,69,79,112,114,115,116,117,149,150,151,152,154,157,158,159,160,166,167,168],$VC=[18,20,104,111,121,122,134,147,148,162,163,164,165,166],$VD=[1,97],$VE=[1,98],$VF=[1,99],$VG=[1,100],$VH=[1,115],$VI=[1,116],$VJ=[1,117],$VK=[1,118],$VL=[1,119],$VM=[1,120],$VN=[1,133],$VO=[1,134],$VP=[1,135],$VQ=[1,131],$VR=[1,132],$VS=[1,156],$VT=[1,150],$VU=[1,149],$VV=[1,157],$VW=[1,158],$VX=[1,155],$VY=[1,152],$VZ=[1,154],$V_=[1,146],$V$=[7,17,18,19,20,23,38,42,48,50,54,56,63,68,69,79,112,114,115,116,117,124,125,126,127,128,129,149,150,151,152,154,157,158,159,160,166,167,168],$V01=[7,17,18,19,20,23,38,42,48,50,54,56,63,68,69,79,104,111,112,114,115,116,117,121,122,123,124,125,126,127,128,129,134,145,147,148,149,150,151,152,154,157,158,159,160,162,163,164,165,166,167,168],$V11=[7,17,18,19,20,23,50,63,68,69,79,166,167,168],$V21=[111,121,122,162,163,164,165],$V31=[1,176],$V41=[18,20,50,63,68,69,79,104,111,121,122,134,147,148,154,162,163,164,165,166,168],$V51=[1,182],$V61=[50,63,79],$V71=[2,61],$V81=[1,184],$V91=[1,185],$Va1=[2,85],$Vb1=[50,63,68,69,79],$Vc1=[18,20,44,45,48,54,56,75,97,104,106,107,108,111,112,114,115,116,117,121,122,132,147,148,149,150,151,152,156,162,163,164,165,166],$Vd1=[18,20,156,166],$Ve1=[18,20,48,54,56,152,166,167],$Vf1=[18,20,48,54,56,152,156,166],$Vg1=[18,20,104,111,121,122,134,144,147,148,162,163,164,165,166],$Vh1=[2,65],$Vi1=[1,223],$Vj1=[1,224],$Vk1=[18,20,24,44,50,63,68,69,75,79,84,85,86,131,156,166],$Vl1=[50,63,68,69,79,154,168],$Vm1=[2,95],$Vn1=[1,227],$Vo1=[1,228],$Vp1=[1,229],$Vq1=[1,230],$Vr1=[88,89,170],$Vs1=[2,64],$Vt1=[2,97],$Vu1=[50,63,68,69,79,168],$Vv1=[1,254],$Vw1=[68,79],$Vx1=[24,50,63,68,69,79,84,85,86];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"shexDoc":3,"initParser":4,"Qdirective_E_Star":5,"Q_O_QnotStartAction_E_Or_QstartActions_E_S_Qstatement_E_Star_C_E_Opt":6,"EOF":7,"directive":8,"O_QnotStartAction_E_Or_QstartActions_E_C":9,"notStartAction":10,"startActions":11,"Qstatement_E_Star":12,"statement":13,"O_QnotStartAction_E_Or_QstartActions_E_S_Qstatement_E_Star_C":14,"baseDecl":15,"prefixDecl":16,"IT_BASE":17,"IRIREF":18,"IT_PREFIX":19,"PNAME_NS":20,"start":21,"shape":22,"IT_start":23,"=":24,"shapeExpression":25,"semanticActions":26,"QcodeDecl_E_Plus":27,"codeDecl":28,"shapeLabel":29,"O_QstringFacet_E_Star_S_QshapeExpression_E_Or_QIT_EXTERNAL_E_C":30,"QstringFacet_E_Star":31,"stringFacet":32,"IT_EXTERNAL":33,"shapeOr":34,"shapeAnd":35,"Q_O_QIT_OR_E_S_QshapeAnd_E_C_E_Star":36,"O_QIT_OR_E_S_QshapeAnd_E_C":37,"IT_OR":38,"shapeNot":39,"Q_O_QIT_AND_E_S_QshapeNot_E_C_E_Star":40,"O_QIT_AND_E_S_QshapeNot_E_C":41,"IT_AND":42,"shapeAtom":43,"!":44,"IT_NOT":45,"shapeDefinition":46,"Q_O_QincludeSet_E_Or_QextraPropertySet_E_Or_QIT_CLOSED_E_C_E_Star":47,"{":48,"QsomeOfShape_E_Opt":49,"}":50,"O_QincludeSet_E_Or_QextraPropertySet_E_Or_QIT_CLOSED_E_C":51,"includeSet":52,"extraPropertySet":53,"IT_CLOSED":54,"someOfShape":55,"IT_EXTRA":56,"Qpredicate_E_Plus":57,"predicate":58,"groupShape":59,"multiElementSomeOf":60,"Q_O_QGT_PIPE_E_S_QgroupShape_E_C_E_Plus":61,"O_QGT_PIPE_E_S_QgroupShape_E_C":62,"|":63,"innerShape":64,"multiElementGroup":65,"unaryShape":66,"groupShape_right":67,",":68,";":69,"Q_O_QGT_COMMA_E_S_QunaryShape_E_C_E_Plus":70,"QGT_COMMA_E_Opt":71,"O_QGT_COMMA_E_S_QunaryShape_E_C":72,"valueConstraint":73,"IT_UNIQUE":74,"(":75,"Q_O_QIT_FOCUS_E_S_QGT_COMMA_E_C_E_Opt":76,"accessor":77,"Q_O_QGT_COMMA_E_S_Qaccessor_E_C_E_Star":78,")":79,"O_QGT_LT_E_Or_QGT_EQUAL_E_Or_QGT_NEQUAL_E_Or_QGT_GT_E_C":80,"O_QIT_FOCUS_E_S_QGT_COMMA_E_C":81,"IT_FOCUS":82,"O_QGT_COMMA_E_S_Qaccessor_E_C":83,"<":84,"!=":85,">":86,"productionLabel":87,"IT_LANGTAG":88,"IT_DATATYPE":89,"tripleConstraint":90,"encapsulatedShape":91,"include":92,"Qcardinality_E_Opt":93,"Qannotation_E_Star":94,"cardinality":95,"annotation":96,"IT_LITERAL":97,"QxsFacet_E_Star":98,"nonLiteralKind":99,"QstringFacet_E_Plus":100,"shapeOrRef":101,"datatype":102,"valueSet":103,".":104,"xsFacet":105,"IT_IRI":106,"IT_BNODE":107,"IT_NONLITERAL":108,"numericFacet":109,"stringLength":110,"INTEGER":111,"IT_PATTERN":112,"string":113,"~":114,"IT_LENGTH":115,"IT_MINLENGTH":116,"IT_MAXLENGTH":117,"numericRange":118,"rawNumeric":119,"numericLength":120,"DECIMAL":121,"DOUBLE":122,"^^":123,"IT_MININCLUSIVE":124,"IT_MINEXCLUSIVE":125,"IT_MAXINCLUSIVE":126,"IT_MAXEXCLUSIVE":127,"IT_TOTALDIGITS":128,"IT_FRACTIONDIGITS":129,"senseFlags":130,"^":131,"[":132,"QvalueSetValue_E_Star":133,"]":134,"valueSetValue":135,"iriRange":136,"literal":137,"iri":138,"Q_O_Q_TILDE_E_S_Qexclusion_E_Star_C_E_Opt":139,"Qexclusion_E_Plus":140,"Qexclusion_E_Star":141,"exclusion":142,"O_Q_TILDE_E_S_Qexclusion_E_Star_C":143,"-":144,"LANGTAG":145,"numericLiteral":146,"IT_true":147,"IT_false":148,"ATPNAME_LN":149,"ATPNAME_NS":150,"@":151,"&":152,"QcodeDecl_E_Star":153,"//":154,"O_Qiri_E_Or_Qliteral_E_C":155,"a":156,"*":157,"+":158,"?":159,"REPEAT_RANGE":160,"blankNode":161,"STRING_LITERAL1":162,"STRING_LITERAL2":163,"STRING_LITERAL_LONG1":164,"STRING_LITERAL_LONG2":165,"PNAME_LN":166,"BLANK_NODE_LABEL":167,"%":168,"CODE":169,"$":170,"QshapeLabel_E_Plus":171,"$accept":0,"$end":1},
terminals_: {2:"error",7:"EOF",17:"IT_BASE",18:"IRIREF",19:"IT_PREFIX",20:"PNAME_NS",23:"IT_start",24:"=",33:"IT_EXTERNAL",38:"IT_OR",42:"IT_AND",44:"!",45:"IT_NOT",48:"{",50:"}",54:"IT_CLOSED",56:"IT_EXTRA",63:"|",68:",",69:";",74:"IT_UNIQUE",75:"(",79:")",82:"IT_FOCUS",84:"<",85:"!=",86:">",88:"IT_LANGTAG",89:"IT_DATATYPE",97:"IT_LITERAL",104:".",106:"IT_IRI",107:"IT_BNODE",108:"IT_NONLITERAL",111:"INTEGER",112:"IT_PATTERN",114:"~",115:"IT_LENGTH",116:"IT_MINLENGTH",117:"IT_MAXLENGTH",121:"DECIMAL",122:"DOUBLE",123:"^^",124:"IT_MININCLUSIVE",125:"IT_MINEXCLUSIVE",126:"IT_MAXINCLUSIVE",127:"IT_MAXEXCLUSIVE",128:"IT_TOTALDIGITS",129:"IT_FRACTIONDIGITS",131:"^",132:"[",134:"]",144:"-",145:"LANGTAG",147:"IT_true",148:"IT_false",149:"ATPNAME_LN",150:"ATPNAME_NS",151:"@",152:"&",154:"//",156:"a",157:"*",158:"+",159:"?",160:"REPEAT_RANGE",162:"STRING_LITERAL1",163:"STRING_LITERAL2",164:"STRING_LITERAL_LONG1",165:"STRING_LITERAL_LONG2",166:"PNAME_LN",167:"BLANK_NODE_LABEL",168:"%",169:"CODE",170:"$"},
productions_: [0,[3,4],[4,0],[5,0],[5,2],[9,1],[9,1],[12,0],[12,2],[14,2],[6,0],[6,1],[8,1],[8,1],[15,2],[16,3],[10,1],[10,1],[21,4],[11,1],[27,1],[27,2],[13,1],[13,1],[22,3],[31,0],[31,2],[30,1],[30,1],[25,1],[34,2],[37,2],[36,0],[36,2],[35,2],[41,2],[40,0],[40,2],[39,1],[39,2],[39,2],[46,4],[51,1],[51,1],[51,1],[47,0],[47,2],[49,0],[49,1],[53,2],[57,1],[57,2],[55,1],[55,1],[60,2],[62,2],[61,1],[61,2],[64,1],[64,1],[59,2],[67,0],[67,1],[67,1],[67,2],[71,0],[71,1],[71,1],[65,3],[72,2],[72,2],[70,1],[70,2],[73,6],[73,3],[81,2],[76,0],[76,1],[83,2],[78,0],[78,2],[80,1],[80,1],[80,1],[80,1],[77,1],[77,4],[77,4],[66,2],[66,1],[66,2],[66,1],[66,1],[66,1],[91,6],[93,0],[93,1],[94,0],[94,2],[43,2],[43,1],[43,2],[43,2],[43,3],[43,2],[43,1],[43,2],[43,1],[43,3],[43,1],[98,0],[98,2],[99,1],[99,1],[99,1],[100,1],[100,2],[105,1],[105,1],[32,2],[32,2],[32,2],[110,1],[110,1],[110,1],[109,2],[109,2],[119,1],[119,1],[119,1],[119,3],[118,1],[118,1],[118,1],[118,1],[120,1],[120,1],[90,5],[90,6],[130,1],[130,2],[130,1],[130,2],[103,3],[133,0],[133,2],[135,1],[135,1],[136,2],[136,2],[141,0],[141,2],[143,2],[139,0],[139,1],[140,1],[140,2],[142,2],[142,3],[137,1],[137,2],[137,3],[137,1],[137,1],[137,1],[101,1],[101,1],[101,2],[101,1],[92,2],[26,1],[153,0],[153,2],[96,3],[155,1],[155,1],[58,1],[58,1],[102,1],[95,1],[95,1],[95,1],[95,1],[29,1],[29,1],[146,1],[146,1],[146,1],[113,1],[113,1],[113,1],[113,1],[138,1],[138,1],[138,1],[161,1],[28,3],[28,3],[87,2],[87,2],[52,2],[171,1],[171,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        var valueExprDefns = Parser.valueExprDefns ? { valueExprDefns: Parser.valueExprDefns } : {};
        var startObj = Parser.start ? { start: Parser.start } : {};
        var startActs = Parser.startActs ? { startActs: Parser.startActs } : {};
        var ret = extend({ type: "Schema"},
                         Object.keys(Parser._prefixes).length ? { prefixes: Parser._prefixes } : {}, // Build return object from
                         valueExprDefns, startActs, startObj,                  // components in parser state
                         Parser.shapes ? {shapes: Parser.shapes} : {});        // maintaining intuitve order.
        if (Parser._base !== null)
          ret.base = Parser._base;
        Parser.reset();
        return ret;
      
break;
case 2:
 yy.parser.yy = { lexer: yy.lexer} ; 
break;
case 14:
 // t: @@
        Parser._setBase(Parser._base === null ||
                    absoluteIRI.test($$[$0].slice(1, -1)) ? $$[$0].slice(1, -1) : _resolveIRI($$[$0].slice(1, -1)));
      
break;
case 15:
 // t: ShExParser-test.js/with pre-defined prefixes
        var prefixIRI;
        if (this._base === null || absoluteIRI.test($$[$0].slice(1, -1)))
          prefixIRI = $$[$0].slice(1, -1);
        else
          prefixIRI = _resolveIRI($$[$0].slice(1, -1));
        Parser._prefixes[$$[$0-1].slice(0, -1)] = prefixIRI;
      
break;
case 18:
 // !!! fix start semanticActions
        if (Parser.start)
          error("Parse error: start alread defined as " + Parser.start);
        Parser.start = $$[$0-1]; // t: startInline
      
break;
case 19:

        Parser.startActs = $$[$0]; // t: startCode1
      
break;
case 20:
this.$ = [$$[$0]] // t: startCode1;
break;
case 21:
this.$ = appendTo($$[$0-1], $$[$0]) // t: startCode3;
break;
case 24:
 // t: 1dot 1val1vsMinusiri3??
        addShape($$[$0-2],  extend($$[$0-1], $$[$0]));
      
break;
case 25:
this.$ = {};
break;
case 26: case 116:

        if (Object.keys($$[$0-1]).indexOf(Object.keys($$[$0])[0]) !== -1) {
          error("Parse error: facet "+Object.keys($$[$0])[0]+" defined multiple times");
        }
        this.$ = extend($$[$0-1], $$[$0])
      
break;
case 27:

        this.$ = $$[$0];
      
break;
case 28:
this.$ = { type: "ShapeExternal" };
break;
case 30:
this.$ = shapeJunction("ShapeOr", $$[$0-1], $$[$0]);
break;
case 31: case 35: case 78:
this.$ = $$[$0];
break;
case 32: case 36: case 79:
this.$ = [];
break;
case 33: case 37: case 80:
this.$ = $$[$0-1].concat($$[$0]);
break;
case 34:
this.$ = shapeJunction("ShapeAnd", $$[$0-1], $$[$0]);
break;
case 39: case 40:
this.$ = { type: "ShapeNot", "shapeExpr": $$[$0] };
break;
case 41:
 // t: 1dotInherit3
        var exprObj = $$[$0-1] ? { expression: $$[$0-1] } : EmptyObject; // t: 0, 0Inherit1
        this.$ = (exprObj === EmptyObject && $$[$0-3] === EmptyObject) ?
	  EmptyShape :
	  extend({ type: "Shape" }, exprObj, $$[$0-3]);
      
break;
case 42:
this.$ = [ "inherit", $$[$0] ] // t: 1dotInherit1;
break;
case 43:
this.$ = [ "extra", $$[$0] ] // t: 1dotExtra1, 3groupdot3Extra, 3groupdotExtra3;
break;
case 44:
this.$ = [ "closed", true ] // t: 1dotClosed;
break;
case 45:
this.$ = EmptyObject;
break;
case 46:

      if ($$[$0-1] === EmptyObject)
	$$[$0-1] = {};
      if ($$[$0][0] === "closed")
        $$[$0-1]["closed"] = true; // t: 1dotClosed
      else if ($$[$0][0] in $$[$0-1])
        $$[$0-1][$$[$0][0]] = unionAll($$[$0-1][$$[$0][0]], $$[$0][1]); // t: 1dotInherit3, 3groupdot3Extra, 3groupdotExtra3
      else
        $$[$0-1][$$[$0][0]] = $$[$0][1]; // t: 1dotInherit1
      this.$ = $$[$0-1];
    
break;
case 49:
this.$ = $$[$0] // t: 1dotExtra1, 3groupdot3Extra;
break;
case 50:
this.$ = [$$[$0]] // t: 1dotExtra1, 3groupdot3Extra, 3groupdotExtra3;
break;
case 51:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 3groupdotExtra3;
break;
case 54:
this.$ = { type: "SomeOf", expressions: unionAll([$$[$0-1]], $$[$0]) } // t: 2someOfdot;
break;
case 55:
this.$ = $$[$0] // t: 2someOfdot;
break;
case 56:
this.$ = [$$[$0]] // t: 2someOfdot;
break;
case 57:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 2someOfdot;
break;
case 60:
this.$ = $$[$0] ? { type: "EachOf", expressions: unionAll([$$[$0-1]], $$[$0]) } : $$[$0-1] // t: 2groupOfdot;
break;
case 61: case 62: case 63:
this.$ = null;
break;
case 64:
this.$ = $$[$0-1];
break;
case 68:
this.$ = { type: "EachOf", expressions: unionAll([$$[$0-2]], $$[$0-1]) } // t: 2groupOfdot;
break;
case 69: case 70:
this.$ = $$[$0] // t: 2groupOfdot;
break;
case 71:
this.$ = [$$[$0]] // t: 2groupOfdot;
break;
case 72:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 2groupOfdot;
break;
case 73:

        this.$ = { type: "Unique", focus: $$[$0-3], uniques: [$$[$0-2]].concat($$[$0-1]) };
      
break;
case 74:

        this.$ = { type: "ValueComparison", left: $$[$0-2], comparator: $$[$0-1], right: $$[$0] };
      
break;
case 76:
this.$ = false;
break;
case 77:
this.$ = true;
break;
case 85:
this.$ = { type: "TermAccessor", productionLabel: $$[$0] };
break;
case 86:
this.$ = { type: "LangtagAccessor", name: $$[$0-1] };
break;
case 87:
this.$ = { type: "DatatypeAccessor", name: $$[$0-1] };
break;
case 88: case 90:
this.$ = extend({ productionLabel: $$[$0-1] }, $$[$0]);
break;
case 94:

        // t: open1dotOr1dot, !openopen1dotcloseCode1closeCode2
        this.$ = $$[$0-4];
        // Copy all of the new attributes into the encapsulated shape.
        if ("min" in $$[$0-2]) { this.$.min = $$[$0-2].min; } // t: open3groupdotclosecard23Annot3Code2
        if ("max" in $$[$0-2]) { this.$.max = $$[$0-2].max; } // t: open3groupdotclosecard23Annot3Code2
        if ($$[$0-1].length) { this.$.annotations = $$[$0-1]; } // t: open3groupdotcloseAnnot3, open3groupdotclosecard23Annot3Code2
        if ($$[$0]) { this.$.semActs = "semActs" in $$[$0-4] ? $$[$0-4].semActs.concat($$[$0].semActs) : $$[$0].semActs; } // t: open3groupdotcloseCode1, !open1dotOr1dot
      
break;
case 95:
this.$ = {} // t: 1dot;
break;
case 97:
this.$ = [] // t: 1dot, 1dotAnnot3;
break;
case 98:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1dotAnnot3;
break;
case 99:
this.$ = extend({ type: "NodeConstraint", nodeKind: "literal" }, $$[$0]) // t: 1literalPattern;
break;
case 100:
this.$ = extend({ type: "NodeConstraint" }, $$[$0]) // t: 1iriPattern;
break;
case 101:
this.$ = extend({ type: "NodeConstraint"}, $$[$0-1], $$[$0]) // t: 1iriPattern;
break;
case 102:

        this.$ = $$[$0] === EmptyShape ?
          extend({ type: "NodeConstraint"}, $$[$0-1]) :
        // $$[$0].type === "Shape" ?
        //   extend({ type: "NodeConstraint" }, $$[$0-1], $$[$0]) :
        { type: "ShapeAnd", shapeExprs: [ extend({ type: "NodeConstraint" }, $$[$0-1]), $$[$0] ] }
        // extend({nodeKind: $$[$0-1] }, $$[$0])
        // { type: "NodeConstraint", nodeKind: $$[$0-1], reference: $$[$0] }
        // t: 1iriRef1
      
break;
case 103:

        this.$ = $$[$0] === EmptyShape ?
          extend({ type: "NodeConstraint" }, $$[$0-2], $$[$0-1]) :
        // $$[$0].type === "Shape" ?
        //   extend({ type: "NodeConstraint" }, $$[$0-2], $$[$0-1], $$[$0]) :
        { type: "ShapeAnd", shapeExprs: [ extend({ type: "NodeConstraint" }, $$[$0-2], $$[$0-1]), $$[$0] ] }
        // extend({nodeKind: $$[$0-2] }, $$[$0-1], $$[$0])
        // extend({ type: "NodeConstraint", nodeKind: $$[$0-2], reference: $$[$0-1] }, $$[$0])
        // t: 1iriRefLength1
      
break;
case 104:

        if (numericDatatypes.indexOf($$[$0-1]) === -1)
          numericFacets.forEach(function (facet) {
            if (facet in $$[$0])
              error("Parse error: facet " + facet + " not allowed for unknown datatype " + $$[$0-1]);
          });
        this.$ = extend({ type: "NodeConstraint", datatype: $$[$0-1] }, $$[$0]) // t: 1datatype
      
break;
case 106:
this.$ = { type: "ShapeAnd", shapeExprs: [ extend({ type: "NodeConstraint" }, $$[$0-1]), $$[$0] ] } // t: 1bnodeRefOrRefMinlength;
break;
case 107:
this.$ = { type: "NodeConstraint", values: $$[$0] } // t: 1val1IRIREF;
break;
case 108:
this.$ = $$[$0-1] // t: 1val1vsMinusiri3;
break;
case 109:
this.$ = EmptyShape // t: 1dot;
break;
case 110:
this.$ = {} // t: 1literalPattern;
break;
case 111:

        if (Object.keys($$[$0-1]).indexOf(Object.keys($$[$0])[0]) !== -1) {
          error("Parse error: facet "+Object.keys($$[$0])[0]+" defined multiple times");
        }
        this.$ = extend($$[$0-1], $$[$0]) // t: 1literalLength
      
break;
case 112:
this.$ = { nodeKind: "iri" } // t: 1iriPattern;
break;
case 113:
this.$ = { nodeKind: "bnode" } // t: 1bnodeLength;
break;
case 114:
this.$ = { nodeKind: "nonliteral" } // t: 1nonliteralLength;
break;
case 119:
this.$ = keyValObject($$[$0-1], parseInt($$[$0], 10)) // t: 1literalLength;
break;
case 120: case 121:
this.$ = { pattern: $$[$0].substr(1, $$[$0].length-2) } // t: 1literalPattern;
break;
case 122:
this.$ = "length" // t: 1literalLength;
break;
case 123:
this.$ = "minlength" // t: 1literalMinlength;
break;
case 124:
this.$ = "maxlength" // t: 1literalMaxlength;
break;
case 125:
this.$ = keyValObject($$[$0-1], $$[$0]) // t: 1literalMininclusive;
break;
case 126:
this.$ = keyValObject($$[$0-1], parseInt($$[$0], 10)) // t: 1literalTotaldigits;
break;
case 127:
this.$ = parseInt($$[$0], 10);;
break;
case 128: case 129:
this.$ = parseFloat($$[$0]);;
break;
case 130:

        $$[$0-2] = $$[$0-2].substr(1, $$[$0-2].length - 2);
        if ($$[$0] === XSD_DECIMAL || $$[$0] === XSD_FLOAT || $$[$0] === XSD_DOUBLE)
          this.$ = parseFloat($$[$0-2]);
        else if (numericDatatypes.indexOf($$[$0]) !== -1)
          this.$ = parseInt($$[$0-2])
        else
          error("Parse error: numeric range facet expected numeric datatype instead of " + $$[$0]);
      
break;
case 131:
this.$ = "mininclusive" // t: 1literalMininclusive;
break;
case 132:
this.$ = "minexclusive" // t: 1literalMinexclusive;
break;
case 133:
this.$ = "maxinclusive" // t: 1literalMaxinclusive;
break;
case 134:
this.$ = "maxexclusive" // t: 1literalMaxexclusive;
break;
case 135:
this.$ = "totaldigits" // t: 1literalTotaldigits;
break;
case 136:
this.$ = "fractiondigits" // t: 1literalFractiondigits;
break;
case 137:

        // $$[$0]: t: 1dotCode1
	if ($$[$0-3] !== EmptyShape && false) {
	  var t = blank();
	  addShape(t, $$[$0-3]);
	  $$[$0-3] = { type: "ShapeRef", reference: t };
	}
        this.$ = extend({ type: "TripleConstraint", predicate: $$[$0-4]}, ($$[$0-3] === EmptyShape ? {} : { valueExpr: $$[$0-3] }), $$[$0-2], $$[$0]); // t: 1dot
        if ($$[$0-1].length)
          this.$["annotations"] = $$[$0-1]; // t: 1dotAnnot3
      
break;
case 138:

        // %6: t: 1inversedotCode1
        this.$ = extend({ type: "TripleConstraint" }, $$[$0-5], { predicate: $$[$0-4] }, ($$[$0-3] === EmptyShape ? {} : { valueExpr: $$[$0-3] }), $$[$0-2], $$[$0]); // t: 1inversedot, 1negatedinversedot
        if ($$[$0-1].length)
          this.$["annotations"] = $$[$0-1]; // t: 1inversedotAnnot3
      
break;
case 139:
this.$ = { inverse: true } // t: 1inversedot;
break;
case 140:
this.$ = { inverse: true, negated: true } // t: 1negatedinversedot;
break;
case 141:
this.$ = { negated: true } // t: 1negateddot;
break;
case 142:
this.$ = { inverse: true, negated: true } // t: 1inversenegateddot;
break;
case 143:
this.$ = $$[$0-1] // t: 1val1IRIREF;
break;
case 144:
this.$ = [] // t: 1val1IRIREF;
break;
case 145:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1val1IRIREF;
break;
case 148:

        if ($$[$0]) {
          this.$ = {  // t: 1val1iriStem, 1val1iriStemMinusiri3
            type: "StemRange",
            stem: $$[$0-1]
          };
          if ($$[$0].length)
            this.$["exclusions"] = $$[$0]; // t: 1val1iriStemMinusiri3
        } else {
          this.$ = $$[$0-1]; // t: 1val1IRIREF, 1AvalA
        }
      
break;
case 149:
this.$ = { type: "StemRange", stem: { type: "Wildcard" }, exclusions: $$[$0] } // t:1val1dotMinusiri3, 1val1dotMinusiriStem3;
break;
case 150:
this.$ = [] // t: 1val1iriStem, 1val1iriStemMinusiri3;
break;
case 151:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1val1iriStemMinusiri3;
break;
case 152: case 157:
this.$ = $$[$0] // t: 1val1iriStemMinusiri3;
break;
case 155:
this.$ = [$$[$0]] // t:1val1dotMinusiri3, 1val1dotMinusiriStem3;
break;
case 156:
this.$ = appendTo($$[$0-1], $$[$0]) // t:1val1dotMinusiri3, 1val1dotMinusiriStem3;
break;
case 158:
this.$ = { type: "Stem", stem: $$[$0-1] } // t: 1val1iriStemMinusiriStem3;
break;
case 160:
this.$ = $$[$0-1] + lowercase($$[$0]) // t: 1val1LANGTAG;
break;
case 161:
this.$ = $$[$0-2] + '^^' + $$[$0] // t: 1val1Datatype;
break;
case 163:
this.$ = XSD_TRUE // t: 1val1true;
break;
case 164:
this.$ = XSD_FALSE // t: 1val1false;
break;
case 165:
 // t: 1dotRefLNex
        $$[$0] = $$[$0].substr(1, $$[$0].length-1);
        var namePos = $$[$0].indexOf(':');
        this.$ = { type: "ShapeRef", reference: expandPrefix($$[$0].substr(0, namePos)) + $$[$0].substr(namePos + 1) };
      
break;
case 166:
 // t: 1dotRefNS1
        $$[$0] = $$[$0].substr(1, $$[$0].length-1);
        this.$ = { type: "ShapeRef", reference: expandPrefix($$[$0].substr(0, $$[$0].length - 1)) };
      
break;
case 167:
this.$ = { type: "ShapeRef", reference: $$[$0] } // t: 1dotRef1, 1dotRefSpaceLNex, 1dotRefSpaceNS1;
break;
case 169:
this.$ = { type: "Inclusion", "include": $$[$0] } // t: 2groupInclude1;
break;
case 170:
this.$ = $$[$0].length ? { semActs: $$[$0] } : null; // t: 1dotCode1/2oneOfDot;
break;
case 171:
this.$ = [] // t: 1dot, 1dotCode1;
break;
case 172:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1dotCode1;
break;
case 173:
this.$ = { type: "Annotation", predicate: $$[$0-1], object: $$[$0] } // t: 1dotAnnotIRIREF;
break;
case 177:
this.$ = RDF_TYPE // t: 1AvalA;
break;
case 179:
this.$ = { min:0, max:"*" } // t: 1cardStar;
break;
case 180:
this.$ = { min:1, max:"*" } // t: 1cardPlus;
break;
case 181:
this.$ = { min:0, max:1 } // t: 1cardOpt;
break;
case 182:

        $$[$0] = $$[$0].substr(1, $$[$0].length-2);
        var nums = $$[$0].match(/(\d+)/g);
        this.$ = { min: parseInt(nums[0], 10) }; // t: 1card2blank, 1card2Star
        if (nums.length === 2)
            this.$["max"] = parseInt(nums[1], 10); // t: 1card23
        else if ($$[$0].indexOf(',') === -1) // t: 1card2
            this.$["max"] = parseInt(nums[0], 10);
        else
            this.$["max"] = "*";
      
break;
case 185:
this.$ = createLiteral($$[$0], XSD_INTEGER) // t: 1val1INTEGER;
break;
case 186:
this.$ = createLiteral($$[$0], XSD_DECIMAL) // t: 1val1DECIMAL;
break;
case 187:
this.$ = createLiteral($$[$0].toLowerCase(), XSD_DOUBLE) // t: 1val1DOUBLE;
break;
case 188:
this.$ = unescapeString($$[$0], 1) // t: 1val1STRING_LITERAL1;
break;
case 189:
this.$ = unescapeString($$[$0], 1) // t: 1val1STRING_LITERAL2;
break;
case 190:
this.$ = unescapeString($$[$0], 3) // t: 1val1STRING_LITERAL_LONG1;
break;
case 191:
this.$ = unescapeString($$[$0], 3) // t: 1val1STRING_LITERAL_LONG2;
break;
case 192:
this.$ = this._base === null || absoluteIRI.test($$[$0].slice(1, -1)) ? unescape($$[$0].slice(1,-1), irirefEscapeSequence) : _resolveIRI(unescape($$[$0].slice(1,-1), irirefEscapeSequence)) // t: 1dot;
break;
case 193:
 // t:1dotPNex, 1dotPNdefault, ShExParser-test.js/with pre-defined prefixes
        var namePos = $$[$0].indexOf(':');
        this.$ = expandPrefix($$[$0].substr(0, namePos)) + $$[$0].substr(namePos + 1);
    
break;
case 194:
 // t: 1dotNS2, 1dotNSdefault, ShExParser-test.js/PNAME_NS with pre-defined prefixes
        this.$ = expandPrefix($$[$0].substr(0, $$[$0].length - 1));
    
break;
case 196:
this.$ = unescapeSemanticAction($$[$0-1], $$[$0]) // t: 1dotCode1;
break;
case 197:
this.$ = { type: "SemAct", name: $$[$0-1] } // t: @@;
break;
case 198:
this.$ = $$[$0] // t: 1val1vcrefIRIREF;
break;
case 199:
this.$ = $$[$0] // t: 1val1vcrefbnode;
break;
case 200:
this.$ = $$[$0] // t: 1dotInherit1, 1dot3Inherit, 1dotInherit3;
break;
case 201:
this.$ = [$$[$0]] // t: 1dotInherit1, 1dot3Inherit, 1dotInherit3;
break;
case 202:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1dotInherit3;
break;
}
},
table: [o($V0,[2,2],{3:1,4:2}),{1:[3]},o($V0,[2,3],{5:3}),{6:4,7:[2,10],8:5,9:9,10:12,11:13,14:6,15:7,16:8,17:$V1,18:$V2,19:$V3,20:$V4,21:14,22:15,23:$V5,27:16,28:19,29:18,138:20,161:21,166:$V6,167:$V7,168:$V8},{7:[1,27]},o($V0,[2,4]),{7:[2,11]},o($V0,[2,12]),o($V0,[2,13]),o($V9,[2,7],{12:28}),{18:[1,29]},{20:[1,30]},o($V9,[2,5]),o($V9,[2,6]),o($V9,[2,16]),o($V9,[2,17]),o($V9,[2,19],{28:31,168:$V8}),{24:[1,32]},o($Va,$Vb,{30:33,25:34,34:36,35:37,39:38,43:39,99:43,102:44,101:45,100:46,103:47,138:53,46:57,32:58,47:60,110:61,18:$V2,20:$V4,33:[1,35],44:$Vc,45:$Vd,75:$Ve,97:$Vf,104:$Vg,106:$Vh,107:$Vi,108:$Vj,112:$Vk,114:$Vl,115:$Vm,116:$Vn,117:$Vo,132:$Vp,149:$Vq,150:$Vr,151:$Vs,166:$V6}),o($V0,[2,20]),o($Vt,[2,183]),o($Vt,[2,184]),{18:$V2,20:$V4,138:67,166:$V6},o($Vu,[2,192]),o($Vu,[2,193]),o($Vu,[2,194]),o([7,17,18,19,20,23,24,33,38,42,44,45,48,50,54,56,63,68,69,75,79,84,85,86,97,104,106,107,108,112,114,115,116,117,131,132,149,150,151,152,154,156,157,158,159,160,166,167,168],[2,195]),{1:[2,1]},{7:[2,9],8:69,10:70,13:68,15:7,16:8,17:$V1,18:$V2,19:$V3,20:$V4,21:14,22:15,23:$V5,29:18,138:20,161:21,166:$V6,167:$V7},o($V0,[2,14]),{18:[1,71]},o($V0,[2,21]),o($Va,$Vb,{34:36,35:37,39:38,43:39,99:43,102:44,101:45,100:46,103:47,138:53,46:57,32:58,47:60,110:61,25:72,18:$V2,20:$V4,44:$Vc,45:$Vd,75:$Ve,97:$Vf,104:$Vg,106:$Vh,107:$Vi,108:$Vj,112:$Vk,114:$Vl,115:$Vm,116:$Vn,117:$Vo,132:$Vp,149:$Vq,150:$Vr,151:$Vs,166:$V6}),o($V0,$Vv,{26:73,153:74}),o($V0,[2,27]),o($V0,[2,28]),o($Vw,[2,29]),o($Vx,[2,32],{36:75}),o($Vy,[2,36],{40:76}),o($Vy,[2,38]),o($Va,$Vb,{99:43,102:44,101:45,100:46,103:47,138:53,46:57,32:58,47:60,110:61,43:77,18:$V2,20:$V4,75:$Ve,97:$Vf,104:$Vg,106:$Vh,107:$Vi,108:$Vj,112:$Vk,114:$Vl,115:$Vm,116:$Vn,117:$Vo,132:$Vp,149:$Vq,150:$Vr,151:$Vs,166:$V6}),o($Va,$Vb,{99:43,102:44,101:45,100:46,103:47,138:53,46:57,32:58,47:60,110:61,43:78,18:$V2,20:$V4,75:$Ve,97:$Vf,104:$Vg,106:$Vh,107:$Vi,108:$Vj,112:$Vk,114:$Vl,115:$Vm,116:$Vn,117:$Vo,132:$Vp,149:$Vq,150:$Vr,151:$Vs,166:$V6}),o($Vz,$VA,{98:79}),o($Vy,[2,100],{46:57,32:58,47:60,110:61,100:80,101:81,48:$Vb,54:$Vb,56:$Vb,152:$Vb,112:$Vk,114:$Vl,115:$Vm,116:$Vn,117:$Vo,149:$Vq,150:$Vr,151:$Vs}),o($Vz,$VA,{98:82}),o($Vy,[2,105]),o($Va,$Vb,{46:57,47:60,110:61,101:83,32:84,112:$Vk,114:$Vl,115:$Vm,116:$Vn,117:$Vo,149:$Vq,150:$Vr,151:$Vs}),o($Vy,[2,107]),o($Va,$Vb,{34:36,35:37,39:38,43:39,99:43,102:44,101:45,100:46,103:47,138:53,46:57,32:58,47:60,110:61,25:85,18:$V2,20:$V4,44:$Vc,45:$Vd,75:$Ve,97:$Vf,104:$Vg,106:$Vh,107:$Vi,108:$Vj,112:$Vk,114:$Vl,115:$Vm,116:$Vn,117:$Vo,132:$Vp,149:$Vq,150:$Vr,151:$Vs,166:$V6}),o($Vy,[2,109]),o($VB,[2,112]),o($VB,[2,113]),o($VB,[2,114]),o([7,17,18,19,20,23,38,42,50,63,68,69,79,104,111,112,114,115,116,117,121,122,124,125,126,127,128,129,134,147,148,154,157,158,159,160,162,163,164,165,166,167,168],[2,178]),o($Vy,[2,165]),o($Vy,[2,166]),{18:$V2,20:$V4,29:86,138:20,161:21,166:$V6,167:$V7},o($Vy,[2,168]),o($VB,[2,115]),o($VC,[2,144],{133:87}),{48:[1,88],51:89,52:90,53:91,54:[1,92],56:[1,94],152:[1,93]},{111:[1,95]},{113:96,162:$VD,163:$VE,164:$VF,165:$VG},{113:101,162:$VD,163:$VE,164:$VF,165:$VG},{111:[2,122]},{111:[2,123]},{111:[2,124]},{168:[1,103],169:[1,102]},o($V9,[2,8]),o($V9,[2,22]),o($V9,[2,23]),o($V0,[2,15]),o($V0,$Vv,{153:74,26:104}),o($V9,[2,24]),o([7,17,18,19,20,23,50,63,68,69,79,166,167],[2,170],{28:105,168:$V8}),o($Vw,[2,30],{37:106,38:[1,107]}),o($Vx,[2,34],{41:108,42:[1,109]}),o($Vy,[2,39]),o($Vy,[2,40]),o($Vy,[2,99],{110:61,105:110,32:111,109:112,118:113,120:114,112:$Vk,114:$Vl,115:$Vm,116:$Vn,117:$Vo,124:$VH,125:$VI,126:$VJ,127:$VK,128:$VL,129:$VM}),o($Vy,[2,101],{46:57,47:60,110:61,32:84,101:121,48:$Vb,54:$Vb,56:$Vb,152:$Vb,112:$Vk,114:$Vl,115:$Vm,116:$Vn,117:$Vo,149:$Vq,150:$Vr,151:$Vs}),o($Vy,[2,102]),o($Vy,[2,104],{110:61,105:110,32:111,109:112,118:113,120:114,112:$Vk,114:$Vl,115:$Vm,116:$Vn,117:$Vo,124:$VH,125:$VI,126:$VJ,127:$VK,128:$VL,129:$VM}),o($Vy,[2,106]),o($VB,[2,116]),{79:[1,122]},o($Vy,[2,167]),{18:$V2,20:$V4,104:[1,128],111:$VN,113:129,121:$VO,122:$VP,134:[1,123],135:124,136:125,137:126,138:127,146:130,147:$VQ,148:$VR,162:$VD,163:$VE,164:$VF,165:$VG,166:$V6},{18:$V2,20:$V4,44:$VS,49:136,50:[2,47],55:137,58:147,59:138,60:139,66:140,73:144,74:$VT,75:$VU,77:151,87:141,88:$VV,89:$VW,90:142,91:143,92:145,130:148,131:$VX,138:153,152:$VY,156:$VZ,166:$V6,170:$V_},o($Va,[2,46]),o($Va,[2,42]),o($Va,[2,43]),o($Va,[2,44]),{18:$V2,20:$V4,29:160,138:20,161:21,166:$V6,167:$V7,171:159},{18:$V2,20:$V4,57:161,58:162,138:153,156:$VZ,166:$V6},o($V$,[2,119]),o($V$,[2,120]),o($V01,[2,188]),o($V01,[2,189]),o($V01,[2,190]),o($V01,[2,191]),o($V$,[2,121]),o($V11,[2,196]),o($V11,[2,197]),o($V9,[2,18]),o($V11,[2,172]),o($Vx,[2,33]),o($Va,$Vb,{39:38,43:39,99:43,102:44,101:45,100:46,103:47,138:53,46:57,32:58,47:60,110:61,35:163,18:$V2,20:$V4,44:$Vc,45:$Vd,75:$Ve,97:$Vf,104:$Vg,106:$Vh,107:$Vi,108:$Vj,112:$Vk,114:$Vl,115:$Vm,116:$Vn,117:$Vo,132:$Vp,149:$Vq,150:$Vr,151:$Vs,166:$V6}),o($Vy,[2,37]),o($Va,$Vb,{43:39,99:43,102:44,101:45,100:46,103:47,138:53,46:57,32:58,47:60,110:61,39:164,18:$V2,20:$V4,44:$Vc,45:$Vd,75:$Ve,97:$Vf,104:$Vg,106:$Vh,107:$Vi,108:$Vj,112:$Vk,114:$Vl,115:$Vm,116:$Vn,117:$Vo,132:$Vp,149:$Vq,150:$Vr,151:$Vs,166:$V6}),o($Vz,[2,111]),o($Vz,[2,117]),o($Vz,[2,118]),{111:[1,166],113:169,119:165,121:[1,167],122:[1,168],162:$VD,163:$VE,164:$VF,165:$VG},{111:[1,170]},o($V21,[2,131]),o($V21,[2,132]),o($V21,[2,133]),o($V21,[2,134]),{111:[2,135]},{111:[2,136]},o($Vy,[2,103]),o($Vy,[2,108]),o($Vy,[2,143]),o($VC,[2,145]),o($VC,[2,146]),o($VC,[2,147]),o($VC,[2,153],{139:171,143:172,114:[1,173]}),{140:174,142:175,144:$V31},o($V41,[2,159],{123:[1,178],145:[1,177]}),o($V41,[2,162]),o($V41,[2,163]),o($V41,[2,164]),o($V41,[2,185]),o($V41,[2,186]),o($V41,[2,187]),{50:[1,179]},{50:[2,48]},{50:[2,52],61:180,62:181,63:$V51},{50:[2,53]},o($V61,$V71,{67:183,70:186,72:187,68:$V81,69:$V91}),o([24,84,85,86],$Va1,{58:147,130:148,138:153,90:188,91:189,18:$V2,20:$V4,44:$VS,75:$VU,131:$VX,156:$VZ,166:$V6}),o($Vb1,[2,89]),o($Vb1,[2,91]),o($Vb1,[2,92]),o($Vb1,[2,93]),{18:$V2,20:$V4,138:190,161:191,166:$V6,167:$V7},o($Va,$Vb,{34:36,35:37,39:38,43:39,99:43,102:44,101:45,100:46,103:47,138:53,46:57,32:58,47:60,110:61,25:192,18:$V2,20:$V4,44:$Vc,45:$Vd,75:$Ve,97:$Vf,104:$Vg,106:$Vh,107:$Vi,108:$Vj,112:$Vk,114:$Vl,115:$Vm,116:$Vn,117:$Vo,132:$Vp,149:$Vq,150:$Vr,151:$Vs,166:$V6}),{18:$V2,20:$V4,58:193,138:153,156:$VZ,166:$V6},{18:$V2,20:$V4,44:$VS,58:147,59:198,60:196,64:194,65:195,66:197,73:144,74:$VT,75:$VU,77:151,87:141,88:$VV,89:$VW,90:142,91:143,92:145,130:148,131:$VX,138:153,152:$VY,156:$VZ,166:$V6,170:$V_},{75:[1,199]},{24:[1,202],80:200,84:[1,201],85:[1,203],86:[1,204]},{18:$V2,20:$V4,29:205,138:20,161:21,166:$V6,167:$V7},o($Vc1,[2,176]),o($Vc1,[2,177]),o($Vd1,[2,139],{44:[1,206]}),o($Vd1,[2,141],{131:[1,207]}),{75:[1,208]},{75:[1,209]},o($Va,[2,200],{138:20,161:21,29:210,18:$V2,20:$V4,166:$V6,167:$V7}),o($Ve1,[2,201]),o($Va,[2,49],{138:153,58:211,18:$V2,20:$V4,156:$VZ,166:$V6}),o($Vf1,[2,50]),o($Vx,[2,31]),o($Vy,[2,35]),o($Vz,[2,125]),o($Vz,[2,127]),o($Vz,[2,128]),o($Vz,[2,129]),{123:[1,212]},o($Vz,[2,126]),o($VC,[2,148]),o($VC,[2,154]),o($Vg1,[2,150],{141:213}),o($VC,[2,149],{142:214,144:$V31}),o($Vg1,[2,155]),{18:$V2,20:$V4,138:215,166:$V6},o($V41,[2,160]),{18:$V2,20:$V4,102:216,138:53,166:$V6},o($Vy,[2,41]),o([50,79],[2,54],{62:217,63:$V51}),o($V61,[2,56]),{18:$V2,20:$V4,44:$VS,58:147,59:218,66:140,73:144,74:$VT,75:$VU,77:151,87:141,88:$VV,89:$VW,90:142,91:143,92:145,130:148,131:$VX,138:153,152:$VY,156:$VZ,166:$V6,170:$V_},o($V61,[2,60]),o($V61,[2,62],{87:141,90:142,91:143,73:144,92:145,58:147,130:148,77:151,138:153,66:219,18:$V2,20:$V4,44:$VS,74:$VT,75:$VU,88:$VV,89:$VW,131:$VX,152:$VY,156:$VZ,166:$V6,170:$V_}),o($V61,[2,63],{87:141,90:142,91:143,73:144,92:145,58:147,130:148,77:151,138:153,66:220,18:$V2,20:$V4,44:$VS,74:$VT,75:$VU,88:$VV,89:$VW,131:$VX,152:$VY,156:$VZ,166:$V6,170:$V_}),o($V61,$Vh1,{71:221,72:222,68:$Vi1,69:$Vj1}),o($Vb1,[2,71]),o($Vb1,[2,88]),o($Vb1,[2,90]),o($Vk1,[2,198]),o($Vk1,[2,199]),o($Vl1,$Vm1,{93:225,95:226,157:$Vn1,158:$Vo1,159:$Vp1,160:$Vq1}),o($Va,$Vb,{34:36,35:37,39:38,43:39,99:43,102:44,101:45,100:46,103:47,138:53,46:57,32:58,47:60,110:61,25:231,18:$V2,20:$V4,44:$Vc,45:$Vd,75:$Ve,97:$Vf,104:$Vg,106:$Vh,107:$Vi,108:$Vj,112:$Vk,114:$Vl,115:$Vm,116:$Vn,117:$Vo,132:$Vp,149:$Vq,150:$Vr,151:$Vs,166:$V6}),{79:[1,232]},{79:[2,58]},{79:[2,59]},{63:$V71,67:183,68:$V81,69:$V91,70:233,72:187},{61:180,62:181,63:$V51},o($Vr1,[2,76],{76:234,81:235,82:[1,236]}),{77:237,87:238,88:$VV,89:$VW,170:$V_},o($Vr1,[2,81]),o($Vr1,[2,82]),o($Vr1,[2,83]),o($Vr1,[2,84]),o($Vb1,[2,169]),o($Vd1,[2,140]),o($Vd1,[2,142]),{87:239,170:$V_},{87:240,170:$V_},o($Ve1,[2,202]),o($Vf1,[2,51]),{18:$V2,20:$V4,102:241,138:53,166:$V6},o($VC,[2,152],{142:242,144:$V31}),o($Vg1,[2,156]),o($Vg1,[2,157],{114:[1,243]}),o($V41,[2,161]),o($V61,[2,57]),o($V61,[2,55]),o($Vb1,[2,69]),o($Vb1,[2,70]),o($V61,$Vs1),o($Vb1,[2,72]),o($V61,[2,66],{87:141,90:142,91:143,73:144,92:145,58:147,130:148,77:151,138:153,66:219,18:$V2,20:$V4,44:$VS,74:$VT,75:$VU,88:$VV,89:$VW,131:$VX,152:$VY,156:$VZ,166:$V6,170:$V_}),o($V61,[2,67],{87:141,90:142,91:143,73:144,92:145,58:147,130:148,77:151,138:153,66:220,18:$V2,20:$V4,44:$VS,74:$VT,75:$VU,88:$VV,89:$VW,131:$VX,152:$VY,156:$VZ,166:$V6,170:$V_}),o($Vl1,$Vt1,{94:244}),o($Vl1,[2,96]),o($Vl1,[2,179]),o($Vl1,[2,180]),o($Vl1,[2,181]),o($Vl1,[2,182]),o($Vl1,$Vm1,{95:226,93:245,157:$Vn1,158:$Vo1,159:$Vp1,160:$Vq1}),o($Vl1,$Vm1,{95:226,93:246,157:$Vn1,158:$Vo1,159:$Vp1,160:$Vq1}),o([63,79],$Vh1,{72:222,71:247,68:$Vi1,69:$Vj1}),{77:248,87:238,88:$VV,89:$VW,170:$V_},o($Vr1,[2,77]),{68:[1,249]},o($Vb1,[2,74]),o($Vb1,$Va1),{79:[1,250]},{79:[1,251]},o($Vz,[2,130]),o($Vg1,[2,151]),o($Vg1,[2,158]),o($Vu1,$Vv,{153:74,26:252,96:253,154:$Vv1}),o($Vl1,$Vt1,{94:255}),o($Vl1,$Vt1,{94:256}),{63:$Vs1,79:[2,68]},o($Vw1,[2,79],{78:257}),o($Vr1,[2,75]),o($Vx1,[2,86]),o($Vx1,[2,87]),o($Vb1,[2,137]),o($Vl1,[2,98]),{18:$V2,20:$V4,58:258,138:153,156:$VZ,166:$V6},o($Vu1,$Vv,{153:74,96:253,26:259,154:$Vv1}),o($Vu1,$Vv,{153:74,96:253,26:260,154:$Vv1}),{68:[1,263],79:[1,261],83:262},{18:$V2,20:$V4,111:$VN,113:129,121:$VO,122:$VP,137:266,138:265,146:130,147:$VQ,148:$VR,155:264,162:$VD,163:$VE,164:$VF,165:$VG,166:$V6},o($Vb1,[2,138]),o($Vb1,[2,94]),o($Vb1,[2,73]),o($Vw1,[2,80]),{77:267,87:238,88:$VV,89:$VW,170:$V_},o($Vl1,[2,173]),o($Vl1,[2,174]),o($Vl1,[2,175]),o($Vw1,[2,78])],
defaultActions: {6:[2,11],27:[2,1],64:[2,122],65:[2,123],66:[2,124],119:[2,135],120:[2,136],137:[2,48],139:[2,53],195:[2,58],196:[2,59]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = new Error();

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  /*
    ShEx parser in the Jison parser generator format.
  */

  // Common namespaces and entities
  var RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
      RDF_TYPE  = RDF + 'type',
      RDF_FIRST = RDF + 'first',
      RDF_REST  = RDF + 'rest',
      RDF_NIL   = RDF + 'nil',
      XSD = 'http://www.w3.org/2001/XMLSchema#',
      XSD_INTEGER  = XSD + 'integer',
      XSD_DECIMAL  = XSD + 'decimal',
      XSD_FLOAT   = XSD + 'float',
      XSD_DOUBLE   = XSD + 'double',
      XSD_BOOLEAN  = XSD + 'boolean',
      XSD_TRUE =  '"true"^^'  + XSD_BOOLEAN,
      XSD_FALSE = '"false"^^' + XSD_BOOLEAN,
      XSD_PATTERN        = XSD + 'pattern',
      XSD_MININCLUSIVE   = XSD + 'minInclusive',
      XSD_MINEXCLUSIVE   = XSD + 'minExclusive',
      XSD_MAXINCLUSIVE   = XSD + 'maxInclusive',
      XSD_MAXEXCLUSIVE   = XSD + 'maxExclusive',
      XSD_LENGTH         = XSD + 'length',
      XSD_MINLENGTH      = XSD + 'minLength',
      XSD_MAXLENGTH      = XSD + 'maxLength',
      XSD_TOTALDIGITS    = XSD + 'totalDigits',
      XSD_FRACTIONDIGITS = XSD + 'fractionDigits';

  var numericDatatypes = [
      XSD + "integer",
      XSD + "decimal",
      XSD + "float",
      XSD + "double",
      XSD + "string",
      XSD + "boolean",
      XSD + "dateTime",
      XSD + "nonPositiveInteger",
      XSD + "negativeInteger",
      XSD + "long",
      XSD + "int",
      XSD + "short",
      XSD + "byte",
      XSD + "nonNegativeInteger",
      XSD + "unsignedLong",
      XSD + "unsignedInt",
      XSD + "unsignedShort",
      XSD + "unsignedByte",
      XSD + "positiveInteger"
  ];

  var absoluteIRI = /^[a-z][a-z0-9+.-]*:/i,
    schemeAuthority = /^(?:([a-z][a-z0-9+.-]*:))?(?:\/\/[^\/]*)?/i,
    dotSegments = /(?:^|\/)\.\.?(?:$|[\/#?])/;

  var numericFacets = ["mininclusive", "minexclusive",
                       "maxinclusive", "maxexclusive"];

  // Returns a lowercase version of the given string
  function lowercase(string) {
    return string.toLowerCase();
  }

  // Appends the item to the array and returns the array
  function appendTo(array, item) {
    return array.push(item), array;
  }

  // Appends the items to the array and returns the array
  function appendAllTo(array, items) {
    return array.push.apply(array, items), array;
  }

  // Extends a base object with properties of other objects
  function extend(base) {
    if (!base) base = {};
    for (var i = 1, l = arguments.length, arg; i < l && (arg = arguments[i] || {}); i++)
      for (var name in arg)
        base[name] = arg[name];
    return base;
  }

  // Creates an array that contains all items of the given arrays
  function unionAll() {
    var union = [];
    for (var i = 0, l = arguments.length; i < l; i++)
      union = union.concat.apply(union, arguments[i]);
    return union;
  }

  // N3.js:lib/N3Parser.js<0.4.5>:58 with
  //   s/this\./Parser./g
  // ### `_setBase` sets the base IRI to resolve relative IRIs.
  Parser._setBase = function (baseIRI) {
    if (!baseIRI)
      baseIRI = null;
    else if (baseIRI.indexOf('#') >= 0)
      throw new Error('Invalid base IRI ' + baseIRI);
    // Set base IRI and its components
    if (Parser._base = baseIRI) {
      Parser._basePath   = baseIRI.replace(/[^\/?]*(?:\?.*)?$/, '');
      baseIRI = baseIRI.match(schemeAuthority);
      Parser._baseRoot   = baseIRI[0];
      Parser._baseScheme = baseIRI[1];
    }
  }

  // N3.js:lib/N3Parser.js<0.4.5>:576 with
  //   s/this\./Parser./g
  //   s/token/iri/
  // ### `_resolveIRI` resolves a relative IRI token against the base path,
  // assuming that a base path has been set and that the IRI is indeed relative.
  function _resolveIRI (iri) {
    switch (iri[0]) {
    // An empty relative IRI indicates the base IRI
    case undefined: return Parser._base;
    // Resolve relative fragment IRIs against the base IRI
    case '#': return Parser._base + iri;
    // Resolve relative query string IRIs by replacing the query string
    case '?': return Parser._base.replace(/(?:\?.*)?$/, iri);
    // Resolve root-relative IRIs at the root of the base IRI
    case '/':
      // Resolve scheme-relative IRIs to the scheme
      return (iri[1] === '/' ? Parser._baseScheme : Parser._baseRoot) + _removeDotSegments(iri);
    // Resolve all other IRIs at the base IRI's path
    default: {
      return _removeDotSegments(Parser._basePath + iri);
    }
    }
  }

  // ### `_removeDotSegments` resolves './' and '../' path segments in an IRI as per RFC3986.
  function _removeDotSegments (iri) {
    // Don't modify the IRI if it does not contain any dot segments
    if (!dotSegments.test(iri))
      return iri;

    // Start with an imaginary slash before the IRI in order to resolve trailing './' and '../'
    var result = '', length = iri.length, i = -1, pathStart = -1, segmentStart = 0, next = '/';

    while (i < length) {
      switch (next) {
      // The path starts with the first slash after the authority
      case ':':
        if (pathStart < 0) {
          // Skip two slashes before the authority
          if (iri[++i] === '/' && iri[++i] === '/')
            // Skip to slash after the authority
            while ((pathStart = i + 1) < length && iri[pathStart] !== '/')
              i = pathStart;
        }
        break;
      // Don't modify a query string or fragment
      case '?':
      case '#':
        i = length;
        break;
      // Handle '/.' or '/..' path segments
      case '/':
        if (iri[i + 1] === '.') {
          next = iri[++i + 1];
          switch (next) {
          // Remove a '/.' segment
          case '/':
            result += iri.substring(segmentStart, i - 1);
            segmentStart = i + 1;
            break;
          // Remove a trailing '/.' segment
          case undefined:
          case '?':
          case '#':
            return result + iri.substring(segmentStart, i) + iri.substr(i + 1);
          // Remove a '/..' segment
          case '.':
            next = iri[++i + 1];
            if (next === undefined || next === '/' || next === '?' || next === '#') {
              result += iri.substring(segmentStart, i - 2);
              // Try to remove the parent path from result
              if ((segmentStart = result.lastIndexOf('/')) >= pathStart)
                result = result.substr(0, segmentStart);
              // Remove a trailing '/..' segment
              if (next !== '/')
                return result + '/' + iri.substr(i + 1);
              segmentStart = i + 1;
            }
          }
        }
      }
      next = iri[++i];
    }
    return result + iri.substring(segmentStart);
  }

  // Creates an expression with the given type and attributes
  function expression(expr, attr) {
    var expression = { expression: expr };
    if (attr)
      for (var a in attr)
        expression[a] = attr[a];
    return expression;
  }

  // Creates a path with the given type and items
  function path(type, items) {
    return { type: 'path', pathType: type, items: items };
  }

  // Creates a literal with the given value and type
  function createLiteral(value, type) {
    return '"' + value + '"^^' + type;
  }

  // Creates a new blank node identifier
  function blank() {
    return '_:b' + blankId++;
  };
  var blankId = 0;
  Parser._resetBlanks = function () { blankId = 0; }
  Parser.reset = function () {
    Parser._prefixes = Parser.valueExprDefns = Parser.shapes = Parser.start = Parser.startActs = null; // Reset state.
    Parser._base = Parser._baseIRI = Parser._baseIRIPath = Parser._baseIRIRoot = null;
  }
  var _fileName; // for debugging
  Parser._setFileName = function (fn) { _fileName = fn; }

  // Regular expression and replacement strings to escape strings
  var stringEscapeSequence = /\\u([a-fA-F0-9]{4})|\\U([a-fA-F0-9]{8})|\\(.)/g,
      irirefEscapeSequence = /\\u([a-fA-F0-9]{4})|\\U([a-fA-F0-9]{8})/g,
      stringEscapeReplacements = { '\\': '\\', "'": "'", '"': '"',
                             't': '\t', 'b': '\b', 'n': '\n', 'r': '\r', 'f': '\f' },
      semactEscapeReplacements = { '\\': '\\', '%': '%' },
      fromCharCode = String.fromCharCode;

  function unescape(string, regex, replacements) {
    try {
      string = string.replace(regex, function (sequence, unicode4, unicode8, escapedChar) {
        var charCode;
        if (unicode4) {
          charCode = parseInt(unicode4, 16);
          if (isNaN(charCode)) throw new Error(); // can never happen (regex), but helps performance
          return fromCharCode(charCode);
        }
        else if (unicode8) {
          charCode = parseInt(unicode8, 16);
          if (isNaN(charCode)) throw new Error(); // can never happen (regex), but helps performance
          if (charCode < 0xFFFF) return fromCharCode(charCode);
          return fromCharCode(0xD800 + ((charCode -= 0x10000) >> 10), 0xDC00 + (charCode & 0x3FF));
        }
        else {
          var replacement = replacements[escapedChar];
          if (!replacement) throw new Error();
          return replacement;
        }
      });
      return string;
    }
    catch (error) { return ''; }
  };

  // Translates string escape codes in the string into their textual equivalent
  function unescapeString(string, trimLength) {
    string = string.substring(trimLength, string.length - trimLength);
    return '"' + unescape(string, stringEscapeSequence, stringEscapeReplacements) + '"';
  }

  // Convenience function to return object with p1 key, value p2
  function keyValObject(key, val) {
    var ret = {};
    ret[key] = val;
    return ret;
  }

  // Return object with p1 key, p2 string value
  function unescapeSemanticAction(key, string) {
    string = string.substring(1, string.length - 2);
    return {
      type: "SemAct",
      name: key,
      code: unescape(string, stringEscapeSequence, semactEscapeReplacements)
    };
  }

  function error (msg) {
    Parser._prefixes = Parser.valueExprDefns = Parser.shapes = Parser.start = Parser.startActs = null; // Reset state.
    Parser._base = Parser._baseIRI = Parser._baseIRIPath = Parser._baseIRIRoot = '';
    throw new Error(msg);
  }

  // Expand declared prefix or throw Error
  function expandPrefix (prefix) {
    if (!(prefix in Parser._prefixes))
      error('Parse error; unknown prefix: ' + prefix);
    return Parser._prefixes[prefix];
  }

  // Add a shape to the map
  function addShape (label, shape) {
    if (!Parser.shapes)
      Parser.shapes = {};
    if (label in Parser.shapes) {
      if (Parser.options.duplicateShape === "abort")
        error("Parse error: "+label+" alread defined");
      else if (Parser.options.duplicateShape !== "ignore")
        Parser.shapes[label] = shape;
    } else
      Parser.shapes[label] = shape;
  }

  function shapeJunction (type, container, elts) {
    if (elts.length === 0) {
      return container;
    } else if (container.type === type) {
      container.shapeExprs = container.shapeExprs.concat(elts);
      return container;
    } else {
      return { type: type, shapeExprs: [container].concat(elts) };
    }
  }

  var EmptyObject = {  };
  var EmptyShape = { type: "Shape" };
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/**/
break;
case 1:return 149;
break;
case 2:return 150;
break;
case 3:return 145;
break;
case 4:return 151;
break;
case 5:return 166;
break;
case 6:return 160;
break;
case 7:return 122;
break;
case 8:return 121;
break;
case 9:return 111;
break;
case 10:return 'ANON';
break;
case 11:return 18;
break;
case 12:return 20;
break;
case 13:return 156;
break;
case 14:return 167;
break;
case 15:return 169;
break;
case 16:return 164;
break;
case 17:return 'NON_TERMINATED_STRING_LITERAL_LONG2';
break;
case 18:return 165;
break;
case 19:return 'NON_TERMINATED_STRING_LITERAL_LONG2';
break;
case 20:return 162;
break;
case 21:return 163;
break;
case 22:return 17;
break;
case 23:return 19;
break;
case 24:return 23;
break;
case 25:return 33;
break;
case 26:return 'IT_VIRTUAL';
break;
case 27:return 54;
break;
case 28:return 56;
break;
case 29:return 97;
break;
case 30:return 107;
break;
case 31:return 106;
break;
case 32:return 108;
break;
case 33:return 112;
break;
case 34:return 42;
break;
case 35:return 38;
break;
case 36:return 45;
break;
case 37:return 124;
break;
case 38:return 125;
break;
case 39:return 126;
break;
case 40:return 127;
break;
case 41:return 115;
break;
case 42:return 116;
break;
case 43:return 117;
break;
case 44:return 128;
break;
case 45:return 129;
break;
case 46:return 74;
break;
case 47:return 82;
break;
case 48:return 89;
break;
case 49:return 88;
break;
case 50:return 84;
break;
case 51:return 24;
break;
case 52:return 86;
break;
case 53:return 85;
break;
case 54:return 154;
break;
case 55:return 48;
break;
case 56:return 50;
break;
case 57:return 152;
break;
case 58:return '||';
break;
case 59:return 63;
break;
case 60:return 68;
break;
case 61:return 75;
break;
case 62:return 79;
break;
case 63:return 132;
break;
case 64:return 134;
break;
case 65:return 170;
break;
case 66:return 44;
break;
case 67:return 123;
break;
case 68:return 131;
break;
case 69:return 104;
break;
case 70:return 114;
break;
case 71:return 69;
break;
case 72:return 157;
break;
case 73:return 158;
break;
case 74:return 159;
break;
case 75:return 144;
break;
case 76:return 168;
break;
case 77:return 147;
break;
case 78:return 148;
break;
case 79:return 7;
break;
case 80:return 'invalid character '+yy_.yytext;
break;
}
},
rules: [/^(?:\s+|(#[^\u000a\u000d]*))/,/^(?:(@((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:)(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|:|[0-9]|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))*(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%)))))?)))/,/^(?:(@(([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:))/,/^(?:(@([A-Za-z])+((-([0-9A-Za-z])+))*))/,/^(?:@)/,/^(?:(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:)(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|:|[0-9]|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))*(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%)))))?)))/,/^(?:(\{((([+-])?([0-9])+))((,(((([+-])?([0-9])+))|\*)?))?\}))/,/^(?:(([+-])?((([0-9])+\.([0-9])*(([Ee]([+-])?([0-9])+)))|((\.)?([0-9])+(([Ee]([+-])?([0-9])+))))))/,/^(?:(([+-])?([0-9])*\.([0-9])+))/,/^(?:(([+-])?([0-9])+))/,/^(?:{ANON})/,/^(?:(<([^\u0000-\u0020<>\"{}|^`\\]|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*>))/,/^(?:((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:))/,/^(?:a\b)/,/^(?:(_:((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|[0-9])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?))/,/^(?:(\{([^%\\]|\\[%\\]|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*%\}))/,/^(?:('''(('|'')?([^\'\\]|(\\[\"\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*'''))/,/^(?:('''))/,/^(?:("""(("|"")?([^\"\\]|(\\[\"\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*"""))/,/^(?:("""))/,/^(?:('([^\u0027\u005c\u000a\u000d]|(\\[\"\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*'))/,/^(?:("([^\u0022\u005c\u000a\u000d]|(\\[\"\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*"))/,/^(?:([Bb][Aa][Ss][Ee]))/,/^(?:([Pp][Rr][Ee][Ff][Ii][Xx]))/,/^(?:([sS][tT][aA][rR][tT]))/,/^(?:([eE][xX][tT][eE][rR][nN][aA][lL]))/,/^(?:([Vv][Ii][Rr][Tt][Uu][Aa][Ll]))/,/^(?:([Cc][Ll][Oo][Ss][Ee][Dd]))/,/^(?:([Ee][Xx][Tt][Rr][Aa]))/,/^(?:([Ll][Ii][Tt][Ee][Rr][Aa][Ll]))/,/^(?:([Bb][Nn][Oo][Dd][Ee]))/,/^(?:([Ii][Rr][Ii]))/,/^(?:([Nn][Oo][Nn][Ll][Ii][Tt][Ee][Rr][Aa][Ll]))/,/^(?:([Pp][Aa][Tt][Tt][Ee][Rr][Nn]))/,/^(?:([Aa][Nn][Dd]))/,/^(?:([Oo][Rr]))/,/^(?:([No][Oo][Tt]))/,/^(?:([Mm][Ii][Nn][Ii][Nn][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Mm][Ii][Nn][Ee][Xx][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Mm][Aa][Xx][Ii][Nn][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Mm][Aa][Xx][Ee][Xx][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Ll][Ee][Nn][Gg][Tt][Hh]))/,/^(?:([Mm][Ii][Nn][Ll][Ee][Nn][Gg][Tt][Hh]))/,/^(?:([Mm][Aa][Xx][Ll][Ee][Nn][Gg][Tt][Hh]))/,/^(?:([Tt][Oo][Tt][Aa][Ll][Dd][Ii][Gg][Ii][Tt][Ss]))/,/^(?:([Ff][Rr][Aa][Cc][Tt][Ii][Oo][Nn][Dd][Ii][Gg][Ii][Tt][Ss]))/,/^(?:([Uu][Nn][Ii][Qq][Uu][Ee]))/,/^(?:([Ff][Oo][Cc][Uu][Ss]))/,/^(?:([Dd][Aa][Tt][Aa][Tt][Yy][Pp][Ee]))/,/^(?:([Ll][Aa][Nn][Gg][Tt][Aa][Gg]))/,/^(?:<)/,/^(?:=)/,/^(?:>)/,/^(?:!=)/,/^(?:\/\/)/,/^(?:\{)/,/^(?:\})/,/^(?:&)/,/^(?:\|\|)/,/^(?:\|)/,/^(?:,)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\$)/,/^(?:!)/,/^(?:\^\^)/,/^(?:\^)/,/^(?:\.)/,/^(?:~)/,/^(?:;)/,/^(?:\*)/,/^(?:\+)/,/^(?:\?)/,/^(?:-)/,/^(?:%)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = ShExJison;
exports.Parser = ShExJison.Parser;
exports.parse = function () { return ShExJison.parse.apply(ShExJison, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}