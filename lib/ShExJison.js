/* parser generated by jison 0.4.16 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ShExJison = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[7,32,33,34,35,36,149,150,152],$V1=[1,10],$V2=[1,23],$V3=[1,11],$V4=[1,25],$V5=[1,17],$V6=[1,24],$V7=[1,26],$V8=[1,22],$V9=[7,32,33,34,35,36,149,150],$Va=[30,31,33,35,46,52,54,56,76,87,94,96,97,98,99,100,101,105,107,108,109,110,130,149],$Vb=[7,24,28,30,31,32,33,34,35,36,43,46,48,52,54,56,63,68,69,76,77,87,94,96,97,98,99,100,101,105,107,108,109,110,123,126,127,128,129,130,149,150,152],$Vc=[7,24,28,30,31,32,33,34,35,36,43,46,48,52,54,56,63,68,69,76,77,86,87,94,96,97,98,99,100,101,104,105,107,108,109,110,114,115,117,118,119,120,121,122,123,126,127,128,129,130,132,140,143,144,145,146,147,148,149,150,152,153],$Vd=[46,52,54,56],$Ve=[2,42],$Vf=[1,46],$Vg=[1,47],$Vh=[1,53],$Vi=[1,48],$Vj=[1,54],$Vk=[1,55],$Vl=[1,56],$Vm=[1,57],$Vn=[1,59],$Vo=[1,60],$Vp=[1,61],$Vq=[1,63],$Vr=[2,181],$Vs=[1,70],$Vt=[1,71],$Vu=[1,72],$Vv=[1,73],$Vw=[1,74],$Vx=[7,32,33,34,35,36,48,63,68,69,77,123,126,127,128,129,149,150,152],$Vy=[7,24,32,33,34,35,36,48,63,68,69,77,123,126,127,128,129,149,150,152],$Vz=[7,24,28,32,33,34,35,36,48,63,68,69,77,123,126,127,128,129,149,150,152],$VA=[7,24,28,32,33,34,35,36,48,63,68,69,77,105,107,108,109,110,117,118,119,120,121,122,123,126,127,128,129,149,150,152],$VB=[2,103],$VC=[7,24,28,32,33,34,35,36,46,48,52,54,56,63,68,69,77,99,100,101,105,107,108,109,110,123,126,127,128,129,149,150,152],$VD=[7,24,28,32,33,34,35,36,48,63,68,69,77,105,107,108,109,110,123,126,127,128,129,149,150,152],$VE=[33,35,94,104,114,115,132,143,144,145,146,147,148,149],$VF=[1,101],$VG=[1,102],$VH=[1,103],$VI=[1,104],$VJ=[7,32,33,34,35,36,48,63,68,69,77,149,150,152],$VK=[1,115],$VL=[1,116],$VM=[1,117],$VN=[1,118],$VO=[1,119],$VP=[1,120],$VQ=[1,134],$VR=[1,135],$VS=[1,136],$VT=[1,132],$VU=[1,133],$VV=[1,152],$VW=[1,147],$VX=[1,148],$VY=[1,151],$VZ=[1,150],$V_=[7,24,28,30,31,32,33,34,35,36,46,48,52,54,56,63,68,69,76,77,87,94,96,97,98,99,100,101,105,107,108,109,110,117,118,119,120,121,122,123,126,127,128,129,130,149,150,152],$V$=[7,24,28,30,31,32,33,34,35,36,46,48,52,54,56,63,68,69,76,77,87,94,96,97,98,99,100,101,104,105,107,108,109,110,114,115,116,117,118,119,120,121,122,123,126,127,128,129,130,132,141,143,144,145,146,147,148,149,150,152],$V01=[104,114,115,145,146,147,148],$V11=[1,170],$V21=[33,35,48,63,68,69,77,94,104,114,115,123,132,143,144,145,146,147,148,149,152],$V31=[1,176],$V41=[48,63,77],$V51=[2,61],$V61=[1,178],$V71=[1,179],$V81=[48,63,68,69,77],$V91=[30,31,33,35,46,52,54,56,76,86,87,94,96,97,98,99,100,101,104,114,115,130,143,144,145,146,147,148,149],$Va1=[33,35,86,149],$Vb1=[33,35,46,52,54,56,149,150],$Vc1=[33,35,46,52,54,56,86,149],$Vd1=[33,35,94,104,114,115,132,140,143,144,145,146,147,148,149],$Ve1=[2,65],$Vf1=[1,205],$Vg1=[1,206],$Vh1=[48,63,68,69,77,123,152],$Vi1=[2,77],$Vj1=[1,209],$Vk1=[1,210],$Vl1=[1,211],$Vm1=[1,212],$Vn1=[2,64],$Vo1=[2,79],$Vp1=[48,63,68,69,77,152],$Vq1=[1,225];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"shexDoc":3,"initParser":4,"Qdirective_E_Star":5,"Q_O_QnotStartAction_E_Or_QstartActions_E_S_Qstatement_E_Star_C_E_Opt":6,"EOF":7,"directive":8,"O_QnotStartAction_E_Or_QstartActions_E_C":9,"notStartAction":10,"startActions":11,"Qstatement_E_Star":12,"statement":13,"O_QnotStartAction_E_Or_QstartActions_E_S_Qstatement_E_Star_C":14,"start":15,"shape":16,"baseDecl":17,"prefixDecl":18,"shapeExpression":19,"shapeDisjunction":20,"shapeConjunction":21,"Q_O_QIT_OR_E_S_QshapeConjunction_E_C_E_Star":22,"O_QIT_OR_E_S_QshapeConjunction_E_C":23,"IT_OR":24,"negShapeAtom":25,"Q_O_QIT_AND_E_S_QnegShapeAtom_E_C_E_Star":26,"O_QIT_AND_E_S_QnegShapeAtom_E_C":27,"IT_AND":28,"shapeAtom":29,"!":30,"IT_NOT":31,"IT_BASE":32,"IRIREF":33,"IT_PREFIX":34,"PNAME_NS":35,"IT_start":36,"=":37,"semanticActions":38,"shapeLabel":39,"O_QstringFacet_E_Star_S_QshapeExpression_E_Or_QIT_EXTERNAL_E_C":40,"QstringFacet_E_Star":41,"stringFacet":42,"IT_EXTERNAL":43,"shapeDefinition":44,"Q_O_QincludeSet_E_Or_QinclPropertySet_E_Or_QIT_CLOSED_E_C_E_Star":45,"{":46,"QsomeOfShape_E_Opt":47,"}":48,"O_QincludeSet_E_Or_QinclPropertySet_E_Or_QIT_CLOSED_E_C":49,"includeSet":50,"inclPropertySet":51,"IT_CLOSED":52,"someOfShape":53,"&":54,"QshapeLabel_E_Plus":55,"IT_EXTRA":56,"Qpredicate_E_Plus":57,"predicate":58,"groupShape":59,"multiElementSomeOf":60,"Q_O_QGT_PIPE_E_S_QgroupShape_E_C_E_Plus":61,"O_QGT_PIPE_E_S_QgroupShape_E_C":62,"|":63,"innerShape":64,"multiElementGroup":65,"unaryShape":66,"groupShape_right":67,",":68,";":69,"Q_O_QGT_COMMA_E_S_QunaryShape_E_C_E_Plus":70,"QGT_COMMA_E_Opt":71,"O_QGT_COMMA_E_S_QunaryShape_E_C":72,"tripleConstraint":73,"include":74,"encapsulatedShape":75,"(":76,")":77,"Qcardinality_E_Opt":78,"Qannotation_E_Star":79,"cardinality":80,"annotation":81,"iri":82,"blankNode":83,"senseFlags":84,"^":85,"a":86,"IT_LITERAL":87,"QxsFacet_E_Star":88,"nonLiteralKind":89,"QstringFacet_E_Plus":90,"shapeOrRef":91,"datatype":92,"valueSet":93,".":94,"xsFacet":95,"IT_IRI":96,"IT_BNODE":97,"IT_NONLITERAL":98,"ATPNAME_LN":99,"ATPNAME_NS":100,"@":101,"numericFacet":102,"stringLength":103,"INTEGER":104,"IT_PATTERN":105,"string":106,"~":107,"IT_LENGTH":108,"IT_MINLENGTH":109,"IT_MAXLENGTH":110,"numericRange":111,"rawNumeric":112,"numericLength":113,"DECIMAL":114,"DOUBLE":115,"^^":116,"IT_MININCLUSIVE":117,"IT_MINEXCLUSIVE":118,"IT_MAXINCLUSIVE":119,"IT_MAXEXCLUSIVE":120,"IT_TOTALDIGITS":121,"IT_FRACTIONDIGITS":122,"//":123,"O_Qiri_E_Or_Qliteral_E_C":124,"literal":125,"*":126,"+":127,"?":128,"REPEAT_RANGE":129,"[":130,"Qvalue_E_Star":131,"]":132,"value":133,"iriRange":134,"Q_O_Q_TILDE_E_S_Qexclusion_E_Star_C_E_Opt":135,"Qexclusion_E_Plus":136,"Qexclusion_E_Star":137,"exclusion":138,"O_Q_TILDE_E_S_Qexclusion_E_Star_C":139,"-":140,"LANGTAG":141,"numericLiteral":142,"IT_true":143,"IT_false":144,"STRING_LITERAL1":145,"STRING_LITERAL2":146,"STRING_LITERAL_LONG1":147,"STRING_LITERAL_LONG2":148,"PNAME_LN":149,"BLANK_NODE_LABEL":150,"codeDecl":151,"%":152,"CODE":153,"QcodeDecl_E_Plus":154,"QcodeDecl_E_Star":155,"productionLabel":156,"$":157,"$accept":0,"$end":1},
terminals_: {2:"error",7:"EOF",24:"IT_OR",28:"IT_AND",30:"!",31:"IT_NOT",32:"IT_BASE",33:"IRIREF",34:"IT_PREFIX",35:"PNAME_NS",36:"IT_start",37:"=",43:"IT_EXTERNAL",46:"{",48:"}",52:"IT_CLOSED",54:"&",56:"IT_EXTRA",63:"|",68:",",69:";",76:"(",77:")",85:"^",86:"a",87:"IT_LITERAL",94:".",96:"IT_IRI",97:"IT_BNODE",98:"IT_NONLITERAL",99:"ATPNAME_LN",100:"ATPNAME_NS",101:"@",104:"INTEGER",105:"IT_PATTERN",107:"~",108:"IT_LENGTH",109:"IT_MINLENGTH",110:"IT_MAXLENGTH",114:"DECIMAL",115:"DOUBLE",116:"^^",117:"IT_MININCLUSIVE",118:"IT_MINEXCLUSIVE",119:"IT_MAXINCLUSIVE",120:"IT_MAXEXCLUSIVE",121:"IT_TOTALDIGITS",122:"IT_FRACTIONDIGITS",123:"//",126:"*",127:"+",128:"?",129:"REPEAT_RANGE",130:"[",132:"]",140:"-",141:"LANGTAG",143:"IT_true",144:"IT_false",145:"STRING_LITERAL1",146:"STRING_LITERAL2",147:"STRING_LITERAL_LONG1",148:"STRING_LITERAL_LONG2",149:"PNAME_LN",150:"BLANK_NODE_LABEL",152:"%",153:"CODE",157:"$"},
productions_: [0,[3,4],[4,0],[5,0],[5,2],[9,1],[9,1],[12,0],[12,2],[14,2],[6,0],[6,1],[13,1],[13,1],[10,1],[10,1],[8,1],[8,1],[19,1],[20,2],[23,2],[22,0],[22,2],[21,2],[27,2],[26,0],[26,2],[25,1],[25,2],[25,2],[17,2],[18,3],[15,4],[16,3],[41,0],[41,2],[40,2],[40,1],[44,4],[49,1],[49,1],[49,1],[45,0],[45,2],[47,0],[47,1],[50,2],[55,1],[55,2],[51,2],[57,1],[57,2],[53,1],[53,1],[60,2],[62,2],[61,1],[61,2],[64,1],[64,1],[59,2],[67,0],[67,1],[67,1],[67,2],[71,0],[71,1],[71,1],[65,3],[72,2],[72,2],[70,1],[70,2],[66,1],[66,1],[66,1],[75,6],[78,0],[78,1],[79,0],[79,2],[74,2],[39,1],[39,1],[73,5],[73,6],[84,1],[84,2],[84,1],[84,2],[58,1],[58,1],[29,2],[29,1],[29,2],[29,2],[29,3],[29,2],[29,1],[29,2],[29,1],[29,3],[29,1],[88,0],[88,2],[89,1],[89,1],[89,1],[90,1],[90,2],[91,1],[91,1],[91,2],[91,1],[95,1],[95,1],[42,2],[42,2],[42,2],[103,1],[103,1],[103,1],[102,2],[102,2],[112,1],[112,1],[112,1],[112,3],[111,1],[111,1],[111,1],[111,1],[113,1],[113,1],[92,1],[81,3],[124,1],[124,1],[80,1],[80,1],[80,1],[80,1],[93,3],[131,0],[131,2],[133,1],[133,1],[134,2],[134,2],[137,0],[137,2],[139,2],[135,0],[135,1],[136,1],[136,2],[138,2],[138,3],[125,1],[125,2],[125,3],[125,1],[125,1],[125,1],[142,1],[142,1],[142,1],[106,1],[106,1],[106,1],[106,1],[82,1],[82,1],[82,1],[83,1],[151,3],[151,3],[11,1],[154,1],[154,2],[38,1],[155,0],[155,2],[156,2],[156,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        var valueExprDefns = Parser.valueExprDefns ? { valueExprDefns: Parser.valueExprDefns } : {};
        var startObj = Parser.start ? { start: Parser.start } : {};
        var startActs = Parser.startActs ? { startActs: Parser.startActs } : {};
        var ret = extend({ type: "Schema"},
                         Object.keys(Parser._prefixes).length ? { prefixes: Parser._prefixes } : {}, // Build return object from
                         valueExprDefns, startActs, startObj,                  // components in parser state
                         Parser.shapes ? {shapes: Parser.shapes} : {});        // maintaining intuitve order.
        if (Parser._base !== null)
          ret.base = Parser._base;
        Parser.reset();
        return ret;
      
break;
case 2:
 yy.parser.yy = { lexer: yy.lexer} ; 
break;
case 19:
this.$ = shapeJunction("ShapeOr", $$[$0-1], $$[$0]);
break;
case 20: case 24:
this.$ = $$[$0];
break;
case 21: case 25:
this.$ = [];
break;
case 22: case 26:
this.$ = $$[$0-1].concat($$[$0]);
break;
case 23:
this.$ = shapeJunction("ShapeAnd", $$[$0-1], $$[$0]);
break;
case 28: case 29:
this.$ = { type: "ShapeNot", "shape": $$[$0] };
break;
case 30:
 // t: @@
        Parser._setBase(Parser._base === null ||
                    absoluteIRI.test($$[$0].slice(1, -1)) ? $$[$0].slice(1, -1) : _resolveIRI($$[$0].slice(1, -1)));
      
break;
case 31:
 // t: ShExParser-test.js/with pre-defined prefixes
        var prefixIRI;
        if (this._base === null || absoluteIRI.test($$[$0].slice(1, -1)))
          prefixIRI = $$[$0].slice(1, -1);
        else
          prefixIRI = _resolveIRI($$[$0].slice(1, -1));
        Parser._prefixes[$$[$0-1].slice(0, -1)] = prefixIRI;
      
break;
case 32:
 // !!! fix start semanticActions
        if (Parser.start)
          error("Parse error: start alread defined as " + Parser.start);
        Parser.start = $$[$0-1]; // t: startInline
      
break;
case 33:
 // t: 1dot 1val1vsMinusiri3??
        addShape($$[$0-2],  extend($$[$0-1], $$[$0]));
      
break;
case 34:
this.$ = {};
break;
case 35: case 109:

        if (Object.keys($$[$0-1]).indexOf(Object.keys($$[$0])[0]) !== -1) {
          error("Parse error: facet "+Object.keys($$[$0])[0]+" defined multiple times");
        }
        this.$ = extend($$[$0-1], $$[$0])
      
break;
case 36:

        if (Object.keys($$[$0-1]).length === 0) { this.$ = $$[$0]; }
        // else if ($$[$0].type === "NodeConstraint") { this.$ = extend($$[$0], $$[$0]); } // delme
        else { this.$ = { type: "ShapeAnd",
                      shapeExprs: [
                        extend({ type: "NodeConstraint" }, $$[$0-1]),
                        $$[$0] ]
                    };
             }
      
break;
case 37:
this.$ = { type: "ShapeExternal" };
break;
case 38:
 // t: 1dotInherit3
        var exprObj = $$[$0-1] ? { expression: $$[$0-1] } : EmptyObject; // t: 0, 0Inherit1
        this.$ = (exprObj === EmptyObject && $$[$0-3] === EmptyObject) ?
	  EmptyShape :
	  extend({ type: "Shape" }, exprObj, $$[$0-3]);
      
break;
case 39:
this.$ = [ "inherit", $$[$0] ] // t: 1dotInherit1;
break;
case 40:
this.$ = [ "extra", $$[$0] ] // t: 1dotExtra1, 3groupdot3Extra, 3groupdotExtra3;
break;
case 41:
this.$ = [ "closed", true ] // t: 1dotClosed;
break;
case 42:
this.$ = EmptyObject;
break;
case 43:

      if ($$[$0-1] === EmptyObject)
	$$[$0-1] = {};
      if ($$[$0][0] === "closed")
        $$[$0-1]["closed"] = true; // t: 1dotClosed
      else if ($$[$0][0] in $$[$0-1])
        $$[$0-1][$$[$0][0]] = unionAll($$[$0-1][$$[$0][0]], $$[$0][1]); // t: 1dotInherit3, 3groupdot3Extra, 3groupdotExtra3
      else
        $$[$0-1][$$[$0][0]] = $$[$0][1]; // t: 1dotInherit1
      this.$ = $$[$0-1];
    
break;
case 46:
this.$ = $$[$0] // t: 1dotInherit1, 1dot3Inherit, 1dotInherit3;
break;
case 47:
this.$ = [$$[$0]] // t: 1dotInherit1, 1dot3Inherit, 1dotInherit3;
break;
case 48:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1dotInherit3;
break;
case 49:
this.$ = $$[$0] // t: 1dotExtra1, 3groupdot3Extra;
break;
case 50:
this.$ = [$$[$0]] // t: 1dotExtra1, 3groupdot3Extra, 3groupdotExtra3;
break;
case 51:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 3groupdotExtra3;
break;
case 54:
this.$ = { type: "SomeOf", expressions: unionAll([$$[$0-1]], $$[$0]) } // t: 2someOfdot;
break;
case 55:
this.$ = $$[$0] // t: 2someOfdot;
break;
case 56:
this.$ = [$$[$0]] // t: 2someOfdot;
break;
case 57:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 2someOfdot;
break;
case 60:
this.$ = $$[$0] ? { type: "EachOf", expressions: unionAll([$$[$0-1]], $$[$0]) } : $$[$0-1] // t: 2groupOfdot;
break;
case 61: case 62: case 63:
this.$ = null;
break;
case 64:
this.$ = $$[$0-1];
break;
case 68:
this.$ = { type: "EachOf", expressions: unionAll([$$[$0-2]], $$[$0-1]) } // t: 2groupOfdot;
break;
case 69: case 70:
this.$ = $$[$0] // t: 2groupOfdot;
break;
case 71:
this.$ = [$$[$0]] // t: 2groupOfdot;
break;
case 72:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 2groupOfdot;
break;
case 76:

        // t: open1dotOr1dot, !openopen1dotcloseCode1closeCode2
        this.$ = $$[$0-4];
        // Copy all of the new attributes into the encapsulated shape.
        if ("min" in $$[$0-2]) { this.$.min = $$[$0-2].min; } // t: open3groupdotclosecard23Annot3Code2
        if ("max" in $$[$0-2]) { this.$.max = $$[$0-2].max; } // t: open3groupdotclosecard23Annot3Code2
        if ($$[$0-1].length) { this.$.annotations = $$[$0-1]; } // t: open3groupdotcloseAnnot3, open3groupdotclosecard23Annot3Code2
        if ($$[$0]) { this.$.semActs = "semActs" in $$[$0-4] ? $$[$0-4].semActs.concat($$[$0].semActs) : $$[$0].semActs; } // t: open3groupdotcloseCode1, !open1dotOr1dot
      
break;
case 77:
this.$ = {} // t: 1dot;
break;
case 79:
this.$ = [] // t: 1dot, 1dotAnnot3;
break;
case 80:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1dotAnnot3;
break;
case 81:
this.$ = { type: "Inclusion", "include": $$[$0] } // t: 2groupInclude1;
break;
case 84:

        // $$[$0]: t: 1dotCode1
	if ($$[$0-3] !== EmptyShape && false) {
	  var t = blank();
	  addShape(t, $$[$0-3]);
	  $$[$0-3] = { type: "ShapeRef", reference: t };
	}
        this.$ = extend({ type: "TripleConstraint", predicate: $$[$0-4]}, ($$[$0-3] === EmptyShape ? {} : { valueExpr: $$[$0-3] }), $$[$0-2], $$[$0]); // t: 1dot
        if ($$[$0-1].length)
          this.$["annotations"] = $$[$0-1]; // t: 1dotAnnot3
      
break;
case 85:

        // %6: t: 1inversedotCode1
        this.$ = extend({ type: "TripleConstraint" }, $$[$0-5], { predicate: $$[$0-4] }, ($$[$0-3] === EmptyShape ? {} : { valueExpr: $$[$0-3] }), $$[$0-2], $$[$0]); // t: 1inversedot, 1negatedinversedot
        if ($$[$0-1].length)
          this.$["annotations"] = $$[$0-1]; // t: 1inversedotAnnot3
      
break;
case 86:
this.$ = { inverse: true } // t: 1inversedot;
break;
case 87:
this.$ = { inverse: true, negated: true } // t: 1negatedinversedot;
break;
case 88:
this.$ = { negated: true } // t: 1negateddot;
break;
case 89:
this.$ = { inverse: true, negated: true } // t: 1inversenegateddot;
break;
case 91:
this.$ = RDF_TYPE // t: 1AvalA;
break;
case 92:
this.$ = extend({ type: "NodeConstraint", nodeKind: "literal" }, $$[$0]) // t: 1literalPattern;
break;
case 93:
this.$ = extend({ type: "NodeConstraint" }, $$[$0]) // t: 1iriPattern;
break;
case 94:
this.$ = extend({ type: "NodeConstraint"}, $$[$0-1], $$[$0]) // t: 1iriPattern;
break;
case 95:

        this.$ = $$[$0] === EmptyShape ?
          extend({ type: "NodeConstraint"}, $$[$0-1]) :
        // $$[$0].type === "Shape" ?
        //   extend({ type: "NodeConstraint" }, $$[$0-1], $$[$0]) :
        { type: "ShapeAnd", shapeExprs: [ extend({ type: "NodeConstraint" }, $$[$0-1]), $$[$0] ] }
        // extend({nodeKind: $$[$0-1] }, $$[$0])
        // { type: "NodeConstraint", nodeKind: $$[$0-1], reference: $$[$0] }
        // t: 1iriRef1
      
break;
case 96:

        this.$ = $$[$0] === EmptyShape ?
          extend({ type: "NodeConstraint" }, $$[$0-2], $$[$0-1]) :
        // $$[$0].type === "Shape" ?
        //   extend({ type: "NodeConstraint" }, $$[$0-2], $$[$0-1], $$[$0]) :
        { type: "ShapeAnd", shapeExprs: [ extend({ type: "NodeConstraint" }, $$[$0-2], $$[$0-1]), $$[$0] ] }
        // extend({nodeKind: $$[$0-2] }, $$[$0-1], $$[$0])
        // extend({ type: "NodeConstraint", nodeKind: $$[$0-2], reference: $$[$0-1] }, $$[$0])
        // t: 1iriRefLength1
      
break;
case 97:

        if (numericDatatypes.indexOf($$[$0-1]) === -1)
          numericFacets.forEach(function (facet) {
            if (facet in $$[$0])
              error("Parse error: facet " + facet + " not allowed for unknown datatype " + $$[$0-1]);
          });
        this.$ = extend({ type: "NodeConstraint", datatype: $$[$0-1] }, $$[$0]) // t: 1datatype
      
break;
case 99:
this.$ = { type: "ShapeAnd", shapeExprs: [ $$[$0-1], extend({ type: "NodeConstraint" }, $$[$0]) ] } // t: 1bnodeRefOrRefMinlength;
break;
case 100:
this.$ = { type: "NodeConstraint", values: $$[$0] } // t: 1val1IRIREF;
break;
case 101:
this.$ = $$[$0-1] // t: 1val1vsMinusiri3;
break;
case 102:
this.$ = EmptyShape // t: 1dot;
break;
case 103:
this.$ = {} // t: 1literalPattern;
break;
case 104:

        if (Object.keys($$[$0-1]).indexOf(Object.keys($$[$0])[0]) !== -1) {
          error("Parse error: facet "+Object.keys($$[$0])[0]+" defined multiple times");
        }
        this.$ = extend($$[$0-1], $$[$0]) // t: 1literalLength
      
break;
case 105:
this.$ = { nodeKind: "iri" } // t: 1iriPattern;
break;
case 106:
this.$ = { nodeKind: "bnode" } // t: 1bnodeLength;
break;
case 107:
this.$ = { nodeKind: "nonliteral" } // t: 1nonliteralLength;
break;
case 110:
 // t: 1dotRefLNex
        $$[$0] = $$[$0].substr(1, $$[$0].length-1);
        var namePos = $$[$0].indexOf(':');
        this.$ = { type: "ShapeRef", reference: expandPrefix($$[$0].substr(0, namePos)) + $$[$0].substr(namePos + 1) };
      
break;
case 111:
 // t: 1dotRefNS1
        $$[$0] = $$[$0].substr(1, $$[$0].length-1);
        this.$ = { type: "ShapeRef", reference: expandPrefix($$[$0].substr(0, $$[$0].length - 1)) };
      
break;
case 112:
this.$ = { type: "ShapeRef", reference: $$[$0] } // t: 1dotRef1, 1dotRefSpaceLNex, 1dotRefSpaceNS1;
break;
case 116:
this.$ = keyValObject($$[$0-1], parseInt($$[$0], 10)) // t: 1literalLength;
break;
case 117: case 118:
this.$ = { pattern: $$[$0].substr(1, $$[$0].length-2) } // t: 1literalPattern;
break;
case 119:
this.$ = "length" // t: 1literalLength;
break;
case 120:
this.$ = "minlength" // t: 1literalMinlength;
break;
case 121:
this.$ = "maxlength" // t: 1literalMaxlength;
break;
case 122:
this.$ = keyValObject($$[$0-1], $$[$0]) // t: 1literalMininclusive;
break;
case 123:
this.$ = keyValObject($$[$0-1], parseInt($$[$0], 10)) // t: 1literalTotaldigits;
break;
case 124:
this.$ = parseInt($$[$0], 10);;
break;
case 125: case 126:
this.$ = parseFloat($$[$0]);;
break;
case 127:

        $$[$0-2] = $$[$0-2].substr(1, $$[$0-2].length - 2);
        if ($$[$0] === XSD_DECIMAL || $$[$0] === XSD_FLOAT || $$[$0] === XSD_DOUBLE)
          this.$ = parseFloat($$[$0-2]);
        else if (numericDatatypes.indexOf($$[$0]) !== -1)
          this.$ = parseInt($$[$0-2])
        else
          error("Parse error: numeric range facet expected numeric datatype instead of " + $$[$0]);
      
break;
case 128:
this.$ = "mininclusive" // t: 1literalMininclusive;
break;
case 129:
this.$ = "minexclusive" // t: 1literalMinexclusive;
break;
case 130:
this.$ = "maxinclusive" // t: 1literalMaxinclusive;
break;
case 131:
this.$ = "maxexclusive" // t: 1literalMaxexclusive;
break;
case 132:
this.$ = "totaldigits" // t: 1literalTotaldigits;
break;
case 133:
this.$ = "fractiondigits" // t: 1literalFractiondigits;
break;
case 135:
this.$ = { type: "Annotation", predicate: $$[$0-1], object: $$[$0] } // t: 1dotAnnotIRIREF;
break;
case 138:
this.$ = { min:0, max:"*" } // t: 1cardStar;
break;
case 139:
this.$ = { min:1, max:"*" } // t: 1cardPlus;
break;
case 140:
this.$ = { min:0, max:1 } // t: 1cardOpt;
break;
case 141:

        $$[$0] = $$[$0].substr(1, $$[$0].length-2);
        var nums = $$[$0].match(/(\d+)/g);
        this.$ = { min: parseInt(nums[0], 10) }; // t: 1card2blank, 1card2Star
        if (nums.length === 2)
            this.$["max"] = parseInt(nums[1], 10); // t: 1card23
        else if ($$[$0].indexOf(',') === -1) // t: 1card2
            this.$["max"] = parseInt(nums[0], 10);
        else
            this.$["max"] = "*";
      
break;
case 142:
this.$ = $$[$0-1] // t: 1val1IRIREF;
break;
case 143:
this.$ = [] // t: 1val1IRIREF;
break;
case 144:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1val1IRIREF;
break;
case 147:

        if ($$[$0]) {
          this.$ = {  // t: 1val1iriStem, 1val1iriStemMinusiri3
            type: "StemRange",
            stem: $$[$0-1]
          };
          if ($$[$0].length)
            this.$["exclusions"] = $$[$0]; // t: 1val1iriStemMinusiri3
        } else {
          this.$ = $$[$0-1]; // t: 1val1IRIREF, 1AvalA
        }
      
break;
case 148:
this.$ = { type: "StemRange", stem: { type: "Wildcard" }, exclusions: $$[$0] } // t:1val1dotMinusiri3, 1val1dotMinusiriStem3;
break;
case 149:
this.$ = [] // t: 1val1iriStem, 1val1iriStemMinusiri3;
break;
case 150:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1val1iriStemMinusiri3;
break;
case 151: case 156:
this.$ = $$[$0] // t: 1val1iriStemMinusiri3;
break;
case 154:
this.$ = [$$[$0]] // t:1val1dotMinusiri3, 1val1dotMinusiriStem3;
break;
case 155:
this.$ = appendTo($$[$0-1], $$[$0]) // t:1val1dotMinusiri3, 1val1dotMinusiriStem3;
break;
case 157:
this.$ = { type: "Stem", stem: $$[$0-1] } // t: 1val1iriStemMinusiriStem3;
break;
case 159:
this.$ = $$[$0-1] + lowercase($$[$0]) // t: 1val1LANGTAG;
break;
case 160:
this.$ = $$[$0-2] + '^^' + $$[$0] // t: 1val1Datatype;
break;
case 162:
this.$ = XSD_TRUE // t: 1val1true;
break;
case 163:
this.$ = XSD_FALSE // t: 1val1false;
break;
case 164:
this.$ = createLiteral($$[$0], XSD_INTEGER) // t: 1val1INTEGER;
break;
case 165:
this.$ = createLiteral($$[$0], XSD_DECIMAL) // t: 1val1DECIMAL;
break;
case 166:
this.$ = createLiteral($$[$0].toLowerCase(), XSD_DOUBLE) // t: 1val1DOUBLE;
break;
case 167:
this.$ = unescapeString($$[$0], 1) // t: 1val1STRING_LITERAL1;
break;
case 168:
this.$ = unescapeString($$[$0], 1) // t: 1val1STRING_LITERAL2;
break;
case 169:
this.$ = unescapeString($$[$0], 3) // t: 1val1STRING_LITERAL_LONG1;
break;
case 170:
this.$ = unescapeString($$[$0], 3) // t: 1val1STRING_LITERAL_LONG2;
break;
case 171:
this.$ = this._base === null || absoluteIRI.test($$[$0].slice(1, -1)) ? unescape($$[$0].slice(1,-1), irirefEscapeSequence) : _resolveIRI(unescape($$[$0].slice(1,-1), irirefEscapeSequence)) // t: 1dot;
break;
case 172:
 // t:1dotPNex, 1dotPNdefault, ShExParser-test.js/with pre-defined prefixes
        var namePos = $$[$0].indexOf(':');
        this.$ = expandPrefix($$[$0].substr(0, namePos)) + $$[$0].substr(namePos + 1);
    
break;
case 173:
 // t: 1dotNS2, 1dotNSdefault, ShExParser-test.js/PNAME_NS with pre-defined prefixes
        this.$ = expandPrefix($$[$0].substr(0, $$[$0].length - 1));
    
break;
case 175:
this.$ = unescapeSemanticAction($$[$0-1], $$[$0]) // t: 1dotCode1;
break;
case 176:
this.$ = { type: "SemAct", name: $$[$0-1] } // t: @@;
break;
case 177:

        Parser.startActs = $$[$0]; // t: startCode1
      
break;
case 178:
this.$ = [$$[$0]] // t: startCode1;
break;
case 179:
this.$ = appendTo($$[$0-1], $$[$0]) // t: startCode3;
break;
case 180:
this.$ = $$[$0].length ? { semActs: $$[$0] } : null; // t: 1dotCode1/2oneOfDot;
break;
case 181:
this.$ = [] // t: 1dot, 1dotCode1;
break;
case 182:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1dotCode1;
break;
case 183:
this.$ = $$[$0] // t: 1val1vcrefIRIREF;
break;
case 184:
this.$ = $$[$0] // t: 1val1vcrefbnode;
break;
}
},
table: [o($V0,[2,2],{3:1,4:2}),{1:[3]},o($V0,[2,3],{5:3}),{6:4,7:[2,10],8:5,9:9,10:12,11:13,14:6,15:14,16:15,17:7,18:8,32:$V1,33:$V2,34:$V3,35:$V4,36:$V5,39:18,82:20,83:21,149:$V6,150:$V7,151:19,152:$V8,154:16},{7:[1,27]},o($V0,[2,4]),{7:[2,11]},o($V0,[2,16]),o($V0,[2,17]),o($V9,[2,7],{12:28}),{33:[1,29]},{35:[1,30]},o($V9,[2,5]),o($V9,[2,6]),o($V9,[2,14]),o($V9,[2,15]),o($V9,[2,177],{151:31,152:$V8}),{37:[1,32]},o($Va,[2,34],{40:33,41:34,43:[1,35]}),o($V0,[2,178]),o($Vb,[2,82]),o($Vb,[2,83]),{33:$V2,35:$V4,82:36,149:$V6},o($Vc,[2,171]),o($Vc,[2,172]),o($Vc,[2,173]),o($Vb,[2,174]),{1:[2,1]},{7:[2,9],8:38,10:39,13:37,15:14,16:15,17:7,18:8,32:$V1,33:$V2,34:$V3,35:$V4,36:$V5,39:18,82:20,83:21,149:$V6,150:$V7},o($V0,[2,30]),{33:[1,40]},o($V0,[2,179]),o($Vd,$Ve,{19:41,20:42,21:43,25:44,29:45,89:49,92:50,91:51,93:52,82:58,44:62,45:64,30:$Vf,31:$Vg,33:$V2,35:$V4,76:$Vh,87:$Vi,94:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp,130:$Vq,149:$V6}),o($V0,$Vr,{38:65,155:66}),o($Vd,$Ve,{20:42,21:43,25:44,29:45,89:49,92:50,91:51,93:52,82:58,44:62,45:64,19:67,42:68,103:69,30:$Vf,31:$Vg,33:$V2,35:$V4,76:$Vh,87:$Vi,94:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp,105:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw,130:$Vq,149:$V6}),o($V0,[2,37]),{152:[1,76],153:[1,75]},o($V9,[2,8]),o($V9,[2,12]),o($V9,[2,13]),o($V0,[2,31]),o($V0,$Vr,{155:66,38:77}),o($Vx,[2,18]),o($Vy,[2,21],{22:78}),o($Vz,[2,25],{26:79}),o($Vz,[2,27]),o($Vd,$Ve,{89:49,92:50,91:51,93:52,82:58,44:62,45:64,29:80,33:$V2,35:$V4,76:$Vh,87:$Vi,94:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp,130:$Vq,149:$V6}),o($Vd,$Ve,{89:49,92:50,91:51,93:52,82:58,44:62,45:64,29:81,33:$V2,35:$V4,76:$Vh,87:$Vi,94:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp,130:$Vq,149:$V6}),o($VA,$VB,{88:82}),o($Vz,[2,93],{44:62,45:64,103:69,90:83,91:84,42:85,46:$Ve,52:$Ve,54:$Ve,56:$Ve,99:$Vn,100:$Vo,101:$Vp,105:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw}),o($VA,$VB,{88:86}),o($Vz,[2,98],{103:69,42:85,90:87,105:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw}),o($Vz,[2,100]),o($Vd,$Ve,{20:42,21:43,25:44,29:45,89:49,92:50,91:51,93:52,82:58,44:62,45:64,19:88,30:$Vf,31:$Vg,33:$V2,35:$V4,76:$Vh,87:$Vi,94:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp,130:$Vq,149:$V6}),o($Vz,[2,102]),o($VC,[2,105]),o($VC,[2,106]),o($VC,[2,107]),o([7,24,28,32,33,34,35,36,48,63,68,69,77,94,104,105,107,108,109,110,114,115,117,118,119,120,121,122,123,126,127,128,129,132,143,144,145,146,147,148,149,150,152],[2,134]),o($VD,[2,110]),o($VD,[2,111]),{33:$V2,35:$V4,39:89,82:20,83:21,149:$V6,150:$V7},o($VD,[2,113]),o($VE,[2,143],{131:90}),{46:[1,91],49:92,50:93,51:94,52:[1,95],54:[1,96],56:[1,97]},o($V9,[2,33]),o([7,32,33,34,35,36,48,63,68,69,77,149,150],[2,180],{151:98,152:$V8}),o($V0,[2,36]),o($Va,[2,35]),{104:[1,99]},{106:100,145:$VF,146:$VG,147:$VH,148:$VI},{106:105,145:$VF,146:$VG,147:$VH,148:$VI},{104:[2,119]},{104:[2,120]},{104:[2,121]},o($VJ,[2,175]),o($VJ,[2,176]),o($V9,[2,32]),o($Vx,[2,19],{23:106,24:[1,107]}),o($Vy,[2,23],{27:108,28:[1,109]}),o($Vz,[2,28]),o($Vz,[2,29]),o($Vz,[2,92],{103:69,95:110,42:111,102:112,111:113,113:114,105:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw,117:$VK,118:$VL,119:$VM,120:$VN,121:$VO,122:$VP}),o($Vz,[2,94],{44:62,45:64,103:69,91:121,42:122,46:$Ve,52:$Ve,54:$Ve,56:$Ve,99:$Vn,100:$Vo,101:$Vp,105:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw}),o($Vz,[2,95]),o($VC,[2,108]),o($Vz,[2,97],{103:69,95:110,42:111,102:112,111:113,113:114,105:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw,117:$VK,118:$VL,119:$VM,120:$VN,121:$VO,122:$VP}),o($Vz,[2,99],{103:69,42:122,105:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw}),{77:[1,123]},o($VD,[2,112]),{33:$V2,35:$V4,82:128,94:[1,129],104:$VQ,106:130,114:$VR,115:$VS,125:127,132:[1,124],133:125,134:126,142:131,143:$VT,144:$VU,145:$VF,146:$VG,147:$VH,148:$VI,149:$V6},{30:$VV,33:$V2,35:$V4,47:137,48:[2,44],53:138,54:$VW,58:145,59:139,60:140,66:141,73:142,74:143,75:144,76:$VX,82:149,84:146,85:$VY,86:$VZ,149:$V6},o($Vd,[2,43]),o($Vd,[2,39]),o($Vd,[2,40]),o($Vd,[2,41]),{33:$V2,35:$V4,39:154,55:153,82:20,83:21,149:$V6,150:$V7},{33:$V2,35:$V4,57:155,58:156,82:149,86:$VZ,149:$V6},o($VJ,[2,182]),o($V_,[2,116]),o($V_,[2,117]),o($V$,[2,167]),o($V$,[2,168]),o($V$,[2,169]),o($V$,[2,170]),o($V_,[2,118]),o($Vy,[2,22]),o($Vd,$Ve,{25:44,29:45,89:49,92:50,91:51,93:52,82:58,44:62,45:64,21:157,30:$Vf,31:$Vg,33:$V2,35:$V4,76:$Vh,87:$Vi,94:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp,130:$Vq,149:$V6}),o($Vz,[2,26]),o($Vd,$Ve,{29:45,89:49,92:50,91:51,93:52,82:58,44:62,45:64,25:158,30:$Vf,31:$Vg,33:$V2,35:$V4,76:$Vh,87:$Vi,94:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp,130:$Vq,149:$V6}),o($VA,[2,104]),o($VA,[2,114]),o($VA,[2,115]),{104:[1,160],106:163,112:159,114:[1,161],115:[1,162],145:$VF,146:$VG,147:$VH,148:$VI},{104:[1,164]},o($V01,[2,128]),o($V01,[2,129]),o($V01,[2,130]),o($V01,[2,131]),{104:[2,132]},{104:[2,133]},o($Vz,[2,96]),o($VC,[2,109]),o($Vz,[2,101]),o($Vz,[2,142]),o($VE,[2,144]),o($VE,[2,145]),o($VE,[2,146]),o($VE,[2,152],{135:165,139:166,107:[1,167]}),{136:168,138:169,140:$V11},o($V21,[2,158],{116:[1,172],141:[1,171]}),o($V21,[2,161]),o($V21,[2,162]),o($V21,[2,163]),o($V21,[2,164]),o($V21,[2,165]),o($V21,[2,166]),{48:[1,173]},{48:[2,45]},{48:[2,52],61:174,62:175,63:$V31},{48:[2,53]},o($V41,$V51,{67:177,70:180,72:181,68:$V61,69:$V71}),o($V81,[2,73]),o($V81,[2,74]),o($V81,[2,75]),o($Vd,$Ve,{20:42,21:43,25:44,29:45,89:49,92:50,91:51,93:52,82:58,44:62,45:64,19:182,30:$Vf,31:$Vg,33:$V2,35:$V4,76:$Vh,87:$Vi,94:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp,130:$Vq,149:$V6}),{33:$V2,35:$V4,58:183,82:149,86:$VZ,149:$V6},{33:$V2,35:$V4,39:184,82:20,83:21,149:$V6,150:$V7},{30:$VV,33:$V2,35:$V4,54:$VW,58:145,59:189,60:187,64:185,65:186,66:188,73:142,74:143,75:144,76:$VX,82:149,84:146,85:$VY,86:$VZ,149:$V6},o($V91,[2,90]),o($V91,[2,91]),o($Va1,[2,86],{30:[1,190]}),o($Va1,[2,88],{85:[1,191]}),o($Vd,[2,46],{82:20,83:21,39:192,33:$V2,35:$V4,149:$V6,150:$V7}),o($Vb1,[2,47]),o($Vd,[2,49],{82:149,58:193,33:$V2,35:$V4,86:$VZ,149:$V6}),o($Vc1,[2,50]),o($Vy,[2,20]),o($Vz,[2,24]),o($VA,[2,122]),o($VA,[2,124]),o($VA,[2,125]),o($VA,[2,126]),{116:[1,194]},o($VA,[2,123]),o($VE,[2,147]),o($VE,[2,153]),o($Vd1,[2,149],{137:195}),o($VE,[2,148],{138:196,140:$V11}),o($Vd1,[2,154]),{33:$V2,35:$V4,82:197,149:$V6},o($V21,[2,159]),{33:$V2,35:$V4,82:58,92:198,149:$V6},o($VD,[2,38]),o([48,77],[2,54],{62:199,63:$V31}),o($V41,[2,56]),{30:$VV,33:$V2,35:$V4,54:$VW,58:145,59:200,66:141,73:142,74:143,75:144,76:$VX,82:149,84:146,85:$VY,86:$VZ,149:$V6},o($V41,[2,60]),o($V41,[2,62],{73:142,74:143,75:144,58:145,84:146,82:149,66:201,30:$VV,33:$V2,35:$V4,54:$VW,76:$VX,85:$VY,86:$VZ,149:$V6}),o($V41,[2,63],{73:142,74:143,75:144,58:145,84:146,82:149,66:202,30:$VV,33:$V2,35:$V4,54:$VW,76:$VX,85:$VY,86:$VZ,149:$V6}),o($V41,$Ve1,{71:203,72:204,68:$Vf1,69:$Vg1}),o($V81,[2,71]),o($Vh1,$Vi1,{78:207,80:208,126:$Vj1,127:$Vk1,128:$Vl1,129:$Vm1}),o($Vd,$Ve,{20:42,21:43,25:44,29:45,89:49,92:50,91:51,93:52,82:58,44:62,45:64,19:213,30:$Vf,31:$Vg,33:$V2,35:$V4,76:$Vh,87:$Vi,94:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn,100:$Vo,101:$Vp,130:$Vq,149:$V6}),o($V81,[2,81]),{77:[1,214]},{77:[2,58]},{77:[2,59]},{63:$V51,67:177,68:$V61,69:$V71,70:215,72:181},{61:174,62:175,63:$V31},o($Va1,[2,87]),o($Va1,[2,89]),o($Vb1,[2,48]),o($Vc1,[2,51]),{33:$V2,35:$V4,82:58,92:216,149:$V6},o($VE,[2,151],{138:217,140:$V11}),o($Vd1,[2,155]),o($Vd1,[2,156],{107:[1,218]}),o($V21,[2,160]),o($V41,[2,57]),o($V41,[2,55]),o($V81,[2,69]),o($V81,[2,70]),o($V41,$Vn1),o($V81,[2,72]),o($V41,[2,66],{73:142,74:143,75:144,58:145,84:146,82:149,66:201,30:$VV,33:$V2,35:$V4,54:$VW,76:$VX,85:$VY,86:$VZ,149:$V6}),o($V41,[2,67],{73:142,74:143,75:144,58:145,84:146,82:149,66:202,30:$VV,33:$V2,35:$V4,54:$VW,76:$VX,85:$VY,86:$VZ,149:$V6}),o($Vh1,$Vo1,{79:219}),o($Vh1,[2,78]),o($Vh1,[2,138]),o($Vh1,[2,139]),o($Vh1,[2,140]),o($Vh1,[2,141]),o($Vh1,$Vi1,{80:208,78:220,126:$Vj1,127:$Vk1,128:$Vl1,129:$Vm1}),o($Vh1,$Vi1,{80:208,78:221,126:$Vj1,127:$Vk1,128:$Vl1,129:$Vm1}),o([63,77],$Ve1,{72:204,71:222,68:$Vf1,69:$Vg1}),o($VA,[2,127]),o($Vd1,[2,150]),o($Vd1,[2,157]),o($Vp1,$Vr,{155:66,38:223,81:224,123:$Vq1}),o($Vh1,$Vo1,{79:226}),o($Vh1,$Vo1,{79:227}),{63:$Vn1,77:[2,68]},o($V81,[2,84]),o($Vh1,[2,80]),{33:$V2,35:$V4,58:228,82:149,86:$VZ,149:$V6},o($Vp1,$Vr,{155:66,81:224,38:229,123:$Vq1}),o($Vp1,$Vr,{155:66,81:224,38:230,123:$Vq1}),{33:$V2,35:$V4,82:232,104:$VQ,106:130,114:$VR,115:$VS,124:231,125:233,142:131,143:$VT,144:$VU,145:$VF,146:$VG,147:$VH,148:$VI,149:$V6},o($V81,[2,85]),o($V81,[2,76]),o($Vh1,[2,135]),o($Vh1,[2,136]),o($Vh1,[2,137])],
defaultActions: {6:[2,11],27:[2,1],72:[2,119],73:[2,120],74:[2,121],119:[2,132],120:[2,133],138:[2,45],140:[2,53],186:[2,58],187:[2,59]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = new Error();

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  /*
    ShEx parser in the Jison parser generator format.
  */

  // Common namespaces and entities
  var RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
      RDF_TYPE  = RDF + 'type',
      RDF_FIRST = RDF + 'first',
      RDF_REST  = RDF + 'rest',
      RDF_NIL   = RDF + 'nil',
      XSD = 'http://www.w3.org/2001/XMLSchema#',
      XSD_INTEGER  = XSD + 'integer',
      XSD_DECIMAL  = XSD + 'decimal',
      XSD_FLOAT   = XSD + 'float',
      XSD_DOUBLE   = XSD + 'double',
      XSD_BOOLEAN  = XSD + 'boolean',
      XSD_TRUE =  '"true"^^'  + XSD_BOOLEAN,
      XSD_FALSE = '"false"^^' + XSD_BOOLEAN,
      XSD_PATTERN        = XSD + 'pattern',
      XSD_MININCLUSIVE   = XSD + 'minInclusive',
      XSD_MINEXCLUSIVE   = XSD + 'minExclusive',
      XSD_MAXINCLUSIVE   = XSD + 'maxInclusive',
      XSD_MAXEXCLUSIVE   = XSD + 'maxExclusive',
      XSD_LENGTH         = XSD + 'length',
      XSD_MINLENGTH      = XSD + 'minLength',
      XSD_MAXLENGTH      = XSD + 'maxLength',
      XSD_TOTALDIGITS    = XSD + 'totalDigits',
      XSD_FRACTIONDIGITS = XSD + 'fractionDigits';

  var numericDatatypes = [
      XSD + "integer",
      XSD + "decimal",
      XSD + "float",
      XSD + "double",
      XSD + "string",
      XSD + "boolean",
      XSD + "dateTime",
      XSD + "nonPositiveInteger",
      XSD + "negativeInteger",
      XSD + "long",
      XSD + "int",
      XSD + "short",
      XSD + "byte",
      XSD + "nonNegativeInteger",
      XSD + "unsignedLong",
      XSD + "unsignedInt",
      XSD + "unsignedShort",
      XSD + "unsignedByte",
      XSD + "positiveInteger"
  ];

  var absoluteIRI = /^[a-z][a-z0-9+.-]*:/i,
    schemeAuthority = /^(?:([a-z][a-z0-9+.-]*:))?(?:\/\/[^\/]*)?/i,
    dotSegments = /(?:^|\/)\.\.?(?:$|[\/#?])/;

  var numericFacets = ["mininclusive", "minexclusive",
                       "maxinclusive", "maxexclusive"];

  // Returns a lowercase version of the given string
  function lowercase(string) {
    return string.toLowerCase();
  }

  // Appends the item to the array and returns the array
  function appendTo(array, item) {
    return array.push(item), array;
  }

  // Appends the items to the array and returns the array
  function appendAllTo(array, items) {
    return array.push.apply(array, items), array;
  }

  // Extends a base object with properties of other objects
  function extend(base) {
    if (!base) base = {};
    for (var i = 1, l = arguments.length, arg; i < l && (arg = arguments[i] || {}); i++)
      for (var name in arg)
        base[name] = arg[name];
    return base;
  }

  // Creates an array that contains all items of the given arrays
  function unionAll() {
    var union = [];
    for (var i = 0, l = arguments.length; i < l; i++)
      union = union.concat.apply(union, arguments[i]);
    return union;
  }

  // N3.js:lib/N3Parser.js<0.4.5>:58 with
  //   s/this\./Parser./g
  // ### `_setBase` sets the base IRI to resolve relative IRIs.
  Parser._setBase = function (baseIRI) {
    if (!baseIRI)
      baseIRI = null;
    else if (baseIRI.indexOf('#') >= 0)
      throw new Error('Invalid base IRI ' + baseIRI);
    // Set base IRI and its components
    if (Parser._base = baseIRI) {
      Parser._basePath   = baseIRI.replace(/[^\/?]*(?:\?.*)?$/, '');
      baseIRI = baseIRI.match(schemeAuthority);
      Parser._baseRoot   = baseIRI[0];
      Parser._baseScheme = baseIRI[1];
    }
  }

  // N3.js:lib/N3Parser.js<0.4.5>:576 with
  //   s/this\./Parser./g
  //   s/token/iri/
  // ### `_resolveIRI` resolves a relative IRI token against the base path,
  // assuming that a base path has been set and that the IRI is indeed relative.
  function _resolveIRI (iri) {
    switch (iri[0]) {
    // An empty relative IRI indicates the base IRI
    case undefined: return Parser._base;
    // Resolve relative fragment IRIs against the base IRI
    case '#': return Parser._base + iri;
    // Resolve relative query string IRIs by replacing the query string
    case '?': return Parser._base.replace(/(?:\?.*)?$/, iri);
    // Resolve root-relative IRIs at the root of the base IRI
    case '/':
      // Resolve scheme-relative IRIs to the scheme
      return (iri[1] === '/' ? Parser._baseScheme : Parser._baseRoot) + _removeDotSegments(iri);
    // Resolve all other IRIs at the base IRI's path
    default: {
      return _removeDotSegments(Parser._basePath + iri);
    }
    }
  }

  // ### `_removeDotSegments` resolves './' and '../' path segments in an IRI as per RFC3986.
  function _removeDotSegments (iri) {
    // Don't modify the IRI if it does not contain any dot segments
    if (!dotSegments.test(iri))
      return iri;

    // Start with an imaginary slash before the IRI in order to resolve trailing './' and '../'
    var result = '', length = iri.length, i = -1, pathStart = -1, segmentStart = 0, next = '/';

    while (i < length) {
      switch (next) {
      // The path starts with the first slash after the authority
      case ':':
        if (pathStart < 0) {
          // Skip two slashes before the authority
          if (iri[++i] === '/' && iri[++i] === '/')
            // Skip to slash after the authority
            while ((pathStart = i + 1) < length && iri[pathStart] !== '/')
              i = pathStart;
        }
        break;
      // Don't modify a query string or fragment
      case '?':
      case '#':
        i = length;
        break;
      // Handle '/.' or '/..' path segments
      case '/':
        if (iri[i + 1] === '.') {
          next = iri[++i + 1];
          switch (next) {
          // Remove a '/.' segment
          case '/':
            result += iri.substring(segmentStart, i - 1);
            segmentStart = i + 1;
            break;
          // Remove a trailing '/.' segment
          case undefined:
          case '?':
          case '#':
            return result + iri.substring(segmentStart, i) + iri.substr(i + 1);
          // Remove a '/..' segment
          case '.':
            next = iri[++i + 1];
            if (next === undefined || next === '/' || next === '?' || next === '#') {
              result += iri.substring(segmentStart, i - 2);
              // Try to remove the parent path from result
              if ((segmentStart = result.lastIndexOf('/')) >= pathStart)
                result = result.substr(0, segmentStart);
              // Remove a trailing '/..' segment
              if (next !== '/')
                return result + '/' + iri.substr(i + 1);
              segmentStart = i + 1;
            }
          }
        }
      }
      next = iri[++i];
    }
    return result + iri.substring(segmentStart);
  }

  // Creates an expression with the given type and attributes
  function expression(expr, attr) {
    var expression = { expression: expr };
    if (attr)
      for (var a in attr)
        expression[a] = attr[a];
    return expression;
  }

  // Creates a path with the given type and items
  function path(type, items) {
    return { type: 'path', pathType: type, items: items };
  }

  // Creates a literal with the given value and type
  function createLiteral(value, type) {
    return '"' + value + '"^^' + type;
  }

  // Creates a new blank node identifier
  function blank() {
    return '_:b' + blankId++;
  };
  var blankId = 0;
  Parser._resetBlanks = function () { blankId = 0; }
  Parser.reset = function () {
    Parser._prefixes = Parser.valueExprDefns = Parser.shapes = Parser.start = Parser.startActs = null; // Reset state.
    Parser._base = Parser._baseIRI = Parser._baseIRIPath = Parser._baseIRIRoot = null;
  }
  var _fileName; // for debugging
  Parser._setFileName = function (fn) { _fileName = fn; }

  // Regular expression and replacement strings to escape strings
  var stringEscapeSequence = /\\u([a-fA-F0-9]{4})|\\U([a-fA-F0-9]{8})|\\(.)/g,
      irirefEscapeSequence = /\\u([a-fA-F0-9]{4})|\\U([a-fA-F0-9]{8})/g,
      stringEscapeReplacements = { '\\': '\\', "'": "'", '"': '"',
                             't': '\t', 'b': '\b', 'n': '\n', 'r': '\r', 'f': '\f' },
      semactEscapeReplacements = { '\\': '\\', '%': '%' },
      fromCharCode = String.fromCharCode;

  function unescape(string, regex, replacements) {
    try {
      string = string.replace(regex, function (sequence, unicode4, unicode8, escapedChar) {
        var charCode;
        if (unicode4) {
          charCode = parseInt(unicode4, 16);
          if (isNaN(charCode)) throw new Error(); // can never happen (regex), but helps performance
          return fromCharCode(charCode);
        }
        else if (unicode8) {
          charCode = parseInt(unicode8, 16);
          if (isNaN(charCode)) throw new Error(); // can never happen (regex), but helps performance
          if (charCode < 0xFFFF) return fromCharCode(charCode);
          return fromCharCode(0xD800 + ((charCode -= 0x10000) >> 10), 0xDC00 + (charCode & 0x3FF));
        }
        else {
          var replacement = replacements[escapedChar];
          if (!replacement) throw new Error();
          return replacement;
        }
      });
      return string;
    }
    catch (error) { return ''; }
  };

  // Translates string escape codes in the string into their textual equivalent
  function unescapeString(string, trimLength) {
    string = string.substring(trimLength, string.length - trimLength);
    return '"' + unescape(string, stringEscapeSequence, stringEscapeReplacements) + '"';
  }

  // Convenience function to return object with p1 key, value p2
  function keyValObject(key, val) {
    var ret = {};
    ret[key] = val;
    return ret;
  }

  // Return object with p1 key, p2 string value
  function unescapeSemanticAction(key, string) {
    string = string.substring(1, string.length - 2);
    return {
      type: "SemAct",
      name: key,
      code: unescape(string, stringEscapeSequence, semactEscapeReplacements)
    };
  }

  function error (msg) {
    Parser._prefixes = Parser.valueExprDefns = Parser.shapes = Parser.start = Parser.startActs = null; // Reset state.
    Parser._base = Parser._baseIRI = Parser._baseIRIPath = Parser._baseIRIRoot = '';
    throw new Error(msg);
  }

  // Expand declared prefix or throw Error
  function expandPrefix (prefix) {
    if (!(prefix in Parser._prefixes))
      error('Parse error; unknown prefix: ' + prefix);
    return Parser._prefixes[prefix];
  }

  // Add a shape to the map
  function addShape (label, shape) {
    if (!Parser.shapes)
      Parser.shapes = {};
    else if (label in Parser.shapes)
      error("Parse error: "+label+" alread defined");
    Parser.shapes[label] = shape;
  }

  function shapeJunction (type, container, elts) {
    if (elts.length === 0) {
      return container;
    } else if (container.type === type) {
      container.shapeExprs = container.shapeExprs.concat(elts);
      return container;
    } else {
      return { type: type, shapeExprs: [container].concat(elts) };
    }
  }

  var EmptyObject = {  };
  var EmptyShape = { type: "Shape" };
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/**/
break;
case 1:return 99;
break;
case 2:return 100;
break;
case 3:return 141;
break;
case 4:return 101;
break;
case 5:return 149;
break;
case 6:return 129;
break;
case 7:return 115;
break;
case 8:return 114;
break;
case 9:return 104;
break;
case 10:return 'ANON';
break;
case 11:return 33;
break;
case 12:return 35;
break;
case 13:return 86;
break;
case 14:return 150;
break;
case 15:return 153;
break;
case 16:return 147;
break;
case 17:return 'NON_TERMINATED_STRING_LITERAL_LONG2';
break;
case 18:return 148;
break;
case 19:return 'NON_TERMINATED_STRING_LITERAL_LONG2';
break;
case 20:return 145;
break;
case 21:return 146;
break;
case 22:return 32;
break;
case 23:return 34;
break;
case 24:return 36;
break;
case 25:return 'IT_VIRTUAL';
break;
case 26:return 52;
break;
case 27:return 56;
break;
case 28:return 87;
break;
case 29:return 97;
break;
case 30:return 96;
break;
case 31:return 98;
break;
case 32:return 105;
break;
case 33:return 28;
break;
case 34:return 24;
break;
case 35:return 31;
break;
case 36:return 117;
break;
case 37:return 118;
break;
case 38:return 119;
break;
case 39:return 120;
break;
case 40:return 108;
break;
case 41:return 109;
break;
case 42:return 110;
break;
case 43:return 121;
break;
case 44:return 122;
break;
case 45:return 37;
break;
case 46:return 123;
break;
case 47:return 46;
break;
case 48:return 48;
break;
case 49:return 54;
break;
case 50:return '||';
break;
case 51:return 63;
break;
case 52:return 68;
break;
case 53:return 76;
break;
case 54:return 77;
break;
case 55:return 130;
break;
case 56:return 132;
break;
case 57:return 157;
break;
case 58:return 30;
break;
case 59:return 116;
break;
case 60:return 85;
break;
case 61:return 94;
break;
case 62:return 107;
break;
case 63:return 69;
break;
case 64:return 126;
break;
case 65:return 127;
break;
case 66:return 128;
break;
case 67:return 140;
break;
case 68:return 152;
break;
case 69:return 143;
break;
case 70:return 144;
break;
case 71:return 7;
break;
case 72:return 'invalid character '+yy_.yytext;
break;
}
},
rules: [/^(?:\s+|(#[^\u000a\u000d]*))/,/^(?:(@((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:)(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|:|[0-9]|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))*(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%)))))?)))/,/^(?:(@(([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:))/,/^(?:(@([A-Za-z])+((-([0-9A-Za-z])+))*))/,/^(?:@)/,/^(?:(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:)(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|:|[0-9]|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))*(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%)))))?)))/,/^(?:(\{((([+-])?([0-9])+))((,(((([+-])?([0-9])+))|\*)?))?\}))/,/^(?:(([+-])?((([0-9])+\.([0-9])*(([Ee]([+-])?([0-9])+)))|((\.)?([0-9])+(([Ee]([+-])?([0-9])+))))))/,/^(?:(([+-])?([0-9])*\.([0-9])+))/,/^(?:(([+-])?([0-9])+))/,/^(?:{ANON})/,/^(?:(<([^\u0000-\u0020<>\"{}|^`\\]|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*>))/,/^(?:((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:))/,/^(?:a\b)/,/^(?:(_:((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|[0-9])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?))/,/^(?:(\{([^%\\]|\\[%\\]|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*%\}))/,/^(?:('''(('|'')?([^\'\\]|(\\[\"\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*'''))/,/^(?:('''))/,/^(?:("""(("|"")?([^\"\\]|(\\[\"\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*"""))/,/^(?:("""))/,/^(?:('([^\u0027\u005c\u000a\u000d]|(\\[\"\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*'))/,/^(?:("([^\u0022\u005c\u000a\u000d]|(\\[\"\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*"))/,/^(?:([Bb][Aa][Ss][Ee]))/,/^(?:([Pp][Rr][Ee][Ff][Ii][Xx]))/,/^(?:([sS][tT][aA][rR][tT]))/,/^(?:([Vv][Ii][Rr][Tt][Uu][Aa][Ll]))/,/^(?:([Cc][Ll][Oo][Ss][Ee][Dd]))/,/^(?:([Ee][Xx][Tt][Rr][Aa]))/,/^(?:([Ll][Ii][Tt][Ee][Rr][Aa][Ll]))/,/^(?:([Bb][Nn][Oo][Dd][Ee]))/,/^(?:([Ii][Rr][Ii]))/,/^(?:([Nn][Oo][Nn][Ll][Ii][Tt][Ee][Rr][Aa][Ll]))/,/^(?:([Pp][Aa][Tt][Tt][Ee][Rr][Nn]))/,/^(?:([Aa][Nn][Dd]))/,/^(?:([Oo][Rr]))/,/^(?:([No][Oo][Tt]))/,/^(?:([Mm][Ii][Nn][Ii][Nn][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Mm][Ii][Nn][Ee][Xx][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Mm][Aa][Xx][Ii][Nn][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Mm][Aa][Xx][Ee][Xx][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Ll][Ee][Nn][Gg][Tt][Hh]))/,/^(?:([Mm][Ii][Nn][Ll][Ee][Nn][Gg][Tt][Hh]))/,/^(?:([Mm][Aa][Xx][Ll][Ee][Nn][Gg][Tt][Hh]))/,/^(?:([Tt][Oo][Tt][Aa][Ll][Dd][Ii][Gg][Ii][Tt][Ss]))/,/^(?:([Ff][Rr][Aa][Cc][Tt][Ii][Oo][Nn][Dd][Ii][Gg][Ii][Tt][Ss]))/,/^(?:=)/,/^(?:\/\/)/,/^(?:\{)/,/^(?:\})/,/^(?:&)/,/^(?:\|\|)/,/^(?:\|)/,/^(?:,)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\$)/,/^(?:!)/,/^(?:\^\^)/,/^(?:\^)/,/^(?:\.)/,/^(?:~)/,/^(?:;)/,/^(?:\*)/,/^(?:\+)/,/^(?:\?)/,/^(?:-)/,/^(?:%)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = ShExJison;
exports.Parser = ShExJison.Parser;
exports.parse = function () { return ShExJison.parse.apply(ShExJison, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}