/* parser generated by jison 0.4.16 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ShExJison = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[6,36,39,40,41,42,43,152,153,155],$V1=[1,23],$V2=[1,9],$V3=[1,25],$V4=[1,10],$V5=[1,27],$V6=[1,17],$V7=[1,26],$V8=[1,28],$V9=[1,24],$Va=[6,36,39,40,41,42,43,152,153],$Vb=[52,58,60,62,108,110,111,112,113],$Vc=[1,37],$Vd=[1,38],$Ve=[1,39],$Vf=[6,28,33,35,36,39,40,41,42,43,52,54,58,60,62,69,74,75,99,100,101,108,110,111,112,113,126,129,130,131,132,152,153,155],$Vg=[6,20,24,27,28,33,35,36,39,40,41,42,43,52,54,58,60,62,69,74,75,87,88,91,97,99,100,101,102,103,104,107,108,110,111,112,113,117,118,120,121,122,123,124,125,126,129,130,131,132,133,135,143,146,147,148,149,150,151,152,153,155,156],$Vh=[52,58,60,62],$Vi=[2,48],$Vj=[6,28,33,35,36,39,40,41,42,43,52,54,58,60,62,69,74,75,102,103,104,108,110,111,112,113,126,129,130,131,132,152,153,155],$Vk=[1,56],$Vl=[1,58],$Vm=[1,61],$Vn=[1,66],$Vo=[1,68],$Vp=[1,69],$Vq=[1,70],$Vr=[1,72],$Vs=[6,20,24,28,33,35,36,39,40,41,42,43,54,69,74,75,126,129,130,131,132,152,153,155],$Vt=[2,190],$Vu=[1,87],$Vv=[1,88],$Vw=[1,89],$Vx=[1,90],$Vy=[1,91],$Vz=[2,85],$VA=[6,28,36,39,40,41,42,43,54,69,74,75,126,129,130,131,132,152,153,155],$VB=[2,22],$VC=[1,99],$VD=[1,100],$VE=[6,28,33,35,36,39,40,41,42,43,54,69,74,75,126,129,130,131,132,152,153,155],$VF=[6,28,33,35,36,39,40,41,42,43,54,69,74,75,108,110,111,112,113,120,121,122,123,124,125,126,129,130,131,132,152,153,155],$VG=[2,112],$VH=[6,28,33,35,36,39,40,41,42,43,54,69,74,75,108,110,111,112,113,126,129,130,131,132,152,153,155],$VI=[40,42,97,107,117,118,135,146,147,148,149,150,151,152],$VJ=[6,28,36,39,40,41,42,43,54,69,74,75,152,153,155],$VK=[1,123],$VL=[1,122],$VM=[1,126],$VN=[1,127],$VO=[1,125],$VP=[1,135],$VQ=[1,136],$VR=[1,137],$VS=[1,138],$VT=[1,142],$VU=[6,28,33,36,39,40,41,42,43,54,69,74,75,126,129,130,131,132,152,153,155],$VV=[6,28,35,36,39,40,41,42,43,54,69,74,75,126,129,130,131,132,152,153,155],$VW=[1,153],$VX=[1,154],$VY=[1,155],$VZ=[1,156],$V_=[1,157],$V$=[1,158],$V01=[1,171],$V11=[1,172],$V21=[1,173],$V31=[1,169],$V41=[1,170],$V51=[1,177],$V61=[28,54,69],$V71=[2,67],$V81=[1,179],$V91=[1,180],$Va1=[28,54,69,74,75],$Vb1=[27,36,40,42,52,58,60,62,87,88,91,97,99,100,101,102,103,104,107,117,118,133,146,147,148,149,150,151,152],$Vc1=[40,42,88,152],$Vd1=[40,42,52,58,60,62,152,153],$Ve1=[40,42,52,58,60,62,88,152],$Vf1=[6,28,33,35,36,39,40,41,42,43,52,54,58,60,62,69,74,75,108,110,111,112,113,120,121,122,123,124,125,126,129,130,131,132,152,153,155],$Vg1=[6,28,33,35,36,39,40,41,42,43,52,54,58,60,62,69,74,75,97,107,108,110,111,112,113,117,118,119,120,121,122,123,124,125,126,129,130,131,132,135,144,146,147,148,149,150,151,152,153,155],$Vh1=[6,28,36,39,40,41,42,43,54,69,74,75,126,152,153,155],$Vi1=[107,117,118,148,149,150,151],$Vj1=[1,208],$Vk1=[6,28,36,39,40,41,42,43,54,69,74,75,97,107,117,118,126,135,146,147,148,149,150,151,152,153,155],$Vl1=[2,71],$Vm1=[1,217],$Vn1=[1,218],$Vo1=[28,54,69,74,75,126,155],$Vp1=[2,83],$Vq1=[1,221],$Vr1=[1,222],$Vs1=[1,223],$Vt1=[1,224],$Vu1=[40,42,97,107,117,118,135,143,146,147,148,149,150,151,152],$Vv1=[2,70],$Vw1=[28,54,69,74,75,155];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"shexDoc":3,"Qdirective_E_Star":4,"Q_O_QnotStartAction_E_Or_QstartActions_E_S_Qstatement_E_Star_C_E_Opt":5,"EOF":6,"directive":7,"O_QnotStartAction_E_Or_QstartActions_E_C":8,"notStartAction":9,"startActions":10,"Qstatement_E_Star":11,"statement":12,"O_QnotStartAction_E_Or_QstartActions_E_S_Qstatement_E_Star_C":13,"start":14,"shape":15,"valueExprDefinition":16,"baseDecl":17,"prefixDecl":18,"valueExprLabel":19,"=":20,"valueClassExpr":21,"Qannotation_E_Star":22,"semanticActions":23,"EXTERNAL":24,"valueClass":25,"QvalueClassJuncts_E_Opt":26,"(":27,")":28,"valueClassJuncts":29,"Q_O_QIT_OR_E_S_QvalueClass_E_C_E_Plus":30,"Q_O_QIT_AND_E_S_QvalueClass_E_C_E_Plus":31,"O_QIT_OR_E_S_QvalueClass_E_C":32,"IT_OR":33,"O_QIT_AND_E_S_QvalueClass_E_C":34,"IT_AND":35,"$":36,"iri":37,"blankNode":38,"IT_BASE":39,"IRIREF":40,"IT_PREFIX":41,"PNAME_NS":42,"IT_start":43,"O_QshapeLabel_E_Or_QshapeDefinition_E_S_QsemanticActions_E_C":44,"shapeLabel":45,"shapeDefinition":46,"QnonLiteralKind_E_Opt":47,"QstringFacet_E_Star":48,"nonLiteralKind":49,"stringFacet":50,"Q_O_QincludeSet_E_Or_QinclPropertySet_E_Or_QIT_CLOSED_E_C_E_Star":51,"{":52,"QsomeOfShape_E_Opt":53,"}":54,"O_QincludeSet_E_Or_QinclPropertySet_E_Or_QIT_CLOSED_E_C":55,"includeSet":56,"inclPropertySet":57,"IT_CLOSED":58,"someOfShape":59,"&":60,"QshapeLabel_E_Plus":61,"IT_EXTRA":62,"Qpredicate_E_Plus":63,"predicate":64,"groupShape":65,"multiElementSomeOf":66,"Q_O_QGT_PIPE_E_S_QgroupShape_E_C_E_Plus":67,"O_QGT_PIPE_E_S_QgroupShape_E_C":68,"|":69,"innerShape":70,"multiElementGroup":71,"unaryShape":72,"groupShape_right":73,",":74,";":75,"Q_O_QGT_COMMA_E_S_QunaryShape_E_C_E_Plus":76,"QGT_COMMA_E_Opt":77,"O_QGT_COMMA_E_S_QunaryShape_E_C":78,"tripleConstraint":79,"include":80,"encapsulatedShape":81,"Qcardinality_E_Opt":82,"cardinality":83,"annotation":84,"senseFlags":85,"^":86,"!":87,"a":88,"negatableValueClass":89,"valueClass1":90,"IT_LITERAL":91,"QxsFacet_E_Star":92,"QstringFacet_E_Plus":93,"shapeOrRef":94,"datatype":95,"valueSet":96,".":97,"xsFacet":98,"IT_IRI":99,"IT_BNODE":100,"IT_NONLITERAL":101,"ATPNAME_LN":102,"ATPNAME_NS":103,"@":104,"numericFacet":105,"stringLength":106,"INTEGER":107,"IT_PATTERN":108,"string":109,"~":110,"IT_LENGTH":111,"IT_MINLENGTH":112,"IT_MAXLENGTH":113,"numericRange":114,"rawNumeric":115,"numericLength":116,"DECIMAL":117,"DOUBLE":118,"^^":119,"IT_MININCLUSIVE":120,"IT_MINEXCLUSIVE":121,"IT_MAXINCLUSIVE":122,"IT_MAXEXCLUSIVE":123,"IT_TOTALDIGITS":124,"IT_FRACTIONDIGITS":125,"//":126,"O_Qiri_E_Or_Qliteral_E_C":127,"literal":128,"*":129,"+":130,"?":131,"REPEAT_RANGE":132,"[":133,"Qvalue_E_Star":134,"]":135,"value":136,"iriRange":137,"Q_O_Q_TILDE_E_S_Qexclusion_E_Star_C_E_Opt":138,"Qexclusion_E_Plus":139,"Qexclusion_E_Star":140,"exclusion":141,"O_Q_TILDE_E_S_Qexclusion_E_Star_C":142,"-":143,"LANGTAG":144,"numericLiteral":145,"IT_true":146,"IT_false":147,"STRING_LITERAL1":148,"STRING_LITERAL2":149,"STRING_LITERAL_LONG1":150,"STRING_LITERAL_LONG2":151,"PNAME_LN":152,"BLANK_NODE_LABEL":153,"codeDecl":154,"%":155,"CODE":156,"QcodeDecl_E_Plus":157,"QcodeDecl_E_Star":158,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",20:"=",24:"EXTERNAL",27:"(",28:")",33:"IT_OR",35:"IT_AND",36:"$",39:"IT_BASE",40:"IRIREF",41:"IT_PREFIX",42:"PNAME_NS",43:"IT_start",52:"{",54:"}",58:"IT_CLOSED",60:"&",62:"IT_EXTRA",69:"|",74:",",75:";",86:"^",87:"!",88:"a",91:"IT_LITERAL",97:".",99:"IT_IRI",100:"IT_BNODE",101:"IT_NONLITERAL",102:"ATPNAME_LN",103:"ATPNAME_NS",104:"@",107:"INTEGER",108:"IT_PATTERN",110:"~",111:"IT_LENGTH",112:"IT_MINLENGTH",113:"IT_MAXLENGTH",117:"DECIMAL",118:"DOUBLE",119:"^^",120:"IT_MININCLUSIVE",121:"IT_MINEXCLUSIVE",122:"IT_MAXINCLUSIVE",123:"IT_MAXEXCLUSIVE",124:"IT_TOTALDIGITS",125:"IT_FRACTIONDIGITS",126:"//",129:"*",130:"+",131:"?",132:"REPEAT_RANGE",133:"[",135:"]",143:"-",144:"LANGTAG",146:"IT_true",147:"IT_false",148:"STRING_LITERAL1",149:"STRING_LITERAL2",150:"STRING_LITERAL_LONG1",151:"STRING_LITERAL_LONG2",152:"PNAME_LN",153:"BLANK_NODE_LABEL",155:"%",156:"CODE"},
productions_: [0,[3,3],[4,0],[4,2],[8,1],[8,1],[11,0],[11,2],[13,2],[5,0],[5,1],[12,1],[12,1],[9,1],[9,1],[9,1],[7,1],[7,1],[16,5],[16,2],[21,2],[21,4],[26,0],[26,1],[29,1],[29,1],[32,2],[30,1],[30,2],[34,2],[31,1],[31,2],[19,2],[19,2],[17,2],[18,3],[14,3],[44,1],[44,2],[15,5],[47,0],[47,1],[48,0],[48,2],[46,4],[55,1],[55,1],[55,1],[51,0],[51,2],[53,0],[53,1],[56,2],[61,1],[61,2],[57,2],[63,1],[63,2],[59,1],[59,1],[66,2],[68,2],[67,1],[67,2],[70,1],[70,1],[65,2],[73,0],[73,1],[73,1],[73,2],[77,0],[77,1],[77,1],[71,3],[78,2],[78,2],[76,1],[76,2],[72,1],[72,1],[72,1],[81,6],[82,0],[82,1],[22,0],[22,2],[80,2],[45,1],[45,1],[79,5],[79,6],[85,1],[85,2],[85,1],[85,2],[64,1],[64,1],[25,1],[25,2],[89,1],[89,1],[90,2],[90,1],[90,2],[90,2],[90,3],[90,2],[90,1],[90,2],[90,1],[90,1],[92,0],[92,2],[49,1],[49,1],[49,1],[93,1],[93,2],[94,1],[94,1],[94,2],[94,1],[98,1],[98,1],[50,2],[50,2],[50,2],[106,1],[106,1],[106,1],[105,2],[105,2],[115,1],[115,1],[115,1],[115,3],[114,1],[114,1],[114,1],[114,1],[116,1],[116,1],[95,1],[84,3],[127,1],[127,1],[83,1],[83,1],[83,1],[83,1],[96,3],[134,0],[134,2],[136,1],[136,1],[137,2],[137,2],[140,0],[140,2],[142,2],[138,0],[138,1],[139,1],[139,2],[141,2],[141,3],[128,1],[128,2],[128,3],[128,1],[128,1],[128,1],[145,1],[145,1],[145,1],[109,1],[109,1],[109,1],[109,1],[37,1],[37,1],[37,1],[38,1],[154,3],[154,3],[10,1],[157,1],[157,2],[23,1],[158,0],[158,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        var valueExprDefns = Parser.valueExprDefns ? { valueExprDefns: Parser.valueExprDefns } : {};
        var startObj = Parser.start ? { start: Parser.start } : {};
        var startActs = Parser.startActs ? { startActs: Parser.startActs } : {};
        var ret = extend({ type: "Schema", prefixes: Parser._prefixes || {} }, // Build return object from
                         valueExprDefns, startActs, startObj,                    // components in parser state
                         {shapes: Parser.shapes});                            // maintaining intuitve order.
        if (Parser._base !== null)
          ret.base = Parser._base;
        Parser.reset();
        return ret;
      
break;
case 18:
 // t: 1val1vsMinusiri3
        if (Parser.valueExprDefns === null || Parser.valueExprDefns === undefined)
          Parser.valueExprDefns = {  };
        Parser.valueExprDefns[$$[$0-4]] = { type: "ValueExprDefn", "valueExpr": $$[$0-2] };
        if ($$[$0])
          Parser.valueExprDefns[$$[$0-4]].semActs = $$[$0].semActs;
        if ($$[$0-1].length)
          Parser.valueExprDefns[$$[$0-4]].annotations = $$[$0-1];
      
break;
case 19:
 // t: @@
        if (Parser.valueExprDefns === null || Parser.valueExprDefns === undefined)
          Parser.valueExprDefns = {  };
        Parser.valueExprDefns[$$[$0-1]] = null;
      
break;
case 20:
this.$ = $$[$0] ? { type: $$[$0][0], valueExprs: [$$[$0-1]].concat($$[$0][1]) } : $$[$0-1];
break;
case 21:
this.$ = $$[$0-1] ? { type: $$[$0-1][0], valueExprs: [$$[$0-2]].concat($$[$0-1][1]) } : $$[$0-2];
break;
case 22:
this.$ = undefined;
break;
case 24:
this.$ = [ "ValueOr", $$[$0] ];
break;
case 25:
this.$ = [ "ValueAnd", $$[$0] ];;
break;
case 26: case 29:
this.$ = $$[$0];
break;
case 27: case 30:
this.$ = [$$[$0]];
break;
case 28: case 31:
this.$ = $$[$0-1].concat([$$[$0]]);
break;
case 32:
this.$ = $$[$0] // t: 1val1vcrefIRIREF;
break;
case 33:
this.$ = $$[$0] // t: 1val1vcrefbnode;
break;
case 34:
 // t: @@
        Parser._setBase(Parser._base === null ||
                    absoluteIRI.test($$[$0].slice(1, -1)) ? $$[$0].slice(1, -1) : _resolveIRI($$[$0].slice(1, -1)));
      
break;
case 35:
 // t: ShExParser-test.js/with pre-defined prefixes
        var prefixIRI;
        if (this._base === null || absoluteIRI.test($$[$0].slice(1, -1)))
          prefixIRI = $$[$0].slice(1, -1);
        else
          prefixIRI = _resolveIRI($$[$0].slice(1, -1));
        Parser._prefixes[$$[$0-1].slice(0, -1)] = prefixIRI;
      
break;
case 36:

        if (Parser.start)
          error("Parse error: start alread defined as " + Parser.start);
        Parser.start = $$[$0]; // t: startInline
      
break;
case 38:
 // t: startInline / startInline
        addShape(this.$ = blank(), extend($$[$0-1], $$[$0]));
    
break;
case 39:
 // t: 1dot
        addShape($$[$0-4],  extend(extend(extend($$[$0-3] ? {nodeKind: $$[$0-3]} : {}, $$[$0-2]), $$[$0-1]), $$[$0]));
    
break;
case 42: case 48:
this.$ = {};
break;
case 43: case 118:

        if (Object.keys($$[$0-1]).indexOf(Object.keys($$[$0])[0]) !== -1) {
          error("Parse error: facet "+Object.keys($$[$0])[0]+" defined multiple times");
        }
        this.$ = extend($$[$0-1], $$[$0])
      
break;
case 44:
 // t: 1dotInherit3
        var exprObj = $$[$0-1] ? { expression: $$[$0-1] } : {}; // t: 0, 0Inherit1
        this.$ = extend({ type: "Shape"}, exprObj, $$[$0-3]);
      
break;
case 45:
this.$ = [ "inherit", $$[$0] ] // t: 1dotInherit1;
break;
case 46:
this.$ = [ "extra", $$[$0] ] // t: 1dotExtra1, 3groupdot3Extra, 3groupdotExtra3;
break;
case 47:
this.$ = [ "closed", true ] // t: 1dotClosed;
break;
case 49:

      if ($$[$0][0] === "closed")
        $$[$0-1]["closed"] = true; // t: 1dotClosed
      else if ($$[$0][0] in $$[$0-1])
        $$[$0-1][$$[$0][0]] = unionAll($$[$0-1][$$[$0][0]], $$[$0][1]); // t: 1dotInherit3, 3groupdot3Extra, 3groupdotExtra3
      else
        $$[$0-1][$$[$0][0]] = $$[$0][1]; // t: 1dotInherit1
      this.$ = $$[$0-1];
    
break;
case 52:
this.$ = $$[$0] // t: 1dotInherit1, 1dot3Inherit, 1dotInherit3;
break;
case 53:
this.$ = [$$[$0]] // t: 1dotInherit1, 1dot3Inherit, 1dotInherit3;
break;
case 54:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1dotInherit3;
break;
case 55:
this.$ = $$[$0] // t: 1dotExtra1, 3groupdot3Extra;
break;
case 56:
this.$ = [$$[$0]] // t: 1dotExtra1, 3groupdot3Extra, 3groupdotExtra3;
break;
case 57:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 3groupdotExtra3;
break;
case 60:
this.$ = { type: "SomeOf", expressions: unionAll([$$[$0-1]], $$[$0]) } // t: 2someOfdot;
break;
case 61:
this.$ = $$[$0] // t: 2someOfdot;
break;
case 62:
this.$ = [$$[$0]] // t: 2someOfdot;
break;
case 63:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 2someOfdot;
break;
case 66:
this.$ = $$[$0] ? { type: "EachOf", expressions: unionAll([$$[$0-1]], $$[$0]) } : $$[$0-1] // t: 2groupOfdot;
break;
case 67: case 68: case 69:
this.$ = null;
break;
case 70:
this.$ = $$[$0-1];
break;
case 74:
this.$ = { type: "EachOf", expressions: unionAll([$$[$0-2]], $$[$0-1]) } // t: 2groupOfdot;
break;
case 75: case 76:
this.$ = $$[$0] // t: 2groupOfdot;
break;
case 77:
this.$ = [$$[$0]] // t: 2groupOfdot;
break;
case 78:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 2groupOfdot;
break;
case 82:

        // t: open1dotOr1dot, !openopen1dotcloseCode1closeCode2
        this.$ = $$[$0-4];
        // Copy all of the new attributes into the encapsulated shape.
        if ("min" in $$[$0-2]) { this.$.min = $$[$0-2].min; } // t: open3groupdotclosecard23Annot3Code2
        if ("max" in $$[$0-2]) { this.$.max = $$[$0-2].max; } // t: open3groupdotclosecard23Annot3Code2
        if ($$[$0-1].length) { this.$.annotations = $$[$0-1]; } // t: open3groupdotcloseAnnot3, open3groupdotclosecard23Annot3Code2
        if ($$[$0]) { this.$.semActs = "semActs" in $$[$0-4] ? $$[$0-4].semActs.concat($$[$0].semActs) : $$[$0].semActs; } // t: open3groupdotcloseCode1, !open1dotOr1dot
      
break;
case 83:
this.$ = {} // t: 1dot;
break;
case 85:
this.$ = [] // t: 1dot, 1dotAnnot3;
break;
case 86:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1dotAnnot3;
break;
case 87:
this.$ = { type: "Inclusion", "include": $$[$0] } // t: 2groupInclude1;
break;
case 90:

        // $$[$0]: t: 1dotCode1
        this.$ = extend({ type: "TripleConstraint", predicate: $$[$0-4]}, { valueExpr: $$[$0-3] }, $$[$0-2], $$[$0]); // t: 1dot
        if ($$[$0-1].length)
          this.$["annotations"] = $$[$0-1]; // t: 1dotAnnot3
      
break;
case 91:

        // %6: t: 1inversedotCode1
        this.$ = extend({ type: "TripleConstraint" }, $$[$0-5], { predicate: $$[$0-4] }, { valueExpr: $$[$0-3] }, $$[$0-2], $$[$0]); // t: 1inversedot, 1negatedinversedot
        if ($$[$0-1].length)
          this.$["annotations"] = $$[$0-1]; // t: 1inversedotAnnot3
      
break;
case 92:
this.$ = { inverse: true } // t: 1inversedot;
break;
case 93:
this.$ = { inverse: true, negated: true } // t: 1negatedinversedot;
break;
case 94:
this.$ = { negated: true } // t: 1negateddot;
break;
case 95:
this.$ = { inverse: true, negated: true } // t: 1inversenegateddot;
break;
case 97:
this.$ = RDF_TYPE // t: 1AvalA;
break;
case 99:
this.$ = extend({ negated: true}, $$[$0]);
break;
case 101:
this.$ = { type: "ValueRef", valueExprRef: $$[$0] } // t: 1val1vsMinusiri3;
break;
case 102:
this.$ = extend({ type: "ValueClass", nodeKind: "literal" }, $$[$0]) // t: 1literalPattern;
break;
case 103:
this.$ = { type: "ValueClass", nodeKind: $$[$0] } // t: 1iriPattern;
break;
case 104:
this.$ = extend({ type: "ValueClass", nodeKind: $$[$0-1] }, $$[$0]) // t: 1iriPattern;
break;
case 105:
this.$ = { type: "ValueClass", nodeKind: $$[$0-1], reference: $$[$0] } // t: 1iriRef1;
break;
case 106:
this.$ = extend({ type: "ValueClass", nodeKind: $$[$0-2], reference: $$[$0-1] }, $$[$0]) // t: 1iriRefLength1;
break;
case 107:

        if (numericDatatypes.indexOf($$[$0-1]) === -1)
          numericFacets.forEach(function (facet) {
            if (facet in $$[$0])
              error("Parse error: facet "+facet+" not allowed for unknown datatype " + $$[$0-1]);
          });
        this.$ = extend({ type: "ValueClass", datatype: $$[$0-1] }, $$[$0]) // t: 1datatype
      
break;
case 108:
this.$ = { type: "ValueClass", reference: $$[$0] } // t: 1dotRef1;
break;
case 109:
this.$ = extend({ type: "ValueClass", reference: $$[$0-1] }, $$[$0]) // t: 1dotRef1;
break;
case 110:
this.$ = { type: "ValueClass", values: $$[$0] } // t: 1val1IRIREF;
break;
case 111:
this.$ = { type: "ValueClass" } // t: 1dot;
break;
case 112:
this.$ = {} // t: 1literalPattern;
break;
case 113:

        if (Object.keys($$[$0-1]).indexOf(Object.keys($$[$0])[0]) !== -1) {
          error("Parse error: facet "+Object.keys($$[$0])[0]+" defined multiple times");
        }
        this.$ = extend($$[$0-1], $$[$0]) // t: 1literalLength
      
break;
case 114:
this.$ = "iri" // t: 1iriPattern;
break;
case 115:
this.$ = "bnode" // t: 1bnodeLength;
break;
case 116:
this.$ = "nonliteral" // t: 1nonliteralLength;
break;
case 119:
 // t: 1dotRefLNex
        $$[$0] = $$[$0].substr(1, $$[$0].length-1);
        var namePos = $$[$0].indexOf(':');
        this.$ = expandPrefix($$[$0].substr(0, namePos)) + $$[$0].substr(namePos + 1);
      
break;
case 120:
 // t: 1dotRefNS1
        $$[$0] = $$[$0].substr(1, $$[$0].length-1);
        this.$ = expandPrefix($$[$0].substr(0, $$[$0].length - 1));
      
break;
case 121:
 this.$ = $$[$0]; 
break;
case 122:
 // t: 1dotInline1
        addShape(this.$ = blank(), $$[$0]);
      
break;
case 125:
this.$ = keyValObject($$[$0-1], parseInt($$[$0], 10)) // t: 1literalLength;
break;
case 126: case 127:
this.$ = { pattern: $$[$0].substr(1, $$[$0].length-2) } // t: 1literalPattern;
break;
case 128:
this.$ = "length" // t: 1literalLength;
break;
case 129:
this.$ = "minlength" // t: 1literalMinlength;
break;
case 130:
this.$ = "maxlength" // t: 1literalMaxlength;
break;
case 131:
this.$ = keyValObject($$[$0-1], $$[$0]) // t: 1literalMininclusive;
break;
case 132:
this.$ = keyValObject($$[$0-1], parseInt($$[$0], 10)) // t: 1literalTotaldigits;
break;
case 133:
this.$ = parseInt($$[$0], 10);;
break;
case 134: case 135:
this.$ = parseFloat($$[$0]);;
break;
case 136:

        $$[$0-2] = $$[$0-2].substr(1, $$[$0-2].length - 2);
        if ($$[$0] === XSD_DECIMAL || $$[$0] === XSD_FLOAT || $$[$0] === XSD_DOUBLE)
          this.$ = parseFloat($$[$0-2]);
        else if (numericDatatypes.indexOf($$[$0]) !== -1)
          this.$ = parseInt($$[$0-2])
        else
          error("Parse error: numeric range facet expected numeric datatype instead of " + $$[$0]);
      
break;
case 137:
this.$ = "mininclusive" // t: 1literalMininclusive;
break;
case 138:
this.$ = "minexclusive" // t: 1literalMinexclusive;
break;
case 139:
this.$ = "maxinclusive" // t: 1literalMaxinclusive;
break;
case 140:
this.$ = "maxexclusive" // t: 1literalMaxexclusive;
break;
case 141:
this.$ = "totaldigits" // t: 1literalTotaldigits;
break;
case 142:
this.$ = "fractiondigits" // t: 1literalFractiondigits;
break;
case 144:
this.$ = { type: "Annotation", predicate: $$[$0-1], object: $$[$0] } // t: 1dotAnnotIRIREF;
break;
case 147:
this.$ = { min:0, max:"*" } // t: 1cardStar;
break;
case 148:
this.$ = { min:1, max:"*" } // t: 1cardPlus;
break;
case 149:
this.$ = { min:0, max:1 } // t: 1cardOpt;
break;
case 150:

        $$[$0] = $$[$0].substr(1, $$[$0].length-2);
        var nums = $$[$0].match(/(\d+)/g);
        this.$ = { min: parseInt(nums[0], 10) }; // t: 1card2blank, 1card2Star
        if (nums.length === 2)
            this.$["max"] = parseInt(nums[1], 10); // t: 1card23
        else if ($$[$0].indexOf(',') === -1) // t: 1card2
            this.$["max"] = parseInt(nums[0], 10);
        else
            this.$["max"] = "*";
      
break;
case 151:
this.$ = $$[$0-1] // t: 1val1IRIREF;
break;
case 152:
this.$ = [] // t: 1val1IRIREF;
break;
case 153:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1val1IRIREF;
break;
case 156:

        if ($$[$0]) {
          this.$ = {  // t: 1val1iriStem, 1val1iriStemMinusiri3
            type: "StemRange",
            stem: $$[$0-1]
          };
          if ($$[$0].length)
            this.$["exclusions"] = $$[$0]; // t: 1val1iriStemMinusiri3
        } else {
          this.$ = $$[$0-1]; // t: 1val1IRIREF, 1AvalA
        }
      
break;
case 157:
this.$ = { type: "StemRange", stem: { type: "Wildcard" }, exclusions: $$[$0] } // t:1val1dotMinusiri3, 1val1dotMinusiriStem3;
break;
case 158:
this.$ = [] // t: 1val1iriStem, 1val1iriStemMinusiri3;
break;
case 159:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1val1iriStemMinusiri3;
break;
case 160: case 165:
this.$ = $$[$0] // t: 1val1iriStemMinusiri3;
break;
case 163:
this.$ = [$$[$0]] // t:1val1dotMinusiri3, 1val1dotMinusiriStem3;
break;
case 164:
this.$ = appendTo($$[$0-1], $$[$0]) // t:1val1dotMinusiri3, 1val1dotMinusiriStem3;
break;
case 166:
this.$ = { type: "Stem", stem: $$[$0-1] } // t: 1val1iriStemMinusiriStem3;
break;
case 168:
this.$ = $$[$0-1] + lowercase($$[$0]) // t: 1val1LANGTAG;
break;
case 169:
this.$ = $$[$0-2] + '^^' + $$[$0] // t: 1val1Datatype;
break;
case 171:
this.$ = XSD_TRUE // t: 1val1true;
break;
case 172:
this.$ = XSD_FALSE // t: 1val1false;
break;
case 173:
this.$ = createLiteral($$[$0], XSD_INTEGER) // t: 1val1INTEGER;
break;
case 174:
this.$ = createLiteral($$[$0], XSD_DECIMAL) // t: 1val1DECIMAL;
break;
case 175:
this.$ = createLiteral($$[$0].toLowerCase(), XSD_DOUBLE) // t: 1val1DOUBLE;
break;
case 176:
this.$ = unescapeString($$[$0], 1) // t: 1val1STRING_LITERAL1;
break;
case 177:
this.$ = unescapeString($$[$0], 1) // t: 1val1STRING_LITERAL2;
break;
case 178:
this.$ = unescapeString($$[$0], 3) // t: 1val1STRING_LITERAL_LONG1;
break;
case 179:
this.$ = unescapeString($$[$0], 3) // t: 1val1STRING_LITERAL_LONG2;
break;
case 180:
this.$ = this._base === null || absoluteIRI.test($$[$0].slice(1, -1)) ? unescape($$[$0].slice(1,-1), irirefEscapeSequence) : _resolveIRI(unescape($$[$0].slice(1,-1), irirefEscapeSequence)) // t: 1dot;
break;
case 181:
 // t:1dotPNex, 1dotPNdefault, ShExParser-test.js/with pre-defined prefixes
        var namePos = $$[$0].indexOf(':');
        this.$ = expandPrefix($$[$0].substr(0, namePos)) + $$[$0].substr(namePos + 1);
    
break;
case 182:
 // t: 1dotNS2, 1dotNSdefault, ShExParser-test.js/PNAME_NS with pre-defined prefixes
        this.$ = expandPrefix($$[$0].substr(0, $$[$0].length - 1));
    
break;
case 184:
this.$ = unescapeSemanticAction($$[$0-1], $$[$0]) // t: 1dotCode1;
break;
case 185:
this.$ = { type: "SemAct", name: $$[$0-1] } // t: @@;
break;
case 186:

        Parser.startActs = $$[$0]; // t: startCode1
      
break;
case 187:
this.$ = [$$[$0]] // t: startCode1;
break;
case 188:
this.$ = appendTo($$[$0-1], $$[$0]) // t: startCode3;
break;
case 189:
this.$ = $$[$0].length ? { semActs: $$[$0] } : null; // t: 1dotCode1/2oneOfDot;
break;
case 190:
this.$ = [] // t: 1dot, 1dotCode1;
break;
case 191:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1dotCode1;
break;
}
},
table: [o($V0,[2,2],{3:1,4:2}),{1:[3]},{5:3,6:[2,9],7:4,8:8,9:11,10:12,13:5,14:13,15:14,16:15,17:6,18:7,19:19,36:$V1,37:21,38:22,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6,45:18,152:$V7,153:$V8,154:20,155:$V9,157:16},{6:[1,29]},o($V0,[2,3]),{6:[2,10]},o($V0,[2,16]),o($V0,[2,17]),o($Va,[2,6],{11:30}),{40:[1,31]},{42:[1,32]},o($Va,[2,4]),o($Va,[2,5]),o($Va,[2,13]),o($Va,[2,14]),o($Va,[2,15]),o($Va,[2,186],{154:33,155:$V9}),{20:[1,34]},o($Vb,[2,40],{47:35,49:36,99:$Vc,100:$Vd,101:$Ve}),{20:[1,40],24:[1,41]},o($V0,[2,187]),o($Vf,[2,88]),o($Vf,[2,89]),{37:42,38:43,40:$V3,42:$V5,152:$V7,153:$V8},{37:44,40:$V3,42:$V5,152:$V7},o($Vg,[2,180]),o($Vg,[2,181]),o($Vg,[2,182]),o([6,20,24,28,33,35,36,39,40,41,42,43,52,54,58,60,62,69,74,75,99,100,101,108,110,111,112,113,126,129,130,131,132,152,153,155],[2,183]),{1:[2,1]},{6:[2,8],7:46,9:47,12:45,14:13,15:14,16:15,17:6,18:7,19:19,36:$V1,37:21,38:22,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6,45:18,152:$V7,153:$V8},o($V0,[2,34]),{40:[1,48]},o($V0,[2,188]),o($Vh,$Vi,{37:21,38:22,44:49,45:50,46:51,51:52,40:$V3,42:$V5,152:$V7,153:$V8}),o($Vb,[2,42],{48:53}),o($Vb,[2,41]),o($Vj,[2,114]),o($Vj,[2,115]),o($Vj,[2,116]),o($Vh,$Vi,{51:52,21:54,25:55,89:57,90:59,19:60,49:62,95:63,94:64,96:65,37:67,46:71,27:$Vk,36:$V1,40:$V3,42:$V5,87:$Vl,91:$Vm,97:$Vn,99:$Vc,100:$Vd,101:$Ve,102:$Vo,103:$Vp,104:$Vq,133:$Vr,152:$V7}),o($Va,[2,19]),o($Vs,[2,32]),o($Vs,[2,33]),{155:[1,74],156:[1,73]},o($Va,[2,7]),o($Va,[2,11]),o($Va,[2,12]),o($V0,[2,35]),o($Va,[2,36]),o($Va,[2,37]),o($V0,$Vt,{23:75,158:76}),{52:[1,77],55:78,56:79,57:80,58:[1,81],60:[1,82],62:[1,83]},o($Vh,$Vi,{51:52,46:84,50:85,106:86,108:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy}),o([6,36,39,40,41,42,43,126,152,153,155],$Vz,{22:92}),o($VA,$VB,{26:93,29:94,30:95,31:96,32:97,34:98,33:$VC,35:$VD}),o($Vh,$Vi,{51:52,89:57,90:59,19:60,49:62,95:63,94:64,96:65,37:67,46:71,25:101,36:$V1,40:$V3,42:$V5,87:$Vl,91:$Vm,97:$Vn,99:$Vc,100:$Vd,101:$Ve,102:$Vo,103:$Vp,104:$Vq,133:$Vr,152:$V7}),o($VE,[2,98]),o($Vh,$Vi,{51:52,90:59,19:60,49:62,95:63,94:64,96:65,37:67,46:71,89:102,36:$V1,40:$V3,42:$V5,91:$Vm,97:$Vn,99:$Vc,100:$Vd,101:$Ve,102:$Vo,103:$Vp,104:$Vq,133:$Vr,152:$V7}),o($VE,[2,100]),o($VE,[2,101]),o($VF,$VG,{92:103}),o($VE,[2,103],{51:52,46:71,106:86,93:104,94:105,50:106,52:$Vi,58:$Vi,60:$Vi,62:$Vi,102:$Vo,103:$Vp,104:$Vq,108:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy}),o($VF,$VG,{92:107}),o($VE,[2,108],{106:86,50:106,93:108,108:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy}),o($VE,[2,110]),o($VE,[2,111]),o([6,28,33,35,36,39,40,41,42,43,54,69,74,75,97,107,108,110,111,112,113,117,118,120,121,122,123,124,125,126,129,130,131,132,135,146,147,148,149,150,151,152,153,155],[2,143]),o($VH,[2,119]),o($VH,[2,120]),{37:21,38:22,40:$V3,42:$V5,45:109,152:$V7,153:$V8},o($VH,[2,122]),o($VI,[2,152],{134:110}),o($VJ,[2,184]),o($VJ,[2,185]),o($Va,[2,38]),o([6,28,36,39,40,41,42,43,54,69,74,75,152,153],[2,189],{154:111,155:$V9}),{27:$VK,37:124,40:$V3,42:$V5,53:112,54:[2,50],59:113,60:$VL,64:120,65:114,66:115,72:116,79:117,80:118,81:119,85:121,86:$VM,87:$VN,88:$VO,152:$V7},o($Vh,[2,49]),o($Vh,[2,45]),o($Vh,[2,46]),o($Vh,[2,47]),{37:21,38:22,40:$V3,42:$V5,45:129,61:128,152:$V7,153:$V8},{37:124,40:$V3,42:$V5,63:130,64:131,88:$VO,152:$V7},o($V0,$Vt,{158:76,23:132}),o($Vb,[2,43]),{107:[1,133]},{109:134,148:$VP,149:$VQ,150:$VR,151:$VS},{109:139,148:$VP,149:$VQ,150:$VR,151:$VS},{107:[2,128]},{107:[2,129]},{107:[2,130]},o($V0,$Vt,{158:76,23:140,84:141,126:$VT}),o($VA,[2,20]),o($VA,[2,23]),o($VA,[2,24],{32:143,33:$VC}),o($VA,[2,25],{34:144,35:$VD}),o($VU,[2,27]),o($VV,[2,30]),o($Vh,$Vi,{51:52,89:57,90:59,19:60,49:62,95:63,94:64,96:65,37:67,46:71,25:145,36:$V1,40:$V3,42:$V5,87:$Vl,91:$Vm,97:$Vn,99:$Vc,100:$Vd,101:$Ve,102:$Vo,103:$Vp,104:$Vq,133:$Vr,152:$V7}),o($Vh,$Vi,{51:52,89:57,90:59,19:60,49:62,95:63,94:64,96:65,37:67,46:71,25:146,36:$V1,40:$V3,42:$V5,87:$Vl,91:$Vm,97:$Vn,99:$Vc,100:$Vd,101:$Ve,102:$Vo,103:$Vp,104:$Vq,133:$Vr,152:$V7}),{26:147,28:$VB,29:94,30:95,31:96,32:97,33:$VC,34:98,35:$VD},o($VE,[2,99]),o($VE,[2,102],{106:86,98:148,50:149,105:150,114:151,116:152,108:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy,120:$VW,121:$VX,122:$VY,123:$VZ,124:$V_,125:$V$}),o($VE,[2,104],{106:86,50:159,108:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy}),o($VE,[2,105],{106:86,50:106,93:160,108:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy}),o($VH,[2,117]),o($VE,[2,107],{106:86,98:148,50:149,105:150,114:151,116:152,108:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy,120:$VW,121:$VX,122:$VY,123:$VZ,124:$V_,125:$V$}),o($VE,[2,109],{106:86,50:159,108:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy}),o($VH,[2,121]),{37:165,40:$V3,42:$V5,97:[1,166],107:$V01,109:167,117:$V11,118:$V21,128:164,135:[1,161],136:162,137:163,145:168,146:$V31,147:$V41,148:$VP,149:$VQ,150:$VR,151:$VS,152:$V7},o($VJ,[2,191]),{54:[1,174]},{54:[2,51]},{54:[2,58],67:175,68:176,69:$V51},{54:[2,59]},o($V61,$V71,{73:178,76:181,78:182,74:$V81,75:$V91}),o($Va1,[2,79]),o($Va1,[2,80]),o($Va1,[2,81]),o($Vh,$Vi,{51:52,25:55,89:57,90:59,19:60,49:62,95:63,94:64,96:65,37:67,46:71,21:183,27:$Vk,36:$V1,40:$V3,42:$V5,87:$Vl,91:$Vm,97:$Vn,99:$Vc,100:$Vd,101:$Ve,102:$Vo,103:$Vp,104:$Vq,133:$Vr,152:$V7}),{37:124,40:$V3,42:$V5,64:184,88:$VO,152:$V7},{37:21,38:22,40:$V3,42:$V5,45:185,152:$V7,153:$V8},{27:$VK,37:124,40:$V3,42:$V5,60:$VL,64:120,65:190,66:188,70:186,71:187,72:189,79:117,80:118,81:119,85:121,86:$VM,87:$VN,88:$VO,152:$V7},o($Vb1,[2,96]),o($Vb1,[2,97]),o($Vc1,[2,92],{87:[1,191]}),o($Vc1,[2,94],{86:[1,192]}),o($Vh,[2,52],{37:21,38:22,45:193,40:$V3,42:$V5,152:$V7,153:$V8}),o($Vd1,[2,53]),o($Vh,[2,55],{37:124,64:194,40:$V3,42:$V5,88:$VO,152:$V7}),o($Ve1,[2,56]),o($Va,[2,39]),o($Vf1,[2,125]),o($Vf1,[2,126]),o($Vg1,[2,176]),o($Vg1,[2,177]),o($Vg1,[2,178]),o($Vg1,[2,179]),o($Vf1,[2,127]),o($Va,[2,18]),o($Vh1,[2,86]),{37:124,40:$V3,42:$V5,64:195,88:$VO,152:$V7},o($VU,[2,28]),o($VV,[2,31]),o($VU,[2,26]),o($VV,[2,29]),{28:[1,196]},o($VF,[2,113]),o($VF,[2,123]),o($VF,[2,124]),{107:[1,198],109:201,115:197,117:[1,199],118:[1,200],148:$VP,149:$VQ,150:$VR,151:$VS},{107:[1,202]},o($Vi1,[2,137]),o($Vi1,[2,138]),o($Vi1,[2,139]),o($Vi1,[2,140]),{107:[2,141]},{107:[2,142]},o($VH,[2,118]),o($VE,[2,106],{106:86,50:159,108:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy}),o($VE,[2,151]),o($VI,[2,153]),o($VI,[2,154]),o($VI,[2,155]),o($VI,[2,161],{138:203,142:204,110:[1,205]}),{139:206,141:207,143:$Vj1},o($Vk1,[2,167],{119:[1,210],144:[1,209]}),o($Vk1,[2,170]),o($Vk1,[2,171]),o($Vk1,[2,172]),o($Vk1,[2,173]),o($Vk1,[2,174]),o($Vk1,[2,175]),o($VH,[2,44]),o([28,54],[2,60],{68:211,69:$V51}),o($V61,[2,62]),{27:$VK,37:124,40:$V3,42:$V5,60:$VL,64:120,65:212,72:116,79:117,80:118,81:119,85:121,86:$VM,87:$VN,88:$VO,152:$V7},o($V61,[2,66]),o($V61,[2,68],{79:117,80:118,81:119,64:120,85:121,37:124,72:213,27:$VK,40:$V3,42:$V5,60:$VL,86:$VM,87:$VN,88:$VO,152:$V7}),o($V61,[2,69],{79:117,80:118,81:119,64:120,85:121,37:124,72:214,27:$VK,40:$V3,42:$V5,60:$VL,86:$VM,87:$VN,88:$VO,152:$V7}),o($V61,$Vl1,{77:215,78:216,74:$Vm1,75:$Vn1}),o($Va1,[2,77]),o($Vo1,$Vp1,{82:219,83:220,129:$Vq1,130:$Vr1,131:$Vs1,132:$Vt1}),o($Vh,$Vi,{51:52,25:55,89:57,90:59,19:60,49:62,95:63,94:64,96:65,37:67,46:71,21:225,27:$Vk,36:$V1,40:$V3,42:$V5,87:$Vl,91:$Vm,97:$Vn,99:$Vc,100:$Vd,101:$Ve,102:$Vo,103:$Vp,104:$Vq,133:$Vr,152:$V7}),o($Va1,[2,87]),{28:[1,226]},{28:[2,64]},{28:[2,65]},{69:$V71,73:178,74:$V81,75:$V91,76:227,78:182},{67:175,68:176,69:$V51},o($Vc1,[2,93]),o($Vc1,[2,95]),o($Vd1,[2,54]),o($Ve1,[2,57]),{37:229,40:$V3,42:$V5,107:$V01,109:167,117:$V11,118:$V21,127:228,128:230,145:168,146:$V31,147:$V41,148:$VP,149:$VQ,150:$VR,151:$VS,152:$V7},o($VA,[2,21]),o($VF,[2,131]),o($VF,[2,133]),o($VF,[2,134]),o($VF,[2,135]),{119:[1,231]},o($VF,[2,132]),o($VI,[2,156]),o($VI,[2,162]),o($Vu1,[2,158],{140:232}),o($VI,[2,157],{141:233,143:$Vj1}),o($Vu1,[2,163]),{37:234,40:$V3,42:$V5,152:$V7},o($Vk1,[2,168]),{37:67,40:$V3,42:$V5,95:235,152:$V7},o($V61,[2,63]),o($V61,[2,61]),o($Va1,[2,75]),o($Va1,[2,76]),o($V61,$Vv1),o($Va1,[2,78]),o($V61,[2,72],{79:117,80:118,81:119,64:120,85:121,37:124,72:213,27:$VK,40:$V3,42:$V5,60:$VL,86:$VM,87:$VN,88:$VO,152:$V7}),o($V61,[2,73],{79:117,80:118,81:119,64:120,85:121,37:124,72:214,27:$VK,40:$V3,42:$V5,60:$VL,86:$VM,87:$VN,88:$VO,152:$V7}),o($Vo1,$Vz,{22:236}),o($Vo1,[2,84]),o($Vo1,[2,147]),o($Vo1,[2,148]),o($Vo1,[2,149]),o($Vo1,[2,150]),o($Vo1,$Vp1,{83:220,82:237,129:$Vq1,130:$Vr1,131:$Vs1,132:$Vt1}),o($Vo1,$Vp1,{83:220,82:238,129:$Vq1,130:$Vr1,131:$Vs1,132:$Vt1}),o([28,69],$Vl1,{78:216,77:239,74:$Vm1,75:$Vn1}),o($Vh1,[2,144]),o($Vh1,[2,145]),o($Vh1,[2,146]),{37:67,40:$V3,42:$V5,95:240,152:$V7},o($VI,[2,160],{141:241,143:$Vj1}),o($Vu1,[2,164]),o($Vu1,[2,165],{110:[1,242]}),o($Vk1,[2,169]),o($Vw1,$Vt,{158:76,84:141,23:243,126:$VT}),o($Vo1,$Vz,{22:244}),o($Vo1,$Vz,{22:245}),{28:[2,74],69:$Vv1},o($VF,[2,136]),o($Vu1,[2,159]),o($Vu1,[2,166]),o($Va1,[2,90]),o($Vw1,$Vt,{158:76,84:141,23:246,126:$VT}),o($Vw1,$Vt,{158:76,84:141,23:247,126:$VT}),o($Va1,[2,91]),o($Va1,[2,82])],
defaultActions: {5:[2,10],29:[2,1],89:[2,128],90:[2,129],91:[2,130],113:[2,51],115:[2,59],157:[2,141],158:[2,142],187:[2,64],188:[2,65]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = new Error();

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  /*
    ShEx parser in the Jison parser generator format.
  */

  // Common namespaces and entities
  var RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
      RDF_TYPE  = RDF + 'type',
      RDF_FIRST = RDF + 'first',
      RDF_REST  = RDF + 'rest',
      RDF_NIL   = RDF + 'nil',
      XSD = 'http://www.w3.org/2001/XMLSchema#',
      XSD_INTEGER  = XSD + 'integer',
      XSD_DECIMAL  = XSD + 'decimal',
      XSD_FLOAT   = XSD + 'float',
      XSD_DOUBLE   = XSD + 'double',
      XSD_BOOLEAN  = XSD + 'boolean',
      XSD_TRUE =  '"true"^^'  + XSD_BOOLEAN,
      XSD_FALSE = '"false"^^' + XSD_BOOLEAN,
      XSD_PATTERN        = XSD + 'pattern',
      XSD_MININCLUSIVE   = XSD + 'minInclusive',
      XSD_MINEXCLUSIVE   = XSD + 'minExclusive',
      XSD_MAXINCLUSIVE   = XSD + 'maxInclusive',
      XSD_MAXEXCLUSIVE   = XSD + 'maxExclusive',
      XSD_LENGTH         = XSD + 'length',
      XSD_MINLENGTH      = XSD + 'minLength',
      XSD_MAXLENGTH      = XSD + 'maxLength',
      XSD_TOTALDIGITS    = XSD + 'totalDigits',
      XSD_FRACTIONDIGITS = XSD + 'fractionDigits';

  var numericDatatypes = [
      XSD + "integer",
      XSD + "decimal",
      XSD + "float",
      XSD + "double",
      XSD + "string",
      XSD + "boolean",
      XSD + "dateTime",
      XSD + "nonPositiveInteger",
      XSD + "negativeInteger",
      XSD + "long",
      XSD + "int",
      XSD + "short",
      XSD + "byte",
      XSD + "nonNegativeInteger",
      XSD + "unsignedLong",
      XSD + "unsignedInt",
      XSD + "unsignedShort",
      XSD + "unsignedByte",
      XSD + "positiveInteger"
  ];

  var absoluteIRI = /^[a-z][a-z0-9+.-]*:/i,
    schemeAuthority = /^(?:([a-z][a-z0-9+.-]*:))?(?:\/\/[^\/]*)?/i,
    dotSegments = /(?:^|\/)\.\.?(?:$|[\/#?])/;

  var numericFacets = ["mininclusive", "minexclusive",
                       "maxinclusive", "maxexclusive"];

  // Returns a lowercase version of the given string
  function lowercase(string) {
    return string.toLowerCase();
  }

  // Appends the item to the array and returns the array
  function appendTo(array, item) {
    return array.push(item), array;
  }

  // Appends the items to the array and returns the array
  function appendAllTo(array, items) {
    return array.push.apply(array, items), array;
  }

  // Extends a base object with properties of other objects
  function extend(base) {
    if (!base) base = {};
    for (var i = 1, l = arguments.length, arg; i < l && (arg = arguments[i] || {}); i++)
      for (var name in arg)
        base[name] = arg[name];
    return base;
  }

  // Creates an array that contains all items of the given arrays
  function unionAll() {
    var union = [];
    for (var i = 0, l = arguments.length; i < l; i++)
      union = union.concat.apply(union, arguments[i]);
    return union;
  }

  // N3.js:lib/N3Parser.js<0.4.5>:58 with
  //   s/this\./Parser./g
  // ### `_setBase` sets the base IRI to resolve relative IRIs.
  Parser._setBase = function (baseIRI) {
    if (!baseIRI)
      baseIRI = null;
    else if (baseIRI.indexOf('#') >= 0)
      throw new Error('Invalid base IRI ' + baseIRI);
    // Set base IRI and its components
    if (Parser._base = baseIRI) {
      Parser._basePath   = baseIRI.replace(/[^\/?]*(?:\?.*)?$/, '');
      baseIRI = baseIRI.match(schemeAuthority);
      Parser._baseRoot   = baseIRI[0];
      Parser._baseScheme = baseIRI[1];
    }
  }

  // N3.js:lib/N3Parser.js<0.4.5>:576 with
  //   s/this\./Parser./g
  //   s/token/iri/
  // ### `_resolveIRI` resolves a relative IRI token against the base path,
  // assuming that a base path has been set and that the IRI is indeed relative.
  function _resolveIRI (iri) {
    switch (iri[0]) {
    // An empty relative IRI indicates the base IRI
    case undefined: return Parser._base;
    // Resolve relative fragment IRIs against the base IRI
    case '#': return Parser._base + iri;
    // Resolve relative query string IRIs by replacing the query string
    case '?': return Parser._base.replace(/(?:\?.*)?$/, iri);
    // Resolve root-relative IRIs at the root of the base IRI
    case '/':
      // Resolve scheme-relative IRIs to the scheme
      return (iri[1] === '/' ? Parser._baseScheme : Parser._baseRoot) + _removeDotSegments(iri);
    // Resolve all other IRIs at the base IRI's path
    default: {
      return _removeDotSegments(Parser._basePath + iri);
    }
    }
  }

  // ### `_removeDotSegments` resolves './' and '../' path segments in an IRI as per RFC3986.
  function _removeDotSegments (iri) {
    // Don't modify the IRI if it does not contain any dot segments
    if (!dotSegments.test(iri))
      return iri;

    // Start with an imaginary slash before the IRI in order to resolve trailing './' and '../'
    var result = '', length = iri.length, i = -1, pathStart = -1, segmentStart = 0, next = '/';

    while (i < length) {
      switch (next) {
      // The path starts with the first slash after the authority
      case ':':
        if (pathStart < 0) {
          // Skip two slashes before the authority
          if (iri[++i] === '/' && iri[++i] === '/')
            // Skip to slash after the authority
            while ((pathStart = i + 1) < length && iri[pathStart] !== '/')
              i = pathStart;
        }
        break;
      // Don't modify a query string or fragment
      case '?':
      case '#':
        i = length;
        break;
      // Handle '/.' or '/..' path segments
      case '/':
        if (iri[i + 1] === '.') {
          next = iri[++i + 1];
          switch (next) {
          // Remove a '/.' segment
          case '/':
            result += iri.substring(segmentStart, i - 1);
            segmentStart = i + 1;
            break;
          // Remove a trailing '/.' segment
          case undefined:
          case '?':
          case '#':
            return result + iri.substring(segmentStart, i) + iri.substr(i + 1);
          // Remove a '/..' segment
          case '.':
            next = iri[++i + 1];
            if (next === undefined || next === '/' || next === '?' || next === '#') {
              result += iri.substring(segmentStart, i - 2);
              // Try to remove the parent path from result
              if ((segmentStart = result.lastIndexOf('/')) >= pathStart)
                result = result.substr(0, segmentStart);
              // Remove a trailing '/..' segment
              if (next !== '/')
                return result + '/' + iri.substr(i + 1);
              segmentStart = i + 1;
            }
          }
        }
      }
      next = iri[++i];
    }
    return result + iri.substring(segmentStart);
  }

  // Creates an expression with the given type and attributes
  function expression(expr, attr) {
    var expression = { expression: expr };
    if (attr)
      for (var a in attr)
        expression[a] = attr[a];
    return expression;
  }

  // Creates a path with the given type and items
  function path(type, items) {
    return { type: 'path', pathType: type, items: items };
  }

  // Creates a literal with the given value and type
  function createLiteral(value, type) {
    return '"' + value + '"^^' + type;
  }

  // Creates a new blank node identifier
  function blank() {
    return '_:b' + blankId++;
  };
  var blankId = 0;
  Parser._resetBlanks = function () { blankId = 0; }
  Parser.reset = function () {
    Parser._prefixes = Parser.valueExprDefns = Parser.shapes = Parser.start = Parser.startActs = null; // Reset state.
    Parser._base = Parser._baseIRI = Parser._baseIRIPath = Parser._baseIRIRoot = null;
  }
  var _fileName; // for debugging
  Parser._setFileName = function (fn) { _fileName = fn; }

  // Regular expression and replacement strings to escape strings
  var stringEscapeSequence = /\\u([a-fA-F0-9]{4})|\\U([a-fA-F0-9]{8})|\\(.)/g,
      irirefEscapeSequence = /\\u([a-fA-F0-9]{4})|\\U([a-fA-F0-9]{8})/g,
      stringEscapeReplacements = { '\\': '\\', "'": "'", '"': '"',
                             't': '\t', 'b': '\b', 'n': '\n', 'r': '\r', 'f': '\f' },
      semactEscapeReplacements = { '\\': '\\', '%': '%' },
      fromCharCode = String.fromCharCode;

  function unescape(string, regex, replacements) {
    try {
      string = string.replace(regex, function (sequence, unicode4, unicode8, escapedChar) {
        var charCode;
        if (unicode4) {
          charCode = parseInt(unicode4, 16);
          if (isNaN(charCode)) throw new Error(); // can never happen (regex), but helps performance
          return fromCharCode(charCode);
        }
        else if (unicode8) {
          charCode = parseInt(unicode8, 16);
          if (isNaN(charCode)) throw new Error(); // can never happen (regex), but helps performance
          if (charCode < 0xFFFF) return fromCharCode(charCode);
          return fromCharCode(0xD800 + ((charCode -= 0x10000) >> 10), 0xDC00 + (charCode & 0x3FF));
        }
        else {
          var replacement = replacements[escapedChar];
          if (!replacement) throw new Error();
          return replacement;
        }
      });
      return string;
    }
    catch (error) { return ''; }
  };

  // Translates string escape codes in the string into their textual equivalent
  function unescapeString(string, trimLength) {
    string = string.substring(trimLength, string.length - trimLength);
    return '"' + unescape(string, stringEscapeSequence, stringEscapeReplacements) + '"';
  }

  // Convenience function to return object with p1 key, value p2
  function keyValObject(key, val) {
    var ret = {};
    ret[key] = val;
    return ret;
  }

  // Return object with p1 key, p2 string value
  function unescapeSemanticAction(key, string) {
    string = string.substring(1, string.length - 2);
    return {
      type: "SemAct",
      name: key,
      code: unescape(string, stringEscapeSequence, semactEscapeReplacements)
    };
  }

  function error (msg) {
    Parser._prefixes = Parser.valueExprDefns = Parser.shapes = Parser.start = Parser.startActs = null; // Reset state.
    Parser._base = Parser._baseIRI = Parser._baseIRIPath = Parser._baseIRIRoot = '';
    throw new Error(msg);
  }

  // Expand declared prefix or throw Error
  function expandPrefix (prefix) {
    if (!(prefix in Parser._prefixes))
      error('Parse error; unknown prefix: ' + prefix);
    return Parser._prefixes[prefix];
  }

  // Add a shape to the map
  function addShape (label, shape) {
    if (!Parser.shapes)
      Parser.shapes = {};
    else if (label in Parser.shapes)
      error("Parse error: "+label+" alread defined");
    Parser.shapes[label] = shape;
  }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/**/
break;
case 1:return 102;
break;
case 2:return 103;
break;
case 3:return 144;
break;
case 4:return 104;
break;
case 5:return 152;
break;
case 6:return 132;
break;
case 7:return 118;
break;
case 8:return 117;
break;
case 9:return 107;
break;
case 10:return 'ANON';
break;
case 11:return 40;
break;
case 12:return 42;
break;
case 13:return 88;
break;
case 14:return 153;
break;
case 15:return 156;
break;
case 16:return 150;
break;
case 17:return 'NON_TERMINATED_STRING_LITERAL_LONG2';
break;
case 18:return 151;
break;
case 19:return 'NON_TERMINATED_STRING_LITERAL_LONG2';
break;
case 20:return 148;
break;
case 21:return 149;
break;
case 22:return 39;
break;
case 23:return 41;
break;
case 24:return 43;
break;
case 25:return 'IT_VIRTUAL';
break;
case 26:return 58;
break;
case 27:return 62;
break;
case 28:return 91;
break;
case 29:return 100;
break;
case 30:return 99;
break;
case 31:return 101;
break;
case 32:return 108;
break;
case 33:return 35;
break;
case 34:return 33;
break;
case 35:return 120;
break;
case 36:return 121;
break;
case 37:return 122;
break;
case 38:return 123;
break;
case 39:return 111;
break;
case 40:return 112;
break;
case 41:return 113;
break;
case 42:return 124;
break;
case 43:return 125;
break;
case 44:return 20;
break;
case 45:return 126;
break;
case 46:return 52;
break;
case 47:return 54;
break;
case 48:return 60;
break;
case 49:return '||';
break;
case 50:return 69;
break;
case 51:return 74;
break;
case 52:return 27;
break;
case 53:return 28;
break;
case 54:return 133;
break;
case 55:return 135;
break;
case 56:return 36;
break;
case 57:return 87;
break;
case 58:return 119;
break;
case 59:return 86;
break;
case 60:return 97;
break;
case 61:return 110;
break;
case 62:return 75;
break;
case 63:return 129;
break;
case 64:return 130;
break;
case 65:return 131;
break;
case 66:return 143;
break;
case 67:return 155;
break;
case 68:return 146;
break;
case 69:return 147;
break;
case 70:return 6;
break;
case 71:return 'invalid character '+yy_.yytext;
break;
}
},
rules: [/^(?:\s+|(#[^\u000a\u000d]*))/,/^(?:(@((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:)(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|:|[0-9]|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))*(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%)))))?)))/,/^(?:(@(([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:))/,/^(?:(@([A-Za-z])+((-([0-9A-Za-z])+))*))/,/^(?:@)/,/^(?:(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:)(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|:|[0-9]|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))*(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%)))))?)))/,/^(?:(\{((([+-])?([0-9])+))((,(((([+-])?([0-9])+))|\*)?))?\}))/,/^(?:(([+-])?((([0-9])+\.([0-9])*(([Ee]([+-])?([0-9])+)))|((\.)?([0-9])+(([Ee]([+-])?([0-9])+))))))/,/^(?:(([+-])?([0-9])*\.([0-9])+))/,/^(?:(([+-])?([0-9])+))/,/^(?:{ANON})/,/^(?:(<([^\u0000-\u0020<>\"{}|^`\\]|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*>))/,/^(?:((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:))/,/^(?:a\b)/,/^(?:(_:((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|[0-9])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?))/,/^(?:(\{([^%\\]|\\[%\\]|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*%\}))/,/^(?:('''(('|'')?([^\'\\]|(\\[\"\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*'''))/,/^(?:('''))/,/^(?:("""(("|"")?([^\"\\]|(\\[\"\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*"""))/,/^(?:("""))/,/^(?:('([^\u0027\u005c\u000a\u000d]|(\\[\"\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*'))/,/^(?:("([^\u0022\u005c\u000a\u000d]|(\\[\"\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*"))/,/^(?:([Bb][Aa][Ss][Ee]))/,/^(?:([Pp][Rr][Ee][Ff][Ii][Xx]))/,/^(?:([sS][tT][aA][rR][tT]))/,/^(?:([Vv][Ii][Rr][Tt][Uu][Aa][Ll]))/,/^(?:([Cc][Ll][Oo][Ss][Ee][Dd]))/,/^(?:([Ee][Xx][Tt][Rr][Aa]))/,/^(?:([Ll][Ii][Tt][Ee][Rr][Aa][Ll]))/,/^(?:([Bb][Nn][Oo][Dd][Ee]))/,/^(?:([Ii][Rr][Ii]))/,/^(?:([Nn][Oo][Nn][Ll][Ii][Tt][Ee][Rr][Aa][Ll]))/,/^(?:([Pp][Aa][Tt][Tt][Ee][Rr][Nn]))/,/^(?:([Aa][Nn][Dd]))/,/^(?:([Oo][Rr]))/,/^(?:([Mm][Ii][Nn][Ii][Nn][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Mm][Ii][Nn][Ee][Xx][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Mm][Aa][Xx][Ii][Nn][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Mm][Aa][Xx][Ee][Xx][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Ll][Ee][Nn][Gg][Tt][Hh]))/,/^(?:([Mm][Ii][Nn][Ll][Ee][Nn][Gg][Tt][Hh]))/,/^(?:([Mm][Aa][Xx][Ll][Ee][Nn][Gg][Tt][Hh]))/,/^(?:([Tt][Oo][Tt][Aa][Ll][Dd][Ii][Gg][Ii][Tt][Ss]))/,/^(?:([Ff][Rr][Aa][Cc][Tt][Ii][Oo][Nn][Dd][Ii][Gg][Ii][Tt][Ss]))/,/^(?:=)/,/^(?:\/\/)/,/^(?:\{)/,/^(?:\})/,/^(?:&)/,/^(?:\|\|)/,/^(?:\|)/,/^(?:,)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\$)/,/^(?:!)/,/^(?:\^\^)/,/^(?:\^)/,/^(?:\.)/,/^(?:~)/,/^(?:;)/,/^(?:\*)/,/^(?:\+)/,/^(?:\?)/,/^(?:-)/,/^(?:%)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = ShExJison;
exports.Parser = ShExJison.Parser;
exports.parse = function () { return ShExJison.parse.apply(ShExJison, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}