/* parser generated by jison 0.4.16 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ShExJison = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[7,17,18,19,20,23,177,188,189],$V1=[1,10],$V2=[1,23],$V3=[1,11],$V4=[1,25],$V5=[1,17],$V6=[1,22],$V7=[1,24],$V8=[1,26],$V9=[7,17,18,19,20,23,188,189],$Va=[18,20,60,62,70,81,82,83,86,87,88,89,95,96,97,98,99,100,102,110,113,145,173,188],$Vb=[2,30],$Vc=[1,37],$Vd=[1,39],$Ve=[1,40],$Vf=[1,41],$Vg=[7,17,18,19,20,23,31,35,43,46,60,61,62,67,68,69,70,81,82,83,86,87,88,89,95,96,97,98,99,100,102,104,110,113,121,126,127,140,141,142,143,145,173,174,177,188,189],$Vh=[7,17,18,19,20,23,31,35,43,46,60,61,62,67,68,69,70,81,82,83,85,86,87,88,89,93,94,95,96,97,98,99,100,102,104,110,113,121,126,127,140,141,142,143,144,145,147,160,161,172,173,174,177,178,179,180,183,184,186,188,189],$Vi=[102,110,113,173],$Vj=[2,129],$Vk=[1,52],$Vl=[1,56],$Vm=[1,57],$Vn=[1,60],$Vo=[1,66],$Vp=[1,67],$Vq=[1,68],$Vr=[1,75],$Vs=[1,78],$Vt=[1,79],$Vu=[1,80],$Vv=[1,81],$Vw=[1,82],$Vx=[1,83],$Vy=[1,84],$Vz=[1,85],$VA=[1,86],$VB=[1,71],$VC=[1,100],$VD=[1,101],$VE=[7,17,18,19,20,23,43,46,61,81,82,83,86,87,88,89,104,121,126,127,140,141,142,143,174,177,188,189],$VF=[7,17,18,19,20,23,61,104,121,126,127,140,141,142,143,174,177,188,189],$VG=[7,17,18,19,20,23,43,61,104,121,126,127,140,141,142,143,174,177,188,189],$VH=[7,17,18,19,20,23,43,46,61,104,121,126,127,140,141,142,143,174,177,188,189],$VI=[7,17,18,19,20,23,43,46,61,67,68,69,102,104,110,113,121,126,127,140,141,142,143,173,174,177,188,189],$VJ=[7,17,18,19,20,23,43,46,61,86,87,88,89,95,96,97,98,99,100,104,121,126,127,140,141,142,143,174,177,188,189],$VK=[2,93],$VL=[7,17,18,19,20,23,43,46,61,67,68,69,86,87,88,89,102,104,110,113,121,126,127,140,141,142,143,173,174,177,188,189],$VM=[18,20,62,85,93,94,147,172,179,180,183,184,188],$VN=[7,17,18,19,20,23,43,46,61,95,96,97,98,99,100,104,121,126,127,140,141,142,143,174,177,188,189],$VO=[1,123],$VP=[1,125],$VQ=[1,124],$VR=[7,17,18,19,20,23,43,46,61,67,68,69,86,87,88,89,95,96,97,98,99,100,102,104,110,113,121,126,127,140,141,142,143,173,174,177,188,189],$VS=[85,93,94],$VT=[7,17,18,19,20,23,61,188,189],$VU=[2,32],$VV=[7,17,18,19,20,23,43,46,61,188,189],$VW=[7,17,18,19,20,23,43,61,188,189],$VX=[1,147],$VY=[1,151],$VZ=[1,152],$V_=[7,17,18,19,20,23,43,46,61,81,82,83,86,87,88,89,104,121,126,127,177,188,189],$V$=[1,177],$V01=[1,178],$V11=[1,179],$V21=[1,176],$V31=[1,171],$V41=[1,172],$V51=[1,174],$V61=[1,175],$V71=[1,193],$V81=[2,131],$V91=[1,186],$Va1=[1,189],$Vb1=[1,197],$Vc1=[1,194],$Vd1=[1,196],$Ve1=[7,17,18,19,20,23,43,46,61,81,82,83,86,87,88,89,188,189],$Vf1=[7,17,18,19,20,23,43,46,61,62,81,82,83,85,86,87,88,89,93,94,104,121,126,127,147,160,161,172,174,177,179,180,183,184,188,189],$Vg1=[1,233],$Vh1=[61,104,121],$Vi1=[2,149],$Vj1=[1,235],$Vk1=[1,236],$Vl1=[61,104,121,126,127],$Vm1=[18,20,35,60,62,67,68,69,70,81,82,83,85,86,87,88,89,93,94,95,96,97,98,99,100,102,110,113,145,173,179,180,183,184,186,188],$Vn1=[18,20,102,110,113,173,188,189],$Vo1=[18,20,102,110,113,173,186,188],$Vp1=[1,256],$Vq1=[1,258],$Vr1=[1,260],$Vs1=[18,20,62,85,93,94,147,161,172,179,180,183,184,188],$Vt1=[2,153],$Vu1=[1,274],$Vv1=[1,275],$Vw1=[18,20,60,61,104,121,126,127,144,186,188],$Vx1=[61,104,121,126,127,174,177],$Vy1=[2,168],$Vz1=[1,280],$VA1=[1,281],$VB1=[1,282],$VC1=[1,283],$VD1=[2,133],$VE1=[2,152],$VF1=[2,222],$VG1=[1,301],$VH1=[61,104,121,126,127,177],$VI1=[7,17,18,19,20,23,43,46,61,81,82,83,86,87,88,89,104,121,126,127,174,177,188,189];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"shexDoc":3,"initParser":4,"Qdirective_E_Star":5,"Q_O_QnotStartAction_E_Or_QstartActions_E_S_Qstatement_E_Star_C_E_Opt":6,"EOF":7,"directive":8,"O_QnotStartAction_E_Or_QstartActions_E_C":9,"notStartAction":10,"startActions":11,"Qstatement_E_Star":12,"statement":13,"O_QnotStartAction_E_Or_QstartActions_E_S_Qstatement_E_Star_C":14,"baseDecl":15,"prefixDecl":16,"IT_BASE":17,"IRIREF":18,"IT_PREFIX":19,"PNAME_NS":20,"start":21,"shapeExprDecl":22,"IT_start":23,"=":24,"inlineShapeExpression":25,"QcodeDecl_E_Plus":26,"codeDecl":27,"shapeExprLabel":28,"O_QshapeExpression_E_Or_QIT_EXTERNAL_E_C":29,"shapeExpression":30,"IT_EXTERNAL":31,"QIT_NOT_E_Opt":32,"shapeAtomNoRef":33,"QshapeOr_E_Opt":34,"IT_NOT":35,"shapeRef":36,"shapeOr":37,"inlineShapeOr":38,"Q_O_QIT_OR_E_S_QshapeAnd_E_C_E_Plus":39,"Q_O_QIT_AND_E_S_QshapeNot_E_C_E_Plus":40,"Q_O_QIT_OR_E_S_QshapeAnd_E_C_E_Star":41,"O_QIT_OR_E_S_QshapeAnd_E_C":42,"IT_OR":43,"shapeAnd":44,"O_QIT_AND_E_S_QshapeNot_E_C":45,"IT_AND":46,"shapeNot":47,"inlineShapeAnd":48,"Q_O_QIT_OR_E_S_QinlineShapeAnd_E_C_E_Star":49,"O_QIT_OR_E_S_QinlineShapeAnd_E_C":50,"Q_O_QIT_AND_E_S_QshapeNot_E_C_E_Star":51,"inlineShapeNot":52,"Q_O_QIT_AND_E_S_QinlineShapeNot_E_C_E_Star":53,"O_QIT_AND_E_S_QinlineShapeNot_E_C":54,"shapeAtom":55,"inlineShapeAtom":56,"nonLitNodeConstraint":57,"shapeOrRef":58,"litNodeConstraint":59,"(":60,")":61,".":62,"QnonLitNodeConstraint_E_Opt":63,"shapeDefinition":64,"inlineShapeOrRef":65,"inlineShapeDefinition":66,"ATPNAME_LN":67,"ATPNAME_NS":68,"@":69,"IT_LITERAL":70,"QxsFacet_E_Star":71,"datatype":72,"valueSet":73,"QnumericFacet_E_Plus":74,"xsFacet":75,"nonLiteralKind":76,"QstringFacet_E_Plus":77,"numericFacet":78,"QstringFacet_E_Star":79,"stringFacet":80,"IT_IRI":81,"IT_BNODE":82,"IT_NONLITERAL":83,"stringLength":84,"INTEGER":85,"REGEXP":86,"IT_LENGTH":87,"IT_MINLENGTH":88,"IT_MAXLENGTH":89,"numericRange":90,"rawNumeric":91,"numericLength":92,"DECIMAL":93,"DOUBLE":94,"IT_MININCLUSIVE":95,"IT_MINEXCLUSIVE":96,"IT_MAXINCLUSIVE":97,"IT_MAXEXCLUSIVE":98,"IT_TOTALDIGITS":99,"IT_FRACTIONDIGITS":100,"Q_O_QincludeSet_E_Or_QextraPropertySet_E_Or_QIT_CLOSED_E_C_E_Star":101,"{":102,"QtripleExpression_E_Opt":103,"}":104,"Qannotation_E_Star":105,"semanticActions":106,"O_QincludeSet_E_Or_QextraPropertySet_E_Or_QIT_CLOSED_E_C":107,"includeSet":108,"extraPropertySet":109,"IT_CLOSED":110,"tripleExpression":111,"annotation":112,"IT_EXTRA":113,"Qpredicate_E_Plus":114,"predicate":115,"oneOfTripleExpr":116,"groupTripleExpr":117,"multiElementOneOf":118,"Q_O_QGT_PIPE_E_S_QgroupTripleExpr_E_C_E_Plus":119,"O_QGT_PIPE_E_S_QgroupTripleExpr_E_C":120,"|":121,"innerTripleExpr":122,"multiElementGroup":123,"unaryTripleExpr":124,"groupTripleExpr_right":125,",":126,";":127,"Q_O_QGT_COMMA_E_S_QunaryTripleExpr_E_C_E_Plus":128,"QGT_COMMA_E_Opt":129,"O_QGT_COMMA_E_S_QunaryTripleExpr_E_C":130,"$":131,"tripleExprLabel":132,"tripleConstraint":133,"bracketedTripleExpr":134,"valueConstraint":135,"include":136,"Qcardinality_E_Opt":137,"cardinality":138,"senseFlags":139,"*":140,"+":141,"?":142,"REPEAT_RANGE":143,"^":144,"[":145,"QvalueSetValue_E_Star":146,"]":147,"valueSetValue":148,"iriRange":149,"literalRange":150,"languageRange":151,"QiriExclusion_E_Plus":152,"QliteralExclusion_E_Plus":153,"QlanguageExclusion_E_Plus":154,"iri":155,"Q_O_Q_TILDE_E_S_QiriExclusion_E_Star_C_E_Opt":156,"QiriExclusion_E_Star":157,"iriExclusion":158,"O_Q_TILDE_E_S_QiriExclusion_E_Star_C":159,"~":160,"-":161,"literal":162,"Q_O_Q_TILDE_E_S_QliteralExclusion_E_Star_C_E_Opt":163,"QliteralExclusion_E_Star":164,"literalExclusion":165,"O_Q_TILDE_E_S_QliteralExclusion_E_Star_C":166,"language":167,"Q_O_Q_TILDE_E_S_QlanguageExclusion_E_Star_C_E_Opt":168,"QlanguageExclusion_E_Star":169,"languageExclusion":170,"O_Q_TILDE_E_S_QlanguageExclusion_E_Star_C":171,"LANGTAG":172,"&":173,"//":174,"O_Qiri_E_Or_Qliteral_E_C":175,"QcodeDecl_E_Star":176,"%":177,"CODE":178,"LANG_STRING":179,"STRING":180,"optDT":181,"numericLiteral":182,"IT_true":183,"IT_false":184,"^^":185,"a":186,"blankNode":187,"PNAME_LN":188,"BLANK_NODE_LABEL":189,"QshapeExprLabel_E_Plus":190,"$accept":0,"$end":1},
terminals_: {2:"error",7:"EOF",17:"IT_BASE",18:"IRIREF",19:"IT_PREFIX",20:"PNAME_NS",23:"IT_start",24:"=",31:"IT_EXTERNAL",35:"IT_NOT",43:"IT_OR",46:"IT_AND",60:"(",61:")",62:".",67:"ATPNAME_LN",68:"ATPNAME_NS",69:"@",70:"IT_LITERAL",81:"IT_IRI",82:"IT_BNODE",83:"IT_NONLITERAL",85:"INTEGER",86:"REGEXP",87:"IT_LENGTH",88:"IT_MINLENGTH",89:"IT_MAXLENGTH",93:"DECIMAL",94:"DOUBLE",95:"IT_MININCLUSIVE",96:"IT_MINEXCLUSIVE",97:"IT_MAXINCLUSIVE",98:"IT_MAXEXCLUSIVE",99:"IT_TOTALDIGITS",100:"IT_FRACTIONDIGITS",102:"{",104:"}",110:"IT_CLOSED",113:"IT_EXTRA",121:"|",126:",",127:";",131:"$",135:"valueConstraint",140:"*",141:"+",142:"?",143:"REPEAT_RANGE",144:"^",145:"[",147:"]",160:"~",161:"-",172:"LANGTAG",173:"&",174:"//",177:"%",178:"CODE",179:"LANG_STRING",180:"STRING",183:"IT_true",184:"IT_false",185:"^^",186:"a",188:"PNAME_LN",189:"BLANK_NODE_LABEL"},
productions_: [0,[3,4],[4,0],[5,0],[5,2],[9,1],[9,1],[12,0],[12,2],[14,2],[6,0],[6,1],[8,1],[8,1],[15,2],[16,3],[10,1],[10,1],[21,3],[11,1],[26,1],[26,2],[13,1],[13,1],[22,2],[29,1],[29,1],[30,3],[30,3],[30,2],[32,0],[32,1],[34,0],[34,1],[25,1],[37,1],[37,2],[42,2],[39,1],[39,2],[45,2],[40,1],[40,2],[41,0],[41,2],[38,2],[50,2],[49,0],[49,2],[44,2],[51,0],[51,2],[48,2],[54,2],[53,0],[53,2],[47,1],[47,2],[52,1],[52,2],[55,1],[55,2],[55,1],[55,1],[55,2],[55,3],[55,1],[63,0],[63,1],[33,1],[33,2],[33,1],[33,1],[33,2],[33,3],[33,1],[56,1],[56,2],[56,1],[56,2],[56,3],[56,1],[58,1],[58,1],[65,1],[65,1],[36,1],[36,1],[36,2],[59,2],[59,2],[59,2],[59,1],[71,0],[71,2],[57,1],[57,2],[57,1],[74,1],[74,2],[79,0],[79,2],[77,1],[77,2],[76,1],[76,1],[76,1],[75,1],[75,1],[80,2],[80,1],[84,1],[84,1],[84,1],[78,2],[78,2],[91,1],[91,1],[91,1],[90,1],[90,1],[90,1],[90,1],[92,1],[92,1],[64,6],[107,1],[107,1],[107,1],[101,0],[101,2],[103,0],[103,1],[105,0],[105,2],[66,4],[109,2],[114,1],[114,2],[111,1],[116,1],[116,1],[118,2],[120,2],[119,1],[119,2],[122,1],[122,1],[117,2],[125,0],[125,1],[125,1],[125,2],[129,0],[129,1],[129,1],[123,3],[130,2],[130,2],[128,1],[128,2],[124,3],[124,1],[124,3],[124,1],[124,1],[124,1],[134,6],[137,0],[137,1],[133,5],[133,6],[138,1],[138,1],[138,1],[138,1],[139,1],[73,3],[146,0],[146,2],[148,1],[148,1],[148,1],[148,2],[148,2],[148,2],[149,2],[157,0],[157,2],[159,2],[156,0],[156,1],[152,1],[152,2],[158,2],[158,3],[150,2],[164,0],[164,2],[166,2],[163,0],[163,1],[153,1],[153,2],[165,2],[165,3],[151,2],[169,0],[169,2],[171,2],[168,0],[168,1],[154,1],[154,2],[170,2],[170,3],[167,1],[136,2],[112,3],[175,1],[175,1],[106,1],[176,0],[176,2],[27,3],[27,3],[162,1],[162,2],[162,1],[162,1],[162,1],[181,0],[181,2],[115,1],[115,1],[72,1],[28,1],[28,1],[132,1],[132,1],[182,1],[182,1],[182,1],[155,1],[155,1],[155,1],[187,1],[108,2],[190,1],[190,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        var valueExprDefns = Parser.valueExprDefns ? { valueExprDefns: Parser.valueExprDefns } : {};
        var startObj = Parser.start ? { start: Parser.start } : {};
        var startActs = Parser.startActs ? { startActs: Parser.startActs } : {};
        var ret = extend({ type: "Schema"},
                         Object.keys(Parser._prefixes).length ? { prefixes: Parser._prefixes } : {}, // Build return object from
                         valueExprDefns, startActs, startObj,                  // components in parser state
                         Parser.shapes ? {shapes: Parser.shapes} : {},         // maintaining intuitve order.
                         Parser.productions ? {productions: Parser.productions} : {});
        if (Parser._base !== null)
          ret.base = Parser._base;
        Parser.reset();
//console.log(JSON.stringify(ret));
        return ret;
      
break;
case 2:
 yy.parser.yy = { lexer: yy.lexer} ; 
break;
case 14:
 // t: @@
        Parser._setBase(Parser._base === null ||
                    absoluteIRI.test($$[$0].slice(1, -1)) ? $$[$0].slice(1, -1) : _resolveIRI($$[$0].slice(1, -1)));
      
break;
case 15:
 // t: ShExParser-test.js/with pre-defined prefixes
        var prefixIRI;
        if (this._base === null || absoluteIRI.test($$[$0].slice(1, -1)))
          prefixIRI = $$[$0].slice(1, -1);
        else
          prefixIRI = _resolveIRI($$[$0].slice(1, -1));
        Parser._prefixes[$$[$0-1].slice(0, -1)] = prefixIRI;
      
break;
case 18:

        if (Parser.start)
          error("Parse error: start already defined");
        Parser.start = $$[$0]; // t: startInline
      
break;
case 19:

        Parser.startActs = $$[$0]; // t: startCode1
      
break;
case 20:
this.$ = [$$[$0]] // t: startCode1;
break;
case 21:
this.$ = appendTo($$[$0-1], $$[$0]) // t: startCode3;
break;
case 24:
 // t: 1dot 1val1vsMinusiri3??
        addShape($$[$0-1],  $$[$0]);
      
break;
case 25:

        this.$ = $$[$0];
      
break;
case 26:
this.$ = { type: "ShapeExternal" };
break;
case 27:

        if ($$[$0-2])
          $$[$0-1] = { type: "ShapeNot", "shapeExpr": $$[$0-1] };
        if ($$[$0]) {
          $$[$0].shapeExprs.unshift($$[$0-1]);
          this.$ = $$[$0];
        } else {
// console.log("shapeAtomNoRef:", $$[$0-1]);
          this.$ = $$[$0-1];
        }
      
break;
case 28:
this.$ = { type: "ShapeNot", "shapeExpr": $$[$0-1] };
break;
case 29:

// console.log("shapeRef_shapeOr:", $$[$0-1], $$[$0]);
        $$[$0].shapeExprs.unshift($$[$0-1]);
        this.$ = $$[$0]; // { type: "ShapeOr", "shapeExprs": [$$[$0-1]].concat($$[$0]) };
    
break;
case 30:
this.$ = false;
break;
case 31:
this.$ = true;
break;
case 32: case 149: case 150: case 151: case 231:
this.$ = null;
break;
case 33: case 37: case 40: case 46: case 53: case 232:
this.$ = $$[$0];
break;
case 35:

        this.$ = { type: "ShapeOr", shapeExprs: $$[$0] };
// console.log("shapeOr_1:", this.$);
      
break;
case 36:

        this.$ = $$[$0].length > 0 ? shapeJunction("ShapeAnd", $$[$0-1], $$[$0]) : { type: "ShapeAnd", shapeExprs:$$[$0-1] };
// console.log("shapeOr_2:", this.$);
      
break;
case 38: case 41:
this.$ = [$$[$0]];
break;
case 39: case 42: case 44: case 48: case 51: case 55:
this.$ = $$[$0-1].concat($$[$0]);
break;
case 43: case 47: case 50: case 54:
this.$ = [];
break;
case 45:
this.$ = shapeJunction("ShapeOr", $$[$0-1], $$[$0]);
break;
case 49: case 52:
this.$ = shapeJunction("ShapeAnd", $$[$0-1], $$[$0]);
break;
case 57: case 59:
this.$ = { type: "ShapeNot", "shapeExpr": $$[$0] };
break;
case 61: case 70: case 77:
this.$ = { type: "ShapeAnd", shapeExprs: [ extend({ type: "NodeConstraint" }, $$[$0-1]), $$[$0] ] };
break;
case 64: case 73:
this.$ = shapeJunction("ShapeAnd", $$[$0-1], [$$[$0]]) // t:@@;
break;
case 65: case 74: case 80:
this.$ = $$[$0-1] // t: 1val1vsMinusiri3;
break;
case 66: case 75: case 81:
this.$ = EmptyShape // t: 1dot;
break;
case 79:
this.$ = $$[$0] ? { type: "ShapeAnd", shapeExprs: [ extend({ type: "NodeConstraint" }, $$[$0-1]), $$[$0] ] } : $$[$0-1] // t: !! look to 1dotRef1;
break;
case 86:
 // t: 1dotRefLNex@@
        $$[$0] = $$[$0].substr(1, $$[$0].length-1);
        var namePos = $$[$0].indexOf(':');
        this.$ = { type: "ShapeRef", reference: expandPrefix($$[$0].substr(0, namePos)) + $$[$0].substr(namePos + 1) };
      
break;
case 87:
 // t: 1dotRefNS1@@
        $$[$0] = $$[$0].substr(1, $$[$0].length-1);
        this.$ = { type: "ShapeRef", reference: expandPrefix($$[$0].substr(0, $$[$0].length - 1)) };
      
break;
case 88:
this.$ = { type: "ShapeRef", reference: $$[$0] } // t: 1dotRef1, 1dotRefSpaceLNex, 1dotRefSpaceNS1;
break;
case 89:
this.$ = extend({ type: "NodeConstraint", nodeKind: "literal" }, $$[$0]) // t: 1literalPattern;
break;
case 90:

        if (numericDatatypes.indexOf($$[$0-1]) === -1)
          numericFacets.forEach(function (facet) {
            if (facet in $$[$0])
              error("Parse error: facet " + facet + " not allowed for unknown datatype " + $$[$0-1]);
          });
        this.$ = extend({ type: "NodeConstraint", datatype: $$[$0-1] }, $$[$0]) // t: 1datatype
      
break;
case 91:
this.$ = { type: "NodeConstraint", values: $$[$0-1] } // t: 1val1IRIREF;
break;
case 92:
this.$ = extend({ type: "NodeConstraint"}, $$[$0]);
break;
case 93:
this.$ = {} // t: 1literalPattern;
break;
case 94:

        if (Object.keys($$[$0-1]).indexOf(Object.keys($$[$0])[0]) !== -1) {
          error("Parse error: facet "+Object.keys($$[$0])[0]+" defined multiple times");
        }
        this.$ = extend($$[$0-1], $$[$0]) // t: 1literalLength
      
break;
case 95:
this.$ = extend({ type: "NodeConstraint" }, $$[$0]) // t: 1iriPattern;
break;
case 96:
this.$ = extend({ type: "NodeConstraint"}, $$[$0-1], $$[$0]) // t: 1iriPattern;
break;
case 97:
this.$ = extend({ type: "NodeConstraint"}, $$[$0]) // t: @@;
break;
case 99: case 103:

        if (Object.keys($$[$0-1]).indexOf(Object.keys($$[$0])[0]) !== -1) {
          error("Parse error: facet "+Object.keys($$[$0])[0]+" defined multiple times");
        }
        this.$ = extend($$[$0-1], $$[$0]) // t: !! look to 1literalLength
      
break;
case 100:
this.$ = {};
break;
case 101:

        if (Object.keys($$[$0-1]).indexOf(Object.keys($$[$0])[0]) !== -1) {
          error("Parse error: facet "+Object.keys($$[$0])[0]+" defined multiple times");
        }
        this.$ = extend($$[$0-1], $$[$0])
      
break;
case 104:
this.$ = { nodeKind: "iri" } // t: 1iriPattern;
break;
case 105:
this.$ = { nodeKind: "bnode" } // t: 1bnodeLength;
break;
case 106:
this.$ = { nodeKind: "nonliteral" } // t: 1nonliteralLength;
break;
case 109:
this.$ = keyValObject($$[$0-1], parseInt($$[$0], 10)) // t: 1literalLength;
break;
case 110:
this.$ = unescapeRegexp($$[$0]) // t: 1literalPattern;
break;
case 111:
this.$ = "length" // t: 1literalLength;
break;
case 112:
this.$ = "minlength" // t: 1literalMinlength;
break;
case 113:
this.$ = "maxlength" // t: 1literalMaxlength;
break;
case 114:
this.$ = keyValObject($$[$0-1], $$[$0]) // t: 1literalMininclusive;
break;
case 115:
this.$ = keyValObject($$[$0-1], parseInt($$[$0], 10)) // t: 1literalTotaldigits;
break;
case 116:
this.$ = parseInt($$[$0], 10);;
break;
case 117: case 118:
this.$ = parseFloat($$[$0]);;
break;
case 119:
this.$ = "mininclusive" // t: 1literalMininclusive;
break;
case 120:
this.$ = "minexclusive" // t: 1literalMinexclusive;
break;
case 121:
this.$ = "maxinclusive" // t: 1literalMaxinclusive;
break;
case 122:
this.$ = "maxexclusive" // t: 1literalMaxexclusive;
break;
case 123:
this.$ = "totaldigits" // t: 1literalTotaldigits;
break;
case 124:
this.$ = "fractiondigits" // t: 1literalFractiondigits;
break;
case 125:
 // t: 1dotInherit3
        var exprObj = $$[$0-3] ? { expression: $$[$0-3] } : EmptyObject; // t: 0, 0Inherit1
        this.$ = (exprObj === EmptyObject && $$[$0-5] === EmptyObject) ?
	  EmptyShape :
	  extend({ type: "Shape" }, exprObj, $$[$0-5]);
        if ($$[$0-1].length) { this.$.annotations = $$[$0-1]; } // t: !! look to open3groupdotcloseAnnot3, open3groupdotclosecard23Annot3Code2
        if ($$[$0]) { this.$.semActs = $$[$0].semActs; } // t: !! look to open3groupdotcloseCode1, !open1dotOr1dot
      
break;
case 126:
this.$ = [ "inherit", $$[$0] ] // t: 1dotInherit1;
break;
case 127:
this.$ = [ "extra", $$[$0] ] // t: 1dotExtra1, 3groupdot3Extra, 3groupdotExtra3;
break;
case 128:
this.$ = [ "closed", true ] // t: 1dotClosed;
break;
case 129:
this.$ = EmptyObject;
break;
case 130:

      if ($$[$0-1] === EmptyObject)
	$$[$0-1] = {};
      if ($$[$0][0] === "closed")
        $$[$0-1]["closed"] = true; // t: 1dotClosed
      else if ($$[$0][0] in $$[$0-1])
        $$[$0-1][$$[$0][0]] = unionAll($$[$0-1][$$[$0][0]], $$[$0][1]); // t: 1dotInherit3, 3groupdot3Extra, 3groupdotExtra3
      else
        $$[$0-1][$$[$0][0]] = $$[$0][1]; // t: 1dotInherit1
      this.$ = $$[$0-1];
    
break;
case 133:
this.$ = [] // t: 1dot, 1dotAnnot3;
break;
case 134:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1dotAnnot3;
break;
case 135:
 // t: 1dotInherit3
        var exprObj = $$[$0-1] ? { expression: $$[$0-1] } : EmptyObject; // t: 0, 0Inherit1
        this.$ = (exprObj === EmptyObject && $$[$0-3] === EmptyObject) ?
	  EmptyShape :
	  extend({ type: "Shape" }, exprObj, $$[$0-3]);
      
break;
case 136:
this.$ = $$[$0] // t: 1dotExtra1, 3groupdot3Extra;
break;
case 137:
this.$ = [$$[$0]] // t: 1dotExtra1, 3groupdot3Extra, 3groupdotExtra3;
break;
case 138:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 3groupdotExtra3;
break;
case 142:
this.$ = { type: "OneOf", expressions: unionAll([$$[$0-1]], $$[$0]) } // t: 2oneOfdot;
break;
case 143:
this.$ = $$[$0] // t: 2oneOfdot;
break;
case 144:
this.$ = [$$[$0]] // t: 2oneOfdot;
break;
case 145:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 2oneOfdot;
break;
case 148:
this.$ = $$[$0] ? { type: "EachOf", expressions: unionAll([$$[$0-1]], $$[$0]) } : $$[$0-1] // t: 2groupOfdot;
break;
case 152:
this.$ = $$[$0-1];
break;
case 156:
this.$ = { type: "EachOf", expressions: unionAll([$$[$0-2]], $$[$0-1]) } // t: 2groupOfdot;
break;
case 157: case 158:
this.$ = $$[$0] // t: 2groupOfdot;
break;
case 159:
this.$ = [$$[$0]] // t: 2groupOfdot;
break;
case 160:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 2groupOfdot;
break;
case 161: case 163:

        this.$ = extend({ id: $$[$0-1] }, $$[$0]);
        addProduction($$[$0-1],  this.$);
      
break;
case 167:

        // t: open1dotOr1dot, !openopen1dotcloseCode1closeCode2
        this.$ = $$[$0-4];
        // Copy all of the new attributes into the encapsulated shape.
        if ("min" in $$[$0-2]) { this.$.min = $$[$0-2].min; } // t: open3groupdotclosecard23Annot3Code2
        if ("max" in $$[$0-2]) { this.$.max = $$[$0-2].max; } // t: open3groupdotclosecard23Annot3Code2
        if ($$[$0-1].length) { this.$.annotations = $$[$0-1]; } // t: open3groupdotcloseAnnot3, open3groupdotclosecard23Annot3Code2
        if ($$[$0]) { this.$.semActs = "semActs" in $$[$0-4] ? $$[$0-4].semActs.concat($$[$0].semActs) : $$[$0].semActs; } // t: open3groupdotcloseCode1, !open1dotOr1dot
      
break;
case 168:
this.$ = {} // t: 1dot;
break;
case 170:

        // $$[$0]: t: 1dotCode1
	if ($$[$0-3] !== EmptyShape && false) {
	  var t = blank();
	  addShape(t, $$[$0-3]);
	  $$[$0-3] = { type: "ShapeRef", reference: t };
	}
        this.$ = extend({ type: "TripleConstraint", predicate: $$[$0-4]}, ($$[$0-3] === EmptyShape ? {} : { valueExpr: $$[$0-3] }), $$[$0-2], $$[$0]); // t: 1dot
        if ($$[$0-1].length)
          this.$["annotations"] = $$[$0-1]; // t: 1dotAnnot3
      
break;
case 171:

        // %6: t: 1inversedotCode1
        this.$ = extend({ type: "TripleConstraint" }, $$[$0-5], { predicate: $$[$0-4] }, ($$[$0-3] === EmptyShape ? {} : { valueExpr: $$[$0-3] }), $$[$0-2], $$[$0]); // t: 1inversedot
        if ($$[$0-1].length)
          this.$["annotations"] = $$[$0-1]; // t: 1inversedotAnnot3
      
break;
case 172:
this.$ = { min:0, max:UNBOUNDED } // t: 1cardStar;
break;
case 173:
this.$ = { min:1, max:UNBOUNDED } // t: 1cardPlus;
break;
case 174:
this.$ = { min:0, max:1 } // t: 1cardOpt;
break;
case 175:

        $$[$0] = $$[$0].substr(1, $$[$0].length-2);
        var nums = $$[$0].match(/(\d+)/g);
        this.$ = { min: parseInt(nums[0], 10) }; // t: 1card2blank, 1card2Star
        if (nums.length === 2)
            this.$["max"] = parseInt(nums[1], 10); // t: 1card23
        else if ($$[$0].indexOf(',') === -1) // t: 1card2
            this.$["max"] = parseInt(nums[0], 10);
        else
            this.$["max"] = UNBOUNDED;
      
break;
case 176:
this.$ = { inverse: true } // t: 1inversedot;
break;
case 177:
this.$ = $$[$0-1] // t: 1val1IRIREF;
break;
case 178:
this.$ = [] // t: 1val1IRIREF;
break;
case 179:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1val1IRIREF;
break;
case 183:
this.$ = { type: "IriStemRange", stem: { type: "Wildcard" }, exclusions: $$[$0] } // t:1val1dotMinusiri3, 1val1dotMinusiriStem3;
break;
case 184:
this.$ = { type: "LiteralStemRange", stem: { type: "Wildcard" }, exclusions: $$[$0] } // t:@@ 1val1dotMinusliteral3, 1val1dotMinusliteralStem3;
break;
case 185:
this.$ = { type: "LanguageStemRange", stem: { type: "Wildcard" }, exclusions: $$[$0] } // t:@@ 1val1dotMinuslanguage3, 1val1dotMinuslanguageStem3;
break;
case 186:

        if ($$[$0]) {
          this.$ = {  // t: 1val1iriStem, 1val1iriStemMinusiri3
            type: $$[$0].length ? "IriStemRange" : "IriStem",
            stem: $$[$0-1]
          };
          if ($$[$0].length)
            this.$["exclusions"] = $$[$0]; // t: 1val1iriStemMinusiri3
        } else {
          this.$ = $$[$0-1]; // t: 1val1IRIREF, 1AvalA
        }
      
break;
case 187:
this.$ = [] // t: 1val1iriStem, 1val1iriStemMinusiri3;
break;
case 188:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1val1iriStemMinusiri3;
break;
case 189: case 194:
this.$ = $$[$0] // t: 1val1iriStemMinusiri3;
break;
case 192:
this.$ = [$$[$0]] // t:1val1dotMinusiri3, 1val1dotMinusiriStem3;
break;
case 193:
this.$ = appendTo($$[$0-1], $$[$0]) // t:1val1dotMinusiri3, 1val1dotMinusiriStem3;
break;
case 195:
this.$ = { type: "IriStem", stem: $$[$0-1] } // t: 1val1iriStemMinusiriStem3;
break;
case 196:

        if ($$[$0]) {
          this.$ = {  // t: @@ 1val1literalStem, 1val1literalStemMinusliteral3
            type: $$[$0].length ? "LiteralStemRange" : "LiteralStem",
            stem: $$[$0-1].value
          };
          if ($$[$0].length)
            this.$["exclusions"] = $$[$0]; // t: @@ 1val1literalStemMinusliteral3
        } else {
          this.$ = $$[$0-1]; // t: @@ 1val1LITERAL, 1AvalA
        }
      
break;
case 197:
this.$ = [] // t: @@ 1val1literalStem, 1val1literalStemMinusliteral3;
break;
case 198:
this.$ = appendTo($$[$0-1], $$[$0]) // t: @@ 1val1literalStemMinusliteral3;
break;
case 199:
this.$ = $$[$0] // t: @@ 1val1literalStemMinusliteral3;
break;
case 202:
this.$ = [$$[$0]] // t:1val1dotMinusliteral3, 1val1dotMinusliteralStem3;
break;
case 203:
this.$ = appendTo($$[$0-1], $$[$0]) // t:1val1dotMinusliteral3, 1val1dotMinusliteralStem3;
break;
case 204:
this.$ = $$[$0].value // t: @@ 1val1literalStemMinusliteral3;
break;
case 205:
this.$ = { type: "LiteralStem", stem: $$[$0-1].value } // t: @@ 1val1literalStemMinusliteralStem3;
break;
case 206:

        if ($$[$0]) {
          this.$ = {  // t: @@ 1val1languageStem, 1val1languageStemMinuslanguage3
            type: $$[$0].length ? "LanguageStemRange" : "LanguageStem",
            stem: $$[$0-1]
          };
          if ($$[$0].length)
            this.$["exclusions"] = $$[$0]; // t: @@ 1val1languageStemMinuslanguage3
        } else {
          this.$ = $$[$0-1]; // t: @@ 1val1LANGUAGE, 1AvalA
        }
      
break;
case 207:
this.$ = [] // t: @@ 1val1languageStem, 1val1languageStemMinuslanguage3;
break;
case 208:
this.$ = appendTo($$[$0-1], $$[$0]) // t: @@ 1val1languageStemMinuslanguage3;
break;
case 209: case 214:
this.$ = $$[$0] // t: @@ 1val1languageStemMinuslanguage3;
break;
case 212:
this.$ = [$$[$0]] // t:1val1dotMinuslanguage3, 1val1dotMinuslanguageStem3;
break;
case 213:
this.$ = appendTo($$[$0-1], $$[$0]) // t:1val1dotMinuslanguage3, 1val1dotMinuslanguageStem3;
break;
case 215:
this.$ = { type: "LanguageStem", stem: $$[$0-1] } // t: @@ 1val1languageStemMinuslanguageStem3;
break;
case 216:
this.$ = $$[$0].substr(1);
break;
case 217:
this.$ = { type: "Inclusion", "include": $$[$0] } // t: 2groupInclude1;
break;
case 218:
this.$ = { type: "Annotation", predicate: $$[$0-1], object: $$[$0] } // t: 1dotAnnotIRIREF;
break;
case 221:
this.$ = $$[$0].length ? { semActs: $$[$0] } : null; // t: 1dotCode1/2oneOfDot;
break;
case 222:
this.$ = [] // t: 1dot, 1dotCode1;
break;
case 223:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1dotCode1;
break;
case 224:
this.$ = unescapeSemanticAction($$[$0-1], $$[$0]) // t: 1dotCode1;
break;
case 225:
this.$ = { type: "SemAct", name: $$[$0-1] } // t: @@;
break;
case 227:
this.$ = $$[$0] ? extend($$[$0-1], { type: $$[$0] }) : $$[$0-1]; // t: 1val1Datatype;
break;
case 229:
this.$ = { value: "true", type: XSD_BOOLEAN } // t: 1val1true;
break;
case 230:
this.$ = { value: "false", type: XSD_BOOLEAN } // t: 1val1false;
break;
case 234:
this.$ = RDF_TYPE // t: 1AvalA;
break;
case 240:
this.$ = createLiteral($$[$0], XSD_INTEGER) // t: 1val1INTEGER;
break;
case 241:
this.$ = createLiteral($$[$0], XSD_DECIMAL) // t: 1val1DECIMAL;
break;
case 242:
this.$ = createLiteral($$[$0], XSD_DOUBLE) // t: 1val1DOUBLE;
break;
case 243:
this.$ = this._base === null || absoluteIRI.test($$[$0].slice(1, -1)) ? ShExUtil.unescapeText($$[$0].slice(1,-1), {}) : _resolveIRI(ShExUtil.unescapeText($$[$0].slice(1,-1), {})) // t: 1dot;
break;
case 244:
 // t:1dotPNex, 1dotPNdefault, ShExParser-test.js/with pre-defined prefixes
        var namePos = $$[$0].indexOf(':');
        this.$ = expandPrefix($$[$0].substr(0, namePos)) + $$[$0].substr(namePos + 1);
    
break;
case 245:
 // t: 1dotNS2, 1dotNSdefault, ShExParser-test.js/PNAME_NS with pre-defined prefixes
        this.$ = expandPrefix($$[$0].substr(0, $$[$0].length - 1));
    
break;
case 247:
this.$ = $$[$0] // t: 1dotInherit1, 1dot3Inherit, 1dotInherit3;
break;
case 248:
this.$ = [$$[$0]] // t: 1dotInherit1, 1dot3Inherit, 1dotInherit3;
break;
case 249:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1dotInherit3;
break;
}
},
table: [o($V0,[2,2],{3:1,4:2}),{1:[3]},o($V0,[2,3],{5:3}),{6:4,7:[2,10],8:5,9:9,10:12,11:13,14:6,15:7,16:8,17:$V1,18:$V2,19:$V3,20:$V4,21:14,22:15,23:$V5,26:16,27:19,28:18,155:20,177:$V6,187:21,188:$V7,189:$V8},{7:[1,27]},o($V0,[2,4]),{7:[2,11]},o($V0,[2,12]),o($V0,[2,13]),o($V9,[2,7],{12:28}),{18:[1,29]},{20:[1,30]},o($V9,[2,5]),o($V9,[2,6]),o($V9,[2,16]),o($V9,[2,17]),o($V9,[2,19],{27:31,177:$V6}),{24:[1,32]},o($Va,$Vb,{29:33,30:34,32:36,36:38,31:[1,35],35:$Vc,67:$Vd,68:$Ve,69:$Vf}),o($V0,[2,20]),o($Vg,[2,236]),o($Vg,[2,237]),{18:$V2,20:$V4,155:42,188:$V7},o($Vh,[2,243]),o($Vh,[2,244]),o($Vh,[2,245]),o([7,17,18,19,20,23,31,35,43,46,60,61,62,67,68,69,70,81,82,83,86,87,88,89,95,96,97,98,99,100,102,104,110,113,121,126,127,140,141,142,143,144,145,173,174,177,186,188,189],[2,246]),{1:[2,1]},{7:[2,9],8:44,10:45,13:43,15:7,16:8,17:$V1,18:$V2,19:$V3,20:$V4,21:14,22:15,23:$V5,28:18,155:20,187:21,188:$V7,189:$V8},o($V0,[2,14]),{18:[1,46]},o($V0,[2,21]),o($Vi,$Vj,{25:47,38:48,48:49,52:50,56:51,57:53,59:54,65:55,76:58,77:59,72:61,73:62,74:63,66:64,36:65,80:69,155:70,78:72,101:73,84:74,90:76,92:77,18:$V2,20:$V4,35:$Vk,60:$Vl,62:$Vm,67:$Vd,68:$Ve,69:$Vf,70:$Vn,81:$Vo,82:$Vp,83:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,145:$VB,188:$V7}),o($V9,[2,24]),o($V9,[2,25]),o($V9,[2,26]),o($Vi,$Vj,{76:58,77:59,72:61,73:62,74:63,80:69,155:70,78:72,84:74,90:76,92:77,33:87,57:88,59:89,64:90,101:93,18:$V2,20:$V4,60:[1,91],62:[1,92],70:$Vn,81:$Vo,82:$Vp,83:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,145:$VB,188:$V7}),o($Va,[2,31],{36:94,67:$Vd,68:$Ve,69:$Vf}),{37:95,39:96,40:97,42:98,43:$VC,45:99,46:$VD},o($VE,[2,86]),o($VE,[2,87]),{18:$V2,20:$V4,28:102,155:20,187:21,188:$V7,189:$V8},{177:[1,104],178:[1,103]},o($V9,[2,8]),o($V9,[2,22]),o($V9,[2,23]),o($V0,[2,15]),o($V9,[2,18]),o($VF,[2,34]),o($VG,[2,47],{49:105}),o($VH,[2,54],{53:106}),o($VH,[2,58]),o($Vi,$Vj,{57:53,59:54,65:55,76:58,77:59,72:61,73:62,74:63,66:64,36:65,80:69,155:70,78:72,101:73,84:74,90:76,92:77,56:107,18:$V2,20:$V4,60:$Vl,62:$Vm,67:$Vd,68:$Ve,69:$Vf,70:$Vn,81:$Vo,82:$Vp,83:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,145:$VB,188:$V7}),o($VH,[2,76],{66:64,36:65,101:73,65:108,67:$Vd,68:$Ve,69:$Vf,102:$Vj,110:$Vj,113:$Vj,173:$Vj}),o($VH,[2,78]),o($VH,[2,67],{76:58,77:59,80:69,84:74,63:109,57:110,81:$Vo,82:$Vp,83:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu}),o($Va,$Vb,{32:36,36:38,30:111,35:$Vc,67:$Vd,68:$Ve,69:$Vf}),o($VH,[2,81]),o($VI,[2,95],{80:69,84:74,77:112,86:$Vr,87:$Vs,88:$Vt,89:$Vu}),o($VI,[2,97],{84:74,80:113,86:$Vr,87:$Vs,88:$Vt,89:$Vu}),o($VJ,$VK,{71:114}),o($VJ,$VK,{71:115}),o($VJ,$VK,{71:116}),o($VH,[2,92],{90:76,92:77,78:117,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA}),o($VE,[2,84]),o($VE,[2,85]),o($VL,[2,104]),o($VL,[2,105]),o($VL,[2,106]),o($VL,[2,102]),o([7,17,18,19,20,23,43,46,61,62,81,82,83,85,86,87,88,89,93,94,95,96,97,98,99,100,104,121,126,127,140,141,142,143,147,160,161,172,174,177,179,180,183,184,188,189],[2,235]),o($VM,[2,178],{146:118}),o($VN,[2,98]),{102:[1,119],107:120,108:121,109:122,110:$VO,113:$VP,173:$VQ},{85:[1,126]},o($VR,[2,110]),{85:[1,128],91:127,93:[1,129],94:[1,130]},{85:[1,131]},{85:[2,111]},{85:[2,112]},{85:[2,113]},o($VS,[2,119]),o($VS,[2,120]),o($VS,[2,121]),o($VS,[2,122]),{85:[2,123]},{85:[2,124]},o($VT,$VU,{39:96,40:97,42:98,45:99,34:132,37:133,43:$VC,46:$VD}),o($VV,[2,69],{101:93,58:134,64:135,36:136,67:$Vd,68:$Ve,69:$Vf,102:$Vj,110:$Vj,113:$Vj,173:$Vj}),o($VV,[2,71]),o($VV,[2,72],{76:58,77:59,80:69,84:74,57:137,81:$Vo,82:$Vp,83:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu}),o($Va,$Vb,{32:36,36:38,30:138,35:$Vc,67:$Vd,68:$Ve,69:$Vf}),o($VV,[2,75]),{102:[1,139],107:120,108:121,109:122,110:$VO,113:$VP,173:$VQ},o($VT,$VU,{39:96,40:97,42:98,45:99,37:133,34:140,43:$VC,46:$VD}),o($VT,[2,29]),o($VT,[2,35],{42:141,43:$VC}),o($VW,[2,43],{41:142,45:143,46:$VD}),o($VW,[2,38]),o($VV,[2,41]),o($Vi,$Vj,{76:58,77:59,72:61,73:62,74:63,80:69,155:70,78:72,84:74,90:76,92:77,101:93,64:135,36:136,44:144,47:145,55:146,57:148,59:149,58:150,18:$V2,20:$V4,35:$VX,60:$VY,62:$VZ,67:$Vd,68:$Ve,69:$Vf,70:$Vn,81:$Vo,82:$Vp,83:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,145:$VB,188:$V7}),o($Vi,$Vj,{76:58,77:59,72:61,73:62,74:63,80:69,155:70,78:72,84:74,90:76,92:77,101:93,64:135,36:136,55:146,57:148,59:149,58:150,47:153,18:$V2,20:$V4,35:$VX,60:$VY,62:$VZ,67:$Vd,68:$Ve,69:$Vf,70:$Vn,81:$Vo,82:$Vp,83:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,145:$VB,188:$V7}),o($VE,[2,88]),o($V_,[2,224]),o($V_,[2,225]),o($VF,[2,45],{50:154,43:[1,155]}),o($VG,[2,52],{54:156,46:[1,157]}),o($VH,[2,59]),o($VH,[2,77]),o($VH,[2,79]),o($VH,[2,68]),{61:[1,158]},o($VI,[2,96],{84:74,80:113,86:$Vr,87:$Vs,88:$Vt,89:$Vu}),o($VL,[2,103]),o($VH,[2,89],{84:74,90:76,92:77,75:159,80:160,78:161,86:$Vr,87:$Vs,88:$Vt,89:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA}),o($VH,[2,90],{84:74,90:76,92:77,75:159,80:160,78:161,86:$Vr,87:$Vs,88:$Vt,89:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA}),o($VH,[2,91],{84:74,90:76,92:77,75:159,80:160,78:161,86:$Vr,87:$Vs,88:$Vt,89:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA}),o($VN,[2,99]),{18:$V2,20:$V4,62:[1,167],85:$V$,93:$V01,94:$V11,147:[1,162],148:163,149:164,150:165,151:166,155:168,162:169,167:170,172:$V21,179:$V31,180:$V41,182:173,183:$V51,184:$V61,188:$V7},{18:$V2,20:$V4,60:$V71,103:180,104:$V81,111:181,115:191,116:182,117:183,118:184,124:185,131:$V91,133:187,134:188,135:$Va1,136:190,139:192,144:$Vb1,155:195,173:$Vc1,186:$Vd1,188:$V7},o($Vi,[2,130]),o($Vi,[2,126]),o($Vi,[2,127]),o($Vi,[2,128]),{18:$V2,20:$V4,28:199,155:20,187:21,188:$V7,189:$V8,190:198},{18:$V2,20:$V4,114:200,115:201,155:195,186:$Vd1,188:$V7},o($VR,[2,109]),o($VJ,[2,114]),o($VJ,[2,116]),o($VJ,[2,117]),o($VJ,[2,118]),o($VJ,[2,115]),o($VT,[2,27]),o($VT,[2,33]),o($VV,[2,70]),o($Ve1,[2,82]),o($Ve1,[2,83]),o($VV,[2,73]),{61:[1,202]},{18:$V2,20:$V4,60:$V71,103:203,104:$V81,111:181,115:191,116:182,117:183,118:184,124:185,131:$V91,133:187,134:188,135:$Va1,136:190,139:192,144:$Vb1,155:195,173:$Vc1,186:$Vd1,188:$V7},o($VT,[2,28]),o($VW,[2,39]),o($VT,[2,36],{42:204,43:$VC}),o($VV,[2,42]),o($VW,[2,37]),o($VV,[2,50],{51:205}),o($VV,[2,56]),o($Vi,$Vj,{76:58,77:59,72:61,73:62,74:63,80:69,155:70,78:72,84:74,90:76,92:77,101:93,64:135,36:136,57:148,59:149,58:150,55:206,18:$V2,20:$V4,60:$VY,62:$VZ,67:$Vd,68:$Ve,69:$Vf,70:$Vn,81:$Vo,82:$Vp,83:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,145:$VB,188:$V7}),o($VV,[2,60],{101:93,64:135,36:136,58:207,67:$Vd,68:$Ve,69:$Vf,102:$Vj,110:$Vj,113:$Vj,173:$Vj}),o($VV,[2,62]),o($VV,[2,63],{76:58,77:59,80:69,84:74,57:208,81:$Vo,82:$Vp,83:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu}),o($Va,$Vb,{32:36,36:38,30:209,35:$Vc,67:$Vd,68:$Ve,69:$Vf}),o($VV,[2,66]),o($VV,[2,40]),o($VG,[2,48]),o($Vi,$Vj,{52:50,56:51,57:53,59:54,65:55,76:58,77:59,72:61,73:62,74:63,66:64,36:65,80:69,155:70,78:72,101:73,84:74,90:76,92:77,48:210,18:$V2,20:$V4,35:$Vk,60:$Vl,62:$Vm,67:$Vd,68:$Ve,69:$Vf,70:$Vn,81:$Vo,82:$Vp,83:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,145:$VB,188:$V7}),o($VH,[2,55]),o($Vi,$Vj,{56:51,57:53,59:54,65:55,76:58,77:59,72:61,73:62,74:63,66:64,36:65,80:69,155:70,78:72,101:73,84:74,90:76,92:77,52:211,18:$V2,20:$V4,35:$Vk,60:$Vl,62:$Vm,67:$Vd,68:$Ve,69:$Vf,70:$Vn,81:$Vo,82:$Vp,83:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,145:$VB,188:$V7}),o($VH,[2,80]),o($VJ,[2,94]),o($VJ,[2,107]),o($VJ,[2,108]),o($VJ,[2,177]),o($VM,[2,179]),o($VM,[2,180]),o($VM,[2,181]),o($VM,[2,182]),{152:212,153:213,154:214,158:215,161:[1,218],165:216,170:217},o($VM,[2,190],{156:219,159:220,160:[1,221]}),o($VM,[2,200],{163:222,166:223,160:[1,224]}),o($VM,[2,210],{168:225,171:226,160:[1,227]}),o($Vf1,[2,226]),o($Vf1,[2,231],{181:228,185:[1,229]}),o($Vf1,[2,228]),o($Vf1,[2,229]),o($Vf1,[2,230]),o([18,20,62,85,93,94,147,160,161,172,179,180,183,184,188],[2,216]),o($Vf1,[2,240]),o($Vf1,[2,241]),o($Vf1,[2,242]),{104:[1,230]},{104:[2,132]},{104:[2,139]},{104:[2,140],119:231,120:232,121:$Vg1},{104:[2,141]},o($Vh1,$Vi1,{125:234,128:237,130:238,126:$Vj1,127:$Vk1}),{18:$V2,20:$V4,132:239,155:240,187:241,188:$V7,189:$V8},o($Vl1,[2,162]),o($Vl1,[2,164]),o($Vl1,[2,165]),o($Vl1,[2,166]),o($Vi,$Vj,{38:48,48:49,52:50,56:51,57:53,59:54,65:55,76:58,77:59,72:61,73:62,74:63,66:64,36:65,80:69,155:70,78:72,101:73,84:74,90:76,92:77,25:242,18:$V2,20:$V4,35:$Vk,60:$Vl,62:$Vm,67:$Vd,68:$Ve,69:$Vf,70:$Vn,81:$Vo,82:$Vp,83:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,145:$VB,188:$V7}),{18:$V2,20:$V4,115:243,155:195,186:$Vd1,188:$V7},{18:$V2,20:$V4,60:$V71,115:191,117:248,118:246,122:244,123:245,124:247,131:$V91,133:187,134:188,135:$Va1,136:190,139:192,144:$Vb1,155:195,173:$Vc1,186:$Vd1,188:$V7},{18:$V2,20:$V4,132:249,155:240,187:241,188:$V7,189:$V8},o($Vm1,[2,233]),o($Vm1,[2,234]),o([18,20,186,188],[2,176]),o($Vi,[2,247],{155:20,187:21,28:250,18:$V2,20:$V4,188:$V7,189:$V8}),o($Vn1,[2,248]),o($Vi,[2,136],{155:195,115:251,18:$V2,20:$V4,186:$Vd1,188:$V7}),o($Vo1,[2,137]),o($VV,[2,74]),{104:[1,252]},o($VW,[2,44]),o($VW,[2,49],{45:253,46:$VD}),o($VV,[2,57]),o($VV,[2,61]),o($VV,[2,64]),{61:[1,254]},o($VG,[2,46]),o($VH,[2,53]),o($VM,[2,183],{158:255,161:$Vp1}),o($VM,[2,184],{165:257,161:$Vq1}),o($VM,[2,185],{170:259,161:$Vr1}),o($Vs1,[2,192]),o($Vs1,[2,202]),o($Vs1,[2,212]),{18:$V2,20:$V4,85:$V$,93:$V01,94:$V11,155:261,162:262,167:263,172:$V21,179:$V31,180:$V41,182:173,183:$V51,184:$V61,188:$V7},o($VM,[2,186]),o($VM,[2,191]),o($Vs1,[2,187],{157:264}),o($VM,[2,196]),o($VM,[2,201]),o($Vs1,[2,197],{164:265}),o($VM,[2,206]),o($VM,[2,211]),o($Vs1,[2,207],{169:266}),o($Vf1,[2,227]),{18:$V2,20:$V4,72:267,155:70,188:$V7},o($VE,[2,135]),o([61,104],[2,142],{120:268,121:$Vg1}),o($Vh1,[2,144]),{18:$V2,20:$V4,60:$V71,115:191,117:269,124:185,131:$V91,133:187,134:188,135:$Va1,136:190,139:192,144:$Vb1,155:195,173:$Vc1,186:$Vd1,188:$V7},o($Vh1,[2,148]),o($Vh1,[2,150],{133:187,134:188,136:190,115:191,139:192,155:195,124:270,18:$V2,20:$V4,60:$V71,131:$V91,135:$Va1,144:$Vb1,173:$Vc1,186:$Vd1,188:$V7}),o($Vh1,[2,151],{133:187,134:188,136:190,115:191,139:192,155:195,124:271,18:$V2,20:$V4,60:$V71,131:$V91,135:$Va1,144:$Vb1,173:$Vc1,186:$Vd1,188:$V7}),o($Vh1,$Vt1,{129:272,130:273,126:$Vu1,127:$Vv1}),o($Vl1,[2,159]),{18:$V2,20:$V4,60:$V71,115:191,133:276,134:277,139:192,144:$Vb1,155:195,186:$Vd1,188:$V7},o($Vw1,[2,238]),o($Vw1,[2,239]),o($Vx1,$Vy1,{137:278,138:279,140:$Vz1,141:$VA1,142:$VB1,143:$VC1}),o($Vi,$Vj,{38:48,48:49,52:50,56:51,57:53,59:54,65:55,76:58,77:59,72:61,73:62,74:63,66:64,36:65,80:69,155:70,78:72,101:73,84:74,90:76,92:77,25:284,18:$V2,20:$V4,35:$Vk,60:$Vl,62:$Vm,67:$Vd,68:$Ve,69:$Vf,70:$Vn,81:$Vo,82:$Vp,83:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,145:$VB,188:$V7}),{61:[1,285]},{61:[2,146]},{61:[2,147]},{121:$Vi1,125:234,126:$Vj1,127:$Vk1,128:286,130:238},{119:231,120:232,121:$Vg1},o($Vl1,[2,217]),o($Vn1,[2,249]),o($Vo1,[2,138]),o([7,17,18,19,20,23,43,46,61,81,82,83,86,87,88,89,174,177,188,189],$VD1,{105:287}),o($VV,[2,51]),o($VV,[2,65]),o($Vs1,[2,193]),{18:$V2,20:$V4,155:261,188:$V7},o($Vs1,[2,203]),{85:$V$,93:$V01,94:$V11,162:262,179:$V31,180:$V41,182:173,183:$V51,184:$V61},o($Vs1,[2,213]),{167:263,172:$V21},o($Vs1,[2,194],{160:[1,288]}),o($Vs1,[2,204],{160:[1,289]}),o($Vs1,[2,214],{160:[1,290]}),o($VM,[2,189],{158:291,161:$Vp1}),o($VM,[2,199],{165:292,161:$Vq1}),o($VM,[2,209],{170:293,161:$Vr1}),o($Vf1,[2,232]),o($Vh1,[2,145]),o($Vh1,[2,143]),o($Vl1,[2,157]),o($Vl1,[2,158]),o($Vh1,$VE1),o($Vl1,[2,160]),o($Vh1,[2,154],{133:187,134:188,136:190,115:191,139:192,155:195,124:270,18:$V2,20:$V4,60:$V71,131:$V91,135:$Va1,144:$Vb1,173:$Vc1,186:$Vd1,188:$V7}),o($Vh1,[2,155],{133:187,134:188,136:190,115:191,139:192,155:195,124:271,18:$V2,20:$V4,60:$V71,131:$V91,135:$Va1,144:$Vb1,173:$Vc1,186:$Vd1,188:$V7}),o($Vl1,[2,161]),o($Vl1,[2,163]),o($Vx1,$VD1,{105:294}),o($Vx1,[2,169]),o($Vx1,[2,172]),o($Vx1,[2,173]),o($Vx1,[2,174]),o($Vx1,[2,175]),o($Vx1,$Vy1,{138:279,137:295,140:$Vz1,141:$VA1,142:$VB1,143:$VC1}),o($Vx1,$Vy1,{138:279,137:296,140:$Vz1,141:$VA1,142:$VB1,143:$VC1}),o([61,121],$Vt1,{130:273,129:297,126:$Vu1,127:$Vv1}),o([7,17,18,19,20,23,43,46,61,81,82,83,86,87,88,89,177,188,189],$VF1,{106:298,112:299,176:300,174:$VG1}),o($Vs1,[2,195]),o($Vs1,[2,205]),o($Vs1,[2,215]),o($Vs1,[2,188]),o($Vs1,[2,198]),o($Vs1,[2,208]),o($VH1,$VF1,{112:299,176:300,106:302,174:$VG1}),o($Vx1,$VD1,{105:303}),o($Vx1,$VD1,{105:304}),{61:[2,156],121:$VE1},o($Ve1,[2,125]),o($VI1,[2,134]),o([7,17,18,19,20,23,43,46,61,81,82,83,86,87,88,89,104,121,126,127,188,189],[2,221],{27:305,177:$V6}),{18:$V2,20:$V4,115:306,155:195,186:$Vd1,188:$V7},o($Vl1,[2,170]),o($VH1,$VF1,{112:299,176:300,106:307,174:$VG1}),o($VH1,$VF1,{112:299,176:300,106:308,174:$VG1}),o($V_,[2,223]),{18:$V2,20:$V4,85:$V$,93:$V01,94:$V11,155:310,162:311,175:309,179:$V31,180:$V41,182:173,183:$V51,184:$V61,188:$V7},o($Vl1,[2,171]),o($Vl1,[2,167]),o($VI1,[2,218]),o($VI1,[2,219]),o($VI1,[2,220])],
defaultActions: {6:[2,11],27:[2,1],78:[2,111],79:[2,112],80:[2,113],85:[2,123],86:[2,124],181:[2,132],182:[2,139],184:[2,141],245:[2,146],246:[2,147]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = new Error();

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  /*
    ShEx parser in the Jison parser generator format.
  */

  var UNBOUNDED = -1;

  var ShExUtil = require("./ShExUtil");

  // Common namespaces and entities
  var RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
      RDF_TYPE  = RDF + 'type',
      RDF_FIRST = RDF + 'first',
      RDF_REST  = RDF + 'rest',
      RDF_NIL   = RDF + 'nil',
      XSD = 'http://www.w3.org/2001/XMLSchema#',
      XSD_INTEGER  = XSD + 'integer',
      XSD_DECIMAL  = XSD + 'decimal',
      XSD_FLOAT   = XSD + 'float',
      XSD_DOUBLE   = XSD + 'double',
      XSD_BOOLEAN  = XSD + 'boolean',
      XSD_TRUE =  '"true"^^'  + XSD_BOOLEAN,
      XSD_FALSE = '"false"^^' + XSD_BOOLEAN,
      XSD_PATTERN        = XSD + 'pattern',
      XSD_MININCLUSIVE   = XSD + 'minInclusive',
      XSD_MINEXCLUSIVE   = XSD + 'minExclusive',
      XSD_MAXINCLUSIVE   = XSD + 'maxInclusive',
      XSD_MAXEXCLUSIVE   = XSD + 'maxExclusive',
      XSD_LENGTH         = XSD + 'length',
      XSD_MINLENGTH      = XSD + 'minLength',
      XSD_MAXLENGTH      = XSD + 'maxLength',
      XSD_TOTALDIGITS    = XSD + 'totalDigits',
      XSD_FRACTIONDIGITS = XSD + 'fractionDigits';

  var numericDatatypes = [
      XSD + "integer",
      XSD + "decimal",
      XSD + "float",
      XSD + "double",
      XSD + "string",
      XSD + "boolean",
      XSD + "dateTime",
      XSD + "nonPositiveInteger",
      XSD + "negativeInteger",
      XSD + "long",
      XSD + "int",
      XSD + "short",
      XSD + "byte",
      XSD + "nonNegativeInteger",
      XSD + "unsignedLong",
      XSD + "unsignedInt",
      XSD + "unsignedShort",
      XSD + "unsignedByte",
      XSD + "positiveInteger"
  ];

  var absoluteIRI = /^[a-z][a-z0-9+.-]*:/i,
    schemeAuthority = /^(?:([a-z][a-z0-9+.-]*:))?(?:\/\/[^\/]*)?/i,
    dotSegments = /(?:^|\/)\.\.?(?:$|[\/#?])/;

  var numericFacets = ["mininclusive", "minexclusive",
                       "maxinclusive", "maxexclusive"];

  // Returns a lowercase version of the given string
  function lowercase(string) {
    return string.toLowerCase();
  }

  // Appends the item to the array and returns the array
  function appendTo(array, item) {
    return array.push(item), array;
  }

  // Appends the items to the array and returns the array
  function appendAllTo(array, items) {
    return array.push.apply(array, items), array;
  }

  // Extends a base object with properties of other objects
  function extend(base) {
    if (!base) base = {};
    for (var i = 1, l = arguments.length, arg; i < l && (arg = arguments[i] || {}); i++)
      for (var name in arg)
        base[name] = arg[name];
    return base;
  }

  // Creates an array that contains all items of the given arrays
  function unionAll() {
    var union = [];
    for (var i = 0, l = arguments.length; i < l; i++)
      union = union.concat.apply(union, arguments[i]);
    return union;
  }

  // N3.js:lib/N3Parser.js<0.4.5>:58 with
  //   s/this\./Parser./g
  // ### `_setBase` sets the base IRI to resolve relative IRIs.
  Parser._setBase = function (baseIRI) {
    if (!baseIRI)
      baseIRI = null;

    // baseIRI '#' check disabled to allow -x 'data:text/shex,...#'
    // else if (baseIRI.indexOf('#') >= 0)
    //   throw new Error('Invalid base IRI ' + baseIRI);

    // Set base IRI and its components
    if (Parser._base = baseIRI) {
      Parser._basePath   = baseIRI.replace(/[^\/?]*(?:\?.*)?$/, '');
      baseIRI = baseIRI.match(schemeAuthority);
      Parser._baseRoot   = baseIRI[0];
      Parser._baseScheme = baseIRI[1];
    }
  }

  // N3.js:lib/N3Parser.js<0.4.5>:576 with
  //   s/this\./Parser./g
  //   s/token/iri/
  // ### `_resolveIRI` resolves a relative IRI token against the base path,
  // assuming that a base path has been set and that the IRI is indeed relative.
  function _resolveIRI (iri) {
    switch (iri[0]) {
    // An empty relative IRI indicates the base IRI
    case undefined: return Parser._base;
    // Resolve relative fragment IRIs against the base IRI
    case '#': return Parser._base + iri;
    // Resolve relative query string IRIs by replacing the query string
    case '?': return Parser._base.replace(/(?:\?.*)?$/, iri);
    // Resolve root-relative IRIs at the root of the base IRI
    case '/':
      // Resolve scheme-relative IRIs to the scheme
      return (iri[1] === '/' ? Parser._baseScheme : Parser._baseRoot) + _removeDotSegments(iri);
    // Resolve all other IRIs at the base IRI's path
    default: {
      return _removeDotSegments(Parser._basePath + iri);
    }
    }
  }

  // ### `_removeDotSegments` resolves './' and '../' path segments in an IRI as per RFC3986.
  function _removeDotSegments (iri) {
    // Don't modify the IRI if it does not contain any dot segments
    if (!dotSegments.test(iri))
      return iri;

    // Start with an imaginary slash before the IRI in order to resolve trailing './' and '../'
    var result = '', length = iri.length, i = -1, pathStart = -1, segmentStart = 0, next = '/';

    while (i < length) {
      switch (next) {
      // The path starts with the first slash after the authority
      case ':':
        if (pathStart < 0) {
          // Skip two slashes before the authority
          if (iri[++i] === '/' && iri[++i] === '/')
            // Skip to slash after the authority
            while ((pathStart = i + 1) < length && iri[pathStart] !== '/')
              i = pathStart;
        }
        break;
      // Don't modify a query string or fragment
      case '?':
      case '#':
        i = length;
        break;
      // Handle '/.' or '/..' path segments
      case '/':
        if (iri[i + 1] === '.') {
          next = iri[++i + 1];
          switch (next) {
          // Remove a '/.' segment
          case '/':
            result += iri.substring(segmentStart, i - 1);
            segmentStart = i + 1;
            break;
          // Remove a trailing '/.' segment
          case undefined:
          case '?':
          case '#':
            return result + iri.substring(segmentStart, i) + iri.substr(i + 1);
          // Remove a '/..' segment
          case '.':
            next = iri[++i + 1];
            if (next === undefined || next === '/' || next === '?' || next === '#') {
              result += iri.substring(segmentStart, i - 2);
              // Try to remove the parent path from result
              if ((segmentStart = result.lastIndexOf('/')) >= pathStart)
                result = result.substr(0, segmentStart);
              // Remove a trailing '/..' segment
              if (next !== '/')
                return result + '/' + iri.substr(i + 1);
              segmentStart = i + 1;
            }
          }
        }
      }
      next = iri[++i];
    }
    return result + iri.substring(segmentStart);
  }

  // Creates an expression with the given type and attributes
  function expression(expr, attr) {
    var expression = { expression: expr };
    if (attr)
      for (var a in attr)
        expression[a] = attr[a];
    return expression;
  }

  // Creates a path with the given type and items
  function path(type, items) {
    return { type: 'path', pathType: type, items: items };
  }

  // Creates a literal with the given value and type
  function createLiteral(value, type) {
    return { value: value, type: type };
  }

  // Creates a new blank node identifier
  function blank() {
    return '_:b' + blankId++;
  };
  var blankId = 0;
  Parser._resetBlanks = function () { blankId = 0; }
  Parser.reset = function () {
    Parser._prefixes = Parser.valueExprDefns = Parser.shapes = Parser.productions = Parser.start = Parser.startActs = null; // Reset state.
    Parser._base = Parser._baseIRI = Parser._baseIRIPath = Parser._baseIRIRoot = null;
  }
  var _fileName; // for debugging
  Parser._setFileName = function (fn) { _fileName = fn; }

  // Regular expression and replacement strings to escape strings
  var stringEscapeReplacements = { '\\': '\\', "'": "'", '"': '"',
                                   't': '\t', 'b': '\b', 'n': '\n', 'r': '\r', 'f': '\f' },
      semactEscapeReplacements = { '\\': '\\', '%': '%' };

  // Translates string escape codes in the string into their textual equivalent
  function unescapeString(string, trimLength) {
    string = string.substring(trimLength, string.length - trimLength);
    return { value: ShExUtil.unescapeText(string, stringEscapeReplacements) };
  }

  function unescapeLangString(string, trimLength) {
    var at = string.lastIndexOf("@");
    var lang = string.substr(at);
    string = string.substr(0, at);
    var u = unescapeString(string, trimLength);
    return extend(u, { language: lowercase(lang.substr(1)) });
  }

  // Translates regular expression escape codes in the string into their textual equivalent
  function unescapeRegexp (regexp) {
    var end = regexp.lastIndexOf("/");
    var s = regexp.substr(1, end-1);
    var regexpEscapeReplacements = {
      '.': "\\.", '\\': "\\\\", '?': "\\?", '*': "\\*", '+': "\\+",
      '{': "\\{", '}': "\\}", '(': "\\(", ')': "\\)", '|': "\\|",
      '^': "\\^", '$': "\\$", '[': "\\[", ']': "\\]", '/': "\\/",
      't': '\\t', 'n': '\\n', 'r': '\\r', '-': "\\-", '/': '/'
    };
    s = ShExUtil.unescapeText(s, regexpEscapeReplacements)
    var ret = {
      pattern: s
    };
    if (regexp.length > end+1)
      ret.flags = regexp.substr(end+1);
    return ret;
  }

  // Convenience function to return object with p1 key, value p2
  function keyValObject(key, val) {
    var ret = {};
    ret[key] = val;
    return ret;
  }

  // Return object with p1 key, p2 string value
  function unescapeSemanticAction(key, string) {
    string = string.substring(1, string.length - 2);
    return {
      type: "SemAct",
      name: key,
      code: ShExUtil.unescapeText(string, semactEscapeReplacements)
    };
  }

  function error (msg) {
    Parser.reset();
    throw new Error(msg);
  }

  // Expand declared prefix or throw Error
  function expandPrefix (prefix) {
    if (!(prefix in Parser._prefixes))
      error('Parse error; unknown prefix: ' + prefix);
    return Parser._prefixes[prefix];
  }

  // Add a shape to the map
  function addShape (label, shape) {
    if (Parser.productions && label in Parser.productions)
      error("Structural error: "+label+" is a shape");
    if (!Parser.shapes)
      Parser.shapes = {};
    if (label in Parser.shapes) {
      if (Parser.options.duplicateShape === "replace")
        Parser.shapes[label] = shape;
      else if (Parser.options.duplicateShape !== "ignore")
        error("Parse error: "+label+" already defined");
    } else
      Parser.shapes[label] = shape;
  }

  // Add a production to the map
  function addProduction (label, production) {
    if (Parser.shapes && label in Parser.shapes)
      error("Structural error: "+label+" is a shape");
    if (!Parser.productions)
      Parser.productions = {};
    if (label in Parser.productions) {
      if (Parser.options.duplicateShape === "replace")
        Parser.productions[label] = production;
      else if (Parser.options.duplicateShape !== "ignore")
        error("Parse error: "+label+" already defined");
    } else
      Parser.productions[label] = production;
  }

  function shapeJunction (type, container, elts) {
    if (elts.length === 0) {
      return container;
    } else if (container.type === type) {
      container.shapeExprs = container.shapeExprs.concat(elts);
      return container;
    } else {
      return { type: type, shapeExprs: [container].concat(elts) };
    }
  }

  var EmptyObject = {  };
  var EmptyShape = { type: "Shape" };
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/**/
break;
case 1:return 67;
break;
case 2:return 68;
break;
case 3:return 172;
break;
case 4:return 69;
break;
case 5:return 188;
break;
case 6:return 143;
break;
case 7:return 94;
break;
case 8:return 93;
break;
case 9:return 85;
break;
case 10:return 'ANON';
break;
case 11:return 18;
break;
case 12:return 20;
break;
case 13:return 186;
break;
case 14:return 86;
break;
case 15:return 189;
break;
case 16:return 178;
break;
case 17: yy_.yytext = unescapeLangString(yy_.yytext, 3); return 179; 
break;
case 18: yy_.yytext = unescapeLangString(yy_.yytext, 3); return 179; 
break;
case 19: yy_.yytext = unescapeLangString(yy_.yytext, 1); return 179; 
break;
case 20: yy_.yytext = unescapeLangString(yy_.yytext, 1); return 179; 
break;
case 21: yy_.yytext = unescapeString(yy_.yytext, 3); return 180; 
break;
case 22: yy_.yytext = unescapeString(yy_.yytext, 3); return 180; 
break;
case 23: yy_.yytext = unescapeString(yy_.yytext, 1); return 180; 
break;
case 24: yy_.yytext = unescapeString(yy_.yytext, 1); return 180; 
break;
case 25:return 17;
break;
case 26:return 19;
break;
case 27:return 23;
break;
case 28:return 31;
break;
case 29:return 'IT_VIRTUAL';
break;
case 30:return 110;
break;
case 31:return 113;
break;
case 32:return 70;
break;
case 33:return 82;
break;
case 34:return 81;
break;
case 35:return 83;
break;
case 36:return 46;
break;
case 37:return 43;
break;
case 38:return 35;
break;
case 39:return 95;
break;
case 40:return 96;
break;
case 41:return 97;
break;
case 42:return 98;
break;
case 43:return 87;
break;
case 44:return 88;
break;
case 45:return 89;
break;
case 46:return 99;
break;
case 47:return 100;
break;
case 48:return 24;
break;
case 49:return 174;
break;
case 50:return 102;
break;
case 51:return 104;
break;
case 52:return 173;
break;
case 53:return '||';
break;
case 54:return 121;
break;
case 55:return 126;
break;
case 56:return 60;
break;
case 57:return 61;
break;
case 58:return 145;
break;
case 59:return 147;
break;
case 60:return 131;
break;
case 61:return '!';
break;
case 62:return 185;
break;
case 63:return 144;
break;
case 64:return 62;
break;
case 65:return 160;
break;
case 66:return 127;
break;
case 67:return 140;
break;
case 68:return 141;
break;
case 69:return 142;
break;
case 70:return 161;
break;
case 71:return 177;
break;
case 72:return 183;
break;
case 73:return 184;
break;
case 74:return 7;
break;
case 75:return 'invalid character '+yy_.yytext;
break;
}
},
rules: [/^(?:\s+|(#[^\u000a\u000d]*))/,/^(?:(@((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:)(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|:|[0-9]|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))*(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%)))))?)))/,/^(?:(@(([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:))/,/^(?:(@([A-Za-z])+((-([0-9A-Za-z])+))*))/,/^(?:@)/,/^(?:(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:)(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|:|[0-9]|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))*(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%)))))?)))/,/^(?:(\{((([+-])?([0-9])+))((,(((([+-])?([0-9])+))|\*)?))?\}))/,/^(?:(([+-])?((([0-9])+\.([0-9])*(([Ee]([+-])?([0-9])+)))|((\.)?([0-9])+(([Ee]([+-])?([0-9])+))))))/,/^(?:(([+-])?([0-9])*\.([0-9])+))/,/^(?:(([+-])?([0-9])+))/,/^(?:{ANON})/,/^(?:(<([^\u0000-\u0020<>\"{}|^`\\]|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*>))/,/^(?:((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:))/,/^(?:a\b)/,/^(?:(\/([^\u002f\u005C\u000A\u000D]|\\[nrt\\|.?*+(){}$\u002D\u005B\u005D\u005E\/]|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))+\/[smix]*))/,/^(?:(_:((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|[0-9])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?))/,/^(?:(\{([^%\\]|\\[%\\]|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*%\}))/,/^(?:('''(('|'')?([^\'\\]|(\\[\"\'\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*'''(@([A-Za-z])+((-([0-9A-Za-z])+))*)))/,/^(?:("""(("|"")?([^\"\\]|(\\[\"\'\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*"""(@([A-Za-z])+((-([0-9A-Za-z])+))*)))/,/^(?:('([^\u0027\u005c\u000a\u000d]|(\\[\"\'\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*'(@([A-Za-z])+((-([0-9A-Za-z])+))*)))/,/^(?:("([^\u0022\u005c\u000a\u000d]|(\\[\"\'\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*"(@([A-Za-z])+((-([0-9A-Za-z])+))*)))/,/^(?:('''(('|'')?([^\'\\]|(\\[\"\'\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*'''))/,/^(?:("""(("|"")?([^\"\\]|(\\[\"\'\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*"""))/,/^(?:('([^\u0027\u005c\u000a\u000d]|(\\[\"\'\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*'))/,/^(?:("([^\u0022\u005c\u000a\u000d]|(\\[\"\'\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*"))/,/^(?:([Bb][Aa][Ss][Ee]))/,/^(?:([Pp][Rr][Ee][Ff][Ii][Xx]))/,/^(?:([sS][tT][aA][rR][tT]))/,/^(?:([eE][xX][tT][eE][rR][nN][aA][lL]))/,/^(?:([Vv][Ii][Rr][Tt][Uu][Aa][Ll]))/,/^(?:([Cc][Ll][Oo][Ss][Ee][Dd]))/,/^(?:([Ee][Xx][Tt][Rr][Aa]))/,/^(?:([Ll][Ii][Tt][Ee][Rr][Aa][Ll]))/,/^(?:([Bb][Nn][Oo][Dd][Ee]))/,/^(?:([Ii][Rr][Ii]))/,/^(?:([Nn][Oo][Nn][Ll][Ii][Tt][Ee][Rr][Aa][Ll]))/,/^(?:([Aa][Nn][Dd]))/,/^(?:([Oo][Rr]))/,/^(?:([No][Oo][Tt]))/,/^(?:([Mm][Ii][Nn][Ii][Nn][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Mm][Ii][Nn][Ee][Xx][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Mm][Aa][Xx][Ii][Nn][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Mm][Aa][Xx][Ee][Xx][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Ll][Ee][Nn][Gg][Tt][Hh]))/,/^(?:([Mm][Ii][Nn][Ll][Ee][Nn][Gg][Tt][Hh]))/,/^(?:([Mm][Aa][Xx][Ll][Ee][Nn][Gg][Tt][Hh]))/,/^(?:([Tt][Oo][Tt][Aa][Ll][Dd][Ii][Gg][Ii][Tt][Ss]))/,/^(?:([Ff][Rr][Aa][Cc][Tt][Ii][Oo][Nn][Dd][Ii][Gg][Ii][Tt][Ss]))/,/^(?:=)/,/^(?:\/\/)/,/^(?:\{)/,/^(?:\})/,/^(?:&)/,/^(?:\|\|)/,/^(?:\|)/,/^(?:,)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\$)/,/^(?:!)/,/^(?:\^\^)/,/^(?:\^)/,/^(?:\.)/,/^(?:~)/,/^(?:;)/,/^(?:\*)/,/^(?:\+)/,/^(?:\?)/,/^(?:-)/,/^(?:%)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = ShExJison;
exports.Parser = ShExJison.Parser;
exports.parse = function () { return ShExJison.parse.apply(ShExJison, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}