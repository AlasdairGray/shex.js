/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[6,29,31,32,33,34,35,39,147,148,150],$V1=[1,24],$V2=[1,9],$V3=[1,26],$V4=[1,10],$V5=[1,28],$V6=[1,17],$V7=[1,19],$V8=[1,27],$V9=[1,29],$Va=[1,25],$Vb=[6,29,31,32,33,34,35,39,147,148],$Vc=[41,47,49,51],$Vd=[2,36],$Ve=[6,28,29,31,32,33,34,35,39,41,43,47,49,51,58,63,71,98,105,107,108,109,110,122,125,126,127,128,147,148,150],$Vf=[6,20,24,28,29,31,32,33,34,35,39,41,43,47,49,51,58,63,70,71,78,79,82,89,91,92,93,98,99,100,101,104,105,107,108,109,110,114,115,116,117,118,119,120,121,122,125,126,127,128,137,141,142,143,144,145,146,147,148,150,151],$Vg=[2,177],$Vh=[1,78],$Vi=[1,64],$Vj=[1,67],$Vk=[1,72],$Vl=[1,73],$Vm=[1,74],$Vn=[1,75],$Vo=[1,79],$Vp=[1,80],$Vq=[1,81],$Vr=[6,29,31,32,33,34,35,39,43,58,63,71,147,148,150],$Vs=[1,96],$Vt=[1,97],$Vu=[1,100],$Vv=[1,101],$Vw=[1,99],$Vx=[2,70],$Vy=[6,28,29,31,32,33,34,35,39,43,58,63,71,122,125,126,127,128,147,148,150],$Vz=[6,28,29,31,32,33,34,35,39,43,58,63,71,105,107,108,109,110,116,117,118,119,120,121,122,125,126,127,128,147,148,150],$VA=[2,96],$VB=[1,115],$VC=[1,116],$VD=[1,117],$VE=[1,118],$VF=[1,119],$VG=[6,28,29,31,32,33,34,35,39,41,43,47,49,51,58,63,71,99,100,101,105,107,108,109,110,122,125,126,127,128,147,148,150],$VH=[6,28,29,31,32,33,34,35,39,43,58,63,71,98,105,107,108,109,110,122,125,126,127,128,147,148,150],$VI=[32,34,71,89,104,114,115,141,142,143,144,145,146,147],$VJ=[1,127],$VK=[43,58,71],$VL=[2,55],$VM=[1,129],$VN=[43,58,63,71],$VO=[29,32,34,41,47,49,51,70,78,79,82,89,91,92,93,99,100,101,104,114,115,141,142,143,144,145,146,147],$VP=[32,34,79,147],$VQ=[32,34,41,47,49,51,147,148],$VR=[32,34,41,47,49,51,79,147],$VS=[1,146],$VT=[1,154],$VU=[1,155],$VV=[1,156],$VW=[1,157],$VX=[1,158],$VY=[1,159],$VZ=[6,28,29,31,32,33,34,35,39,43,58,63,71,105,107,108,109,110,122,125,126,127,128,147,148,150],$V_=[1,164],$V$=[1,165],$V01=[1,166],$V11=[1,167],$V21=[1,181],$V31=[1,182],$V41=[1,183],$V51=[1,179],$V61=[1,180],$V71=[2,58],$V81=[1,189],$V91=[43,58,63,71,122,150],$Va1=[2,68],$Vb1=[1,192],$Vc1=[1,193],$Vd1=[1,194],$Ve1=[1,195],$Vf1=[6,29,31,32,33,34,35,39,43,58,63,71,122,147,148,150],$Vg1=[104,114,115],$Vh1=[6,28,29,31,32,33,34,35,39,43,58,63,71,89,104,105,107,108,109,110,114,115,116,117,118,119,120,121,122,125,126,127,128,138,139,141,142,143,144,145,146,147,148,150],$Vi1=[1,212],$Vj1=[6,29,31,32,33,34,35,39,43,58,63,71,89,104,114,115,122,141,142,143,144,145,146,147,148,150],$Vk1=[2,57],$Vl1=[32,34,71,89,104,114,115,137,141,142,143,144,145,146,147],$Vm1=[43,58,63,71,150];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"shexDoc":3,"Qdirective_E_Star":4,"Q_O_QnotStartAction_E_Or_QstartActions_E_S_Qstatement_E_Star_C_E_Opt":5,"EOF":6,"directive":7,"O_QnotStartAction_E_Or_QstartActions_E_C":8,"notStartAction":9,"startActions":10,"Qstatement_E_Star":11,"statement":12,"O_QnotStartAction_E_Or_QstartActions_E_S_Qstatement_E_Star_C":13,"start":14,"shape":15,"valueClassDefinition":16,"baseDecl":17,"prefixDecl":18,"valueClassLabel":19,"=":20,"valueClassExpr":21,"Qannotation_E_Star":22,"semanticActions":23,"EXTERNAL":24,"valueClass":25,"Q_O_QIT_AND_E_S_QvalueClass_E_C_E_Star":26,"O_QIT_AND_E_S_QvalueClass_E_C":27,"IT_AND":28,"$":29,"iri":30,"IT_BASE":31,"IRIREF":32,"IT_PREFIX":33,"PNAME_NS":34,"IT_start":35,"O_QshapeLabel_E_Or_QshapeDefinition_E_S_QsemanticActions_E_C":36,"shapeLabel":37,"shapeDefinition":38,"IT_VIRTUAL":39,"Q_O_QincludeSet_E_Or_QinclPropertySet_E_Or_QIT_CLOSED_E_C_E_Star":40,"{":41,"QsomeOfShape_E_Opt":42,"}":43,"O_QincludeSet_E_Or_QinclPropertySet_E_Or_QIT_CLOSED_E_C":44,"includeSet":45,"inclPropertySet":46,"IT_CLOSED":47,"someOfShape":48,"&":49,"QshapeLabel_E_Plus":50,"IT_EXTRA":51,"Qpredicate_E_Plus":52,"predicate":53,"groupShape":54,"multiElementSomeOf":55,"Q_O_QGT_PIPE_E_S_QgroupShape_E_C_E_Plus":56,"O_QGT_PIPE_E_S_QgroupShape_E_C":57,"|":58,"innerShape":59,"multiElementGroup":60,"unaryShape":61,"groupShape_right":62,",":63,"Q_O_QGT_COMMA_E_S_QunaryShape_E_C_E_Plus":64,"QGT_COMMA_E_Opt":65,"O_QGT_COMMA_E_S_QunaryShape_E_C":66,"tripleConstraint":67,"include":68,"encapsulatedShape":69,"(":70,")":71,"Qcardinality_E_Opt":72,"cardinality":73,"annotation":74,"blankNode":75,"senseFlags":76,"^":77,"!":78,"a":79,"negatableValueClass":80,"valueClass1":81,"IT_LITERAL":82,"QxsFacet_E_Star":83,"O_QIT_IRI_E_Or_QIT_BNODE_E_Or_QIT_NONLITERAL_E_C":84,"QstringFacet_E_Plus":85,"groupShapeConstr":86,"datatype":87,"valueSet":88,".":89,"xsFacet":90,"IT_IRI":91,"IT_BNODE":92,"IT_NONLITERAL":93,"stringFacet":94,"shapeOrRef":95,"Q_O_QIT_OR_E_S_QshapeOrRef_E_C_E_Star":96,"O_QIT_OR_E_S_QshapeOrRef_E_C":97,"IT_OR":98,"ATPNAME_LN":99,"ATPNAME_NS":100,"@":101,"numericFacet":102,"stringLength":103,"INTEGER":104,"IT_PATTERN":105,"string":106,"~":107,"IT_LENGTH":108,"IT_MINLENGTH":109,"IT_MAXLENGTH":110,"numericRange":111,"rawNumeric":112,"numericLength":113,"DECIMAL":114,"DOUBLE":115,"IT_MININCLUSIVE":116,"IT_MINEXCLUSIVE":117,"IT_MAXINCLUSIVE":118,"IT_MAXEXCLUSIVE":119,"IT_TOTALDIGITS":120,"IT_FRACTIONDIGITS":121,";":122,"O_Qiri_E_Or_Qliteral_E_C":123,"literal":124,"*":125,"+":126,"?":127,"REPEAT_RANGE":128,"Qvalue_E_Star":129,"value":130,"iriRange":131,"Q_O_Q_TILDE_E_S_Qexclusion_E_Star_C_E_Opt":132,"Qexclusion_E_Plus":133,"Qexclusion_E_Star":134,"exclusion":135,"O_Q_TILDE_E_S_Qexclusion_E_Star_C":136,"-":137,"LANGTAG":138,"^^":139,"numericLiteral":140,"IT_true":141,"IT_false":142,"STRING_LITERAL1":143,"STRING_LITERAL2":144,"STRING_LITERAL_LONG1":145,"STRING_LITERAL_LONG2":146,"PNAME_LN":147,"BLANK_NODE_LABEL":148,"codeDecl":149,"%":150,"CODE":151,"QcodeDecl_E_Plus":152,"QcodeDecl_E_Star":153,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",20:"=",24:"EXTERNAL",28:"IT_AND",29:"$",31:"IT_BASE",32:"IRIREF",33:"IT_PREFIX",34:"PNAME_NS",35:"IT_start",39:"IT_VIRTUAL",41:"{",43:"}",47:"IT_CLOSED",49:"&",51:"IT_EXTRA",58:"|",63:",",70:"(",71:")",77:"^",78:"!",79:"a",82:"IT_LITERAL",89:".",91:"IT_IRI",92:"IT_BNODE",93:"IT_NONLITERAL",98:"IT_OR",99:"ATPNAME_LN",100:"ATPNAME_NS",101:"@",104:"INTEGER",105:"IT_PATTERN",107:"~",108:"IT_LENGTH",109:"IT_MINLENGTH",110:"IT_MAXLENGTH",114:"DECIMAL",115:"DOUBLE",116:"IT_MININCLUSIVE",117:"IT_MINEXCLUSIVE",118:"IT_MAXINCLUSIVE",119:"IT_MAXEXCLUSIVE",120:"IT_TOTALDIGITS",121:"IT_FRACTIONDIGITS",122:";",125:"*",126:"+",127:"?",128:"REPEAT_RANGE",137:"-",138:"LANGTAG",139:"^^",141:"IT_true",142:"IT_false",143:"STRING_LITERAL1",144:"STRING_LITERAL2",145:"STRING_LITERAL_LONG1",146:"STRING_LITERAL_LONG2",147:"PNAME_LN",148:"BLANK_NODE_LABEL",150:"%",151:"CODE"},
productions_: [0,[3,3],[4,0],[4,2],[8,1],[8,1],[11,0],[11,2],[13,2],[5,0],[5,1],[12,1],[12,1],[9,1],[9,1],[9,1],[7,1],[7,1],[16,5],[16,2],[21,2],[27,2],[26,0],[26,2],[19,2],[17,2],[18,3],[14,3],[36,1],[36,2],[15,3],[15,4],[38,4],[44,1],[44,1],[44,1],[40,0],[40,2],[42,0],[42,1],[45,2],[50,1],[50,2],[46,2],[52,1],[52,2],[48,1],[48,1],[55,2],[57,2],[56,1],[56,2],[59,1],[59,1],[54,2],[62,0],[62,1],[62,2],[65,0],[65,1],[60,3],[66,2],[64,1],[64,2],[61,1],[61,1],[61,1],[69,6],[72,0],[72,1],[22,0],[22,2],[68,2],[37,1],[37,1],[67,5],[67,6],[76,1],[76,2],[76,1],[76,2],[53,1],[53,1],[25,1],[25,2],[80,1],[80,1],[81,2],[81,1],[81,2],[81,2],[81,3],[81,2],[81,1],[81,1],[81,1],[83,0],[83,2],[84,1],[84,1],[84,1],[85,1],[85,2],[86,2],[97,2],[96,0],[96,2],[95,1],[95,1],[95,2],[95,1],[90,1],[90,1],[94,2],[94,2],[94,2],[103,1],[103,1],[103,1],[102,2],[102,2],[112,1],[112,1],[112,1],[111,1],[111,1],[111,1],[111,1],[113,1],[113,1],[87,1],[74,3],[123,1],[123,1],[73,1],[73,1],[73,1],[73,1],[88,3],[129,0],[129,2],[130,1],[130,1],[131,2],[131,2],[134,0],[134,2],[136,2],[132,0],[132,1],[133,1],[133,2],[135,2],[135,3],[124,1],[124,2],[124,3],[124,1],[124,1],[124,1],[140,1],[140,1],[140,1],[106,1],[106,1],[106,1],[106,1],[30,1],[30,1],[30,1],[75,1],[149,2],[149,3],[10,1],[152,1],[152,2],[23,1],[153,0],[153,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        var valueClasses = Parser.valueClasses ? { valueClasses: Parser.valueClasses } : {};
        var startObj = Parser.start ? { start: Parser.start } : {};
        var startActs = Parser.startActs ? { startActs: Parser.startActs } : {};
        var ret = extend({ type: 'schema', prefixes: Parser.prefixes || {} }, // Build return object from
                         valueClasses, startActs, startObj,                    // components in parser state
                         {shapes: Parser.shapes});                            // maintaining intuitve order.
        Parser.reset();
        return ret;
      
break;
case 18:
 // t: 1val1vsMinusiri3
        if (Parser.valueClasses === null || Parser.valueClasses === undefined)
          Parser.valueClasses = {  };
        Parser.valueClasses[$$[$0-4]] = extend({type: "valueClassDefn"}, $$[$0-2]);
      
break;
case 19:
 // t: @@
        if (Parser.valueClasses === null || Parser.valueClasses === undefined)
          Parser.valueClasses = {  };
        Parser.valueClasses[$$[$0-1]] = null;
      
break;
case 20:
this.$ = $$[$0].length > 0 ? { value: { type: "vcand", valueClasses: [$$[$0-1]].concat($$[$0]) } } : $$[$0-1];
break;
case 21:
this.$ = $$[$0];
break;
case 22:
this.$ = [];
break;
case 23:
this.$ = $$[$0-1].concat($$[$0]);;
break;
case 24:
this.$ = $$[$0] // t: 1val1vsMinusiri3;
break;
case 25:
 // t: @@
        Parser.base = resolveIRI($$[$0])
        Parser.basePath = Parser.base.replace(/[^\/]*$/, '');
        Parser.baseRoot = Parser.base.match(/^(?:[a-z]+:\/*)?[^\/]*/)[0];
      
break;
case 26:
 // t: ShExParser-test.js/with pre-defined prefixes
        if (!Parser.prefixes) Parser.prefixes = {};
        $$[$0-1] = $$[$0-1].substr(0, $$[$0-1].length - 1);
        $$[$0] = resolveIRI($$[$0]);
        Parser.prefixes[$$[$0-1]] = $$[$0];
      
break;
case 27:

        if (Parser.start)
	  error("Parse error: start alread defined as " + Parser.start);
        Parser.start = $$[$0]; // t: startInline
      
break;
case 29:
 // t: startInline / startInline
        addShape(this.$ = blank(), extend($$[$0-1], $$[$0]));
    
break;
case 30:
 // t: 1dot
	addShape($$[$0-2], extend($$[$0-1], $$[$0]));
    
break;
case 31:
 // t: 1dotVirtual
        // sneak 'virtual' in after 'type'
        // Type will be overwritten.
        addShape($$[$0-2], extend({type: null, virtual: true}, $$[$0-1], $$[$0])) // $$[$0]: t: 1dotVirtualShapeCode1
    
break;
case 32:
 // t: 1dotInherit3
	var exprObj = $$[$0-1] ? { expression: $$[$0-1] } : {}; // t: 0, 0Inherit1
        this.$ = extend({ type: "shape"}, exprObj, $$[$0-3]);
      
break;
case 33:
this.$ = [ 'inherit', $$[$0] ] // t: 1dotInherit1;
break;
case 34:
this.$ = [ 'extra', $$[$0] ] // t: 1dotExtra1, 3groupdot3Extra, 3groupdotExtra3;
break;
case 35:
this.$ = [ 'closed', true ] // t: 1dotClosed;
break;
case 36:
this.$ = {};
break;
case 37:

      if ($$[$0][0] === 'closed')
        $$[$0-1]['closed'] = true; // t: 1dotClosed
      else if ($$[$0][0] in $$[$0-1])
        $$[$0-1][$$[$0][0]] = unionAll($$[$0-1][$$[$0][0]], $$[$0][1]); // t: 1dotInherit3, 3groupdot3Extra, 3groupdotExtra3
      else
        $$[$0-1][$$[$0][0]] = $$[$0][1]; // t: 1dotInherit1
      this.$ = $$[$0-1];
    
break;
case 40:
this.$ = $$[$0] // t: 1dotInherit1, 1dot3Inherit, 1dotInherit3;
break;
case 41:
this.$ = [$$[$0]] // t: 1dotInherit1, 1dot3Inherit, 1dotInherit3;
break;
case 42:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1dotInherit3;
break;
case 43:
this.$ = $$[$0] // t: 1dotExtra1, 3groupdot3Extra;
break;
case 44:
this.$ = [$$[$0]] // t: 1dotExtra1, 3groupdot3Extra, 3groupdotExtra3;
break;
case 45:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 3groupdotExtra3;
break;
case 48:
this.$ = { type: "someOf", expressions: unionAll([$$[$0-1]], $$[$0]) } // t: 2someOfdot;
break;
case 49:
this.$ = $$[$0] // t: 2someOfdot;
break;
case 50:
this.$ = [$$[$0]] // t: 2someOfdot;
break;
case 51:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 2someOfdot;
break;
case 54:
this.$ = $$[$0] ? { type: "group", expressions: unionAll([$$[$0-1]], $$[$0]) } : $$[$0-1] // t: 2groupOfdot;
break;
case 55: case 56:
this.$ = null;
break;
case 57:
this.$ = $$[$0-1];
break;
case 60:
this.$ = { type: "group", expressions: unionAll([$$[$0-2]], $$[$0-1]) } // t: 2groupOfdot;
break;
case 61:
this.$ = $$[$0] // t: 2groupOfdot;
break;
case 62:
this.$ = [$$[$0]] // t: 2groupOfdot;
break;
case 63:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 2groupOfdot;
break;
case 67:

        // t: open1dotOr1dot, !openopen1dotcloseCode1closeCode2
        this.$ = $$[$0-4];
        // Copy all of the new attributes into the encapsulated shape.
        if ("min" in $$[$0-2]) { this.$.min = $$[$0-2].min; } // t: open3groupdotclosecard23Annot3Code2
        if ("max" in $$[$0-2]) { this.$.max = $$[$0-2].max; } // t: open3groupdotclosecard23Annot3Code2
        if ($$[$0-1].length) { this.$.annotations = $$[$0-1]; } // t: open3groupdotcloseAnnot3, open3groupdotclosecard23Annot3Code2
        if ($$[$0]) { this.$.semActs = "semActs" in $$[$0-4] ? $$[$0-4].semActs.concat($$[$0].semActs) : $$[$0].semActs; } // t: open3groupdotcloseCode1, !open1dotOr1dot
      
break;
case 68:
this.$ = {} // t: 1dot;
break;
case 70:
this.$ = [] // t: 1dot, 1dotAnnot3;
break;
case 71:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1dotAnnot3;
break;
case 72:
this.$ = { type: "inclusion", "include": $$[$0] } // t: 2groupInclude1;
break;
case 75:

        // $$[$0]: t: 1dotCode1
        this.$ = extend({ type: "tripleConstraint", predicate: $$[$0-4]}, $$[$0-3], $$[$0-2], $$[$0]); // t: 1dot
        if ($$[$0-1].length)
          this.$['annotations'] = $$[$0-1]; // t: 1dotAnnot3
      
break;
case 76:

        // %6: t: 1inversedotCode1
        this.$ = extend({ type: "tripleConstraint" }, $$[$0-5], { predicate: $$[$0-4] }, $$[$0-3], $$[$0-2], $$[$0]); // t: 1inversedot, 1negatedinversedot
        if ($$[$0-1].length)
          this.$['annotations'] = $$[$0-1]; // t: 1inversedotAnnot3
      
break;
case 77:
this.$ = { inverse: true } // t: 1inversedot;
break;
case 78:
this.$ = { inverse: true, negated: true } // t: 1negatedinversedot;
break;
case 79:
this.$ = { negated: true } // t: 1negateddot;
break;
case 80:
this.$ = { inverse: true, negated: true } // t: 1inversenegateddot;
break;
case 82:
this.$ = RDF_TYPE // t: 1AvalA;
break;
case 84:
this.$ = extend({ negated: true}, $$[$0]);
break;
case 85:
this.$ = { value: $$[$0] } // t: 1dot;
break;
case 86:
this.$ = { value: { type: "vcref", valueClassRef: $$[$0] } } // t: 1val1vsMinusiri3;
break;
case 87:
this.$ = extend({ type: "valueClass", nodeKind: "literal" }, $$[$0]) // t: 1literalPattern;
break;
case 88:
this.$ = { type: "valueClass", nodeKind: $$[$0] } // t: 1iriPattern;
break;
case 89:
this.$ = extend({ type: "valueClass", nodeKind: $$[$0-1] }, $$[$0]) // t: 1iriPattern;
break;
case 90:
this.$ = { type: "valueClass", nodeKind: $$[$0-1], reference: $$[$0] } // t: 1iriRef1;
break;
case 91:
this.$ = extend({ type: "valueClass", nodeKind: $$[$0-2], reference: $$[$0-1] }, $$[$0]) // t: 1iriRefLength1;
break;
case 92:

        if (numericDatatypes.indexOf($$[$0-1]) === -1)
          numericFacets.forEach(function (facet) {
            if (facet in $$[$0])
	      error("Parse error: facet "+facet+" not allowed for unknown datatype " + $$[$0-1]);
	  });
        this.$ = extend({ type: "valueClass", datatype: $$[$0-1] }, $$[$0]) // t: 1datatype
      
break;
case 93:
this.$ = { type: "valueClass", reference: $$[$0] } // t: 1dotRef1;
break;
case 94:
this.$ = { type: "valueClass", values: $$[$0] } // t: 1val1IRIREF;
break;
case 95:
this.$ = { type: "valueClass" } // t: 1dot;
break;
case 96:
this.$ = {} // t: 1literalPattern;
break;
case 97:

        if (Object.keys($$[$0-1]).indexOf(Object.keys($$[$0])[0]) !== -1) {
          error("Parse error: facet "+Object.keys($$[$0])[0]+" defined multiple times");
        }
        this.$ = extend($$[$0-1], $$[$0]) // t: 1literalLength
      
break;
case 98:
this.$ = 'iri' // t: 1iriPattern;
break;
case 99:
this.$ = 'bnode' // t: 1bnodeLength;
break;
case 100:
this.$ = 'nonliteral' // t: 1nonliteralLength;
break;
case 102:

        if (Object.keys($$[$0-1]).indexOf(Object.keys($$[$0])[0]) !== -1) {
          error("Parse error: facet "+Object.keys($$[$0])[0]+" defined multiple times");
        }
        this.$ = extend($$[$0-1], $$[$0])
      
break;
case 103:
this.$ = $$[$0].length ? { type: "or", disjuncts: unionAll([$$[$0-1]], $$[$0]) } : $$[$0-1] // t: 1dotRefOr3/1dotRef1;
break;
case 104:
this.$ = $$[$0] // t: 1dotRefOr3;
break;
case 105:
this.$ = [] // t: 1dotRefOr3;
break;
case 106:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1dotRefOr3;
break;
case 107:
 // t: 1dotRefLNex
        $$[$0] = $$[$0].substr(1, $$[$0].length-1);
        var namePos = $$[$0].indexOf(':');
        this.$ = resolveIRI(expandPrefix($$[$0].substr(0, namePos)) + $$[$0].substr(namePos + 1));
      
break;
case 108:
 // t: 1dotRefNS1
        $$[$0] = $$[$0].substr(1, $$[$0].length-1);
        this.$ = resolveIRI(expandPrefix($$[$0].substr(0, $$[$0].length - 1)));
      
break;
case 109:
 this.$ = $$[$0]; 
break;
case 110:
 // t: 1dotInline1
        addShape(this.$ = blank(), $$[$0]);
      
break;
case 113:
this.$ = keyValObject($$[$0-1], parseInt($$[$0], 10)) // t: 1literalLength;
break;
case 114: case 115:
this.$ = { pattern: $$[$0].substr(1, $$[$0].length-2) } // t: 1literalPattern;
break;
case 116:
this.$ = "length" // t: 1literalLength;
break;
case 117:
this.$ = "minlength" // t: 1literalMinlength;
break;
case 118:
this.$ = "maxlength" // t: 1literalMaxlength;
break;
case 119:
this.$ = keyValObject($$[$0-1], $$[$0]) // t: 1literalMininclusive;
break;
case 120:
this.$ = keyValObject($$[$0-1], parseInt($$[$0], 10)) // t: 1literalTotaldigits;
break;
case 121:
this.$ = parseInt($$[$0], 10);;
break;
case 122: case 123:
this.$ = parseFloat($$[$0]);;
break;
case 124:
this.$ = "mininclusive" // t: 1literalMininclusive;
break;
case 125:
this.$ = "minexclusive" // t: 1literalMinexclusive;
break;
case 126:
this.$ = "maxinclusive" // t: 1literalMaxinclusive;
break;
case 127:
this.$ = "maxexclusive" // t: 1literalMaxexclusive;
break;
case 128:
this.$ = "totaldigits" // t: 1literalTotaldigits;
break;
case 129:
this.$ = "fractiondigits" // t: 1literalFractiondigits;
break;
case 131:
this.$ = [$$[$0-1], $$[$0]] // t: 1dotAnnotIRIREF;
break;
case 134:
this.$ = { min:0, max:"*" } // t: 1cardStar;
break;
case 135:
this.$ = { min:1, max:"*" } // t: 1cardPlus;
break;
case 136:
this.$ = { min:0, max:1 } // t: 1cardOpt;
break;
case 137:

        $$[$0] = $$[$0].substr(1, $$[$0].length-2);
        var nums = $$[$0].match(/(\d+)/g);
        this.$ = { min: parseInt(nums[0], 10) }; // t: 1card2blank, 1card2Star
        if (nums.length === 2)
            this.$["max"] = parseInt(nums[1], 10); // t: 1card23
        else if ($$[$0].indexOf(',') === -1) // t: 1card2
            this.$["max"] = parseInt(nums[0], 10);
        else
            this.$["max"] = "*";
      
break;
case 138:
this.$ = $$[$0-1] // t: 1val1IRIREF;
break;
case 139:
this.$ = [] // t: 1val1IRIREF;
break;
case 140:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1val1IRIREF;
break;
case 143:

        if ($$[$0]) {
          this.$ = {  // t: 1val1iriStem, 1val1iriStemMinusiri3
            type: "stemRange",
            stem: $$[$0-1]
          };
          if ($$[$0].length)
            this.$["exclusions"] = $$[$0]; // t: 1val1iriStemMinusiri3
        } else {
          this.$ = $$[$0-1]; // t: 1val1IRIREF, 1AvalA
        }
      
break;
case 144:
this.$ = { type: "stemRange", stem: { type: "wildcard" }, exclusions: $$[$0] } // t:1val1dotMinusiri3, 1val1dotMinusiriStem3;
break;
case 145:
this.$ = [] // t: 1val1iriStem, 1val1iriStemMinusiri3;
break;
case 146:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1val1iriStemMinusiri3;
break;
case 147: case 152:
this.$ = $$[$0] // t: 1val1iriStemMinusiri3;
break;
case 150:
this.$ = [$$[$0]] // t:1val1dotMinusiri3, 1val1dotMinusiriStem3;
break;
case 151:
this.$ = appendTo($$[$0-1], $$[$0]) // t:1val1dotMinusiri3, 1val1dotMinusiriStem3;
break;
case 153:
this.$ = { type: "stem", stem: $$[$0-1] } // t: 1val1iriStemMinusiriStem3;
break;
case 155:
this.$ = $$[$0-1] + lowercase($$[$0]) // t: 1val1LANGTAG;
break;
case 156:
this.$ = $$[$0-2] + '^^' + $$[$0] // t: 1val1Datatype;
break;
case 158:
this.$ = XSD_TRUE // t: 1val1true;
break;
case 159:
this.$ = XSD_FALSE // t: 1val1false;
break;
case 160:
this.$ = createLiteral($$[$0], XSD_INTEGER) // t: 1val1INTEGER;
break;
case 161:
this.$ = createLiteral($$[$0], XSD_DECIMAL) // t: 1val1DECIMAL;
break;
case 162:
this.$ = createLiteral($$[$0].toLowerCase(), XSD_DOUBLE) // t: 1val1DOUBLE;
break;
case 163:
this.$ = unescapeString($$[$0], 1) // t: 1val1STRING_LITERAL1;
break;
case 164:
this.$ = unescapeString($$[$0], 1) // t: 1val1STRING_LITERAL2;
break;
case 165:
this.$ = unescapeString($$[$0], 3) // t: 1val1STRING_LITERAL_LONG1;
break;
case 166:
this.$ = unescapeString($$[$0], 3) // t: 1val1STRING_LITERAL_LONG2;
break;
case 167:
this.$ = resolveIRI(unescape($$[$0], irirefEscapeSequence)) // t: 1dot;
break;
case 168:
 // t:1dotPNex, 1dotPNdefault, ShExParser-test.js/with pre-defined prefixes
        var namePos = $$[$0].indexOf(':');
        this.$ = resolveIRI(expandPrefix($$[$0].substr(0, namePos)) + $$[$0].substr(namePos + 1));
    
break;
case 169:
 // t: 1dotNS2, 1dotNSdefault, ShExParser-test.js/PNAME_NS with pre-defined prefixes
        this.$ = resolveIRI(expandPrefix($$[$0].substr(0, $$[$0].length - 1)));
    
break;
case 171:
this.$ = unescapeSemanticAction('', $$[$0]) // t: 1dotUnlabeledCode1;
break;
case 172:
this.$ = unescapeSemanticAction($$[$0-1], $$[$0]) // t: 1dotCode1;
break;
case 173:

        Parser.startActs = $$[$0]; // t: startCode1
      
break;
case 174:
this.$ = [$$[$0]] // t: startCode1;
break;
case 175:
this.$ = appendTo($$[$0-1], $$[$0]) // t: startCode3;
break;
case 176:
this.$ = $$[$0].length ? { semActs: $$[$0] } : null; // t: 1dotCode1/2oneOfDot;
break;
case 177:
this.$ = [] // t: 1dot, 1dotCode1;
break;
case 178:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1dotCode1;
break;
}
},
table: [o($V0,[2,2],{3:1,4:2}),{1:[3]},{5:3,6:[2,9],7:4,8:8,9:11,10:12,13:5,14:13,15:14,16:15,17:6,18:7,19:20,29:$V1,30:22,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,37:18,39:$V7,75:23,147:$V8,148:$V9,149:21,150:$Va,152:16},{6:[1,30]},o($V0,[2,3]),{6:[2,10]},o($V0,[2,16]),o($V0,[2,17]),o($Vb,[2,6],{11:31}),{32:[1,32]},{34:[1,33]},o($Vb,[2,4]),o($Vb,[2,5]),o($Vb,[2,13]),o($Vb,[2,14]),o($Vb,[2,15]),o($Vb,[2,173],{149:34,150:$Va}),{20:[1,35]},o($Vc,$Vd,{38:36,40:37}),{30:22,32:$V3,34:$V5,37:38,75:23,147:$V8,148:$V9},{20:[1,39],24:[1,40]},o($V0,[2,174]),o($Ve,[2,73]),o($Ve,[2,74]),{30:41,32:$V3,34:$V5,147:$V8},{30:43,32:$V3,34:$V5,147:$V8,151:[1,42]},o($Vf,[2,167]),o($Vf,[2,168]),o($Vf,[2,169]),o($Ve,[2,170]),{1:[2,1]},{6:[2,8],7:45,9:46,12:44,14:13,15:14,16:15,17:6,18:7,19:20,29:$V1,30:22,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,37:18,39:$V7,75:23,147:$V8,148:$V9},o($V0,[2,25]),{32:[1,47]},o($V0,[2,175]),o($Vc,$Vd,{30:22,75:23,40:37,36:48,37:49,38:50,32:$V3,34:$V5,147:$V8,148:$V9}),o($V0,$Vg,{23:51,153:52}),{41:[1,53],44:54,45:55,46:56,47:[1,57],49:[1,58],51:[1,59]},o($Vc,$Vd,{40:37,38:60}),o($Vc,$Vd,{40:37,21:61,25:62,80:63,81:65,19:66,84:68,87:69,86:70,88:71,30:76,95:77,38:82,29:$V1,32:$V3,34:$V5,70:$Vh,78:$Vi,82:$Vj,89:$Vk,91:$Vl,92:$Vm,93:$Vn,99:$Vo,100:$Vp,101:$Vq,147:$V8}),o($Vb,[2,19]),o([6,20,24,28,29,31,32,33,34,35,39,43,58,63,71,122,125,126,127,128,147,148,150],[2,24]),o($Vr,[2,171]),{151:[1,83]},o($Vb,[2,7]),o($Vb,[2,11]),o($Vb,[2,12]),o($V0,[2,26]),o($Vb,[2,27]),o($Vb,[2,28]),o($V0,$Vg,{153:52,23:84}),o($Vb,[2,30]),o([6,29,31,32,33,34,35,39,43,58,63,71,147,148],[2,176],{149:85,150:$Va}),{30:98,32:$V3,34:$V5,42:86,43:[2,38],48:87,49:$Vs,53:94,54:88,55:89,61:90,67:91,68:92,69:93,70:$Vt,76:95,77:$Vu,78:$Vv,79:$Vw,147:$V8},o($Vc,[2,37]),o($Vc,[2,33]),o($Vc,[2,34]),o($Vc,[2,35]),{30:22,32:$V3,34:$V5,37:103,50:102,75:23,147:$V8,148:$V9},{30:98,32:$V3,34:$V5,52:104,53:105,79:$Vw,147:$V8},o($V0,$Vg,{153:52,23:106}),o([6,29,31,32,33,34,35,39,122,147,148,150],$Vx,{22:107}),o($Vy,[2,22],{26:108}),o($Vy,[2,83]),o($Vc,$Vd,{40:37,81:65,19:66,84:68,87:69,86:70,88:71,30:76,95:77,38:82,80:109,29:$V1,32:$V3,34:$V5,70:$Vh,82:$Vj,89:$Vk,91:$Vl,92:$Vm,93:$Vn,99:$Vo,100:$Vp,101:$Vq,147:$V8}),o($Vy,[2,85]),o($Vy,[2,86]),o($Vz,$VA,{83:110}),o($Vy,[2,88],{40:37,95:77,38:82,85:111,86:112,94:113,103:114,41:$Vd,47:$Vd,49:$Vd,51:$Vd,99:$Vo,100:$Vp,101:$Vq,105:$VB,107:$VC,108:$VD,109:$VE,110:$VF}),o($Vz,$VA,{83:120}),o($Vy,[2,93]),o($Vy,[2,94]),o($Vy,[2,95]),o($VG,[2,98]),o($VG,[2,99]),o($VG,[2,100]),o([6,28,29,31,32,33,34,35,39,43,58,63,71,89,104,105,107,108,109,110,114,115,116,117,118,119,120,121,122,125,126,127,128,141,142,143,144,145,146,147,148,150],[2,130]),o($VH,[2,105],{96:121}),o($VI,[2,139],{129:122}),o($VH,[2,107]),o($VH,[2,108]),{30:22,32:$V3,34:$V5,37:123,75:23,147:$V8,148:$V9},o($VH,[2,110]),o($Vr,[2,172]),o($Vb,[2,29]),o($Vr,[2,178]),{43:[1,124]},{43:[2,39]},{43:[2,46],56:125,57:126,58:$VJ},{43:[2,47]},o($VK,$VL,{62:128,64:130,66:131,63:$VM}),o($VN,[2,64]),o($VN,[2,65]),o($VN,[2,66]),o($Vc,$Vd,{40:37,25:62,80:63,81:65,19:66,84:68,87:69,86:70,88:71,30:76,95:77,38:82,21:132,29:$V1,32:$V3,34:$V5,70:$Vh,78:$Vi,82:$Vj,89:$Vk,91:$Vl,92:$Vm,93:$Vn,99:$Vo,100:$Vp,101:$Vq,147:$V8}),{30:98,32:$V3,34:$V5,53:133,79:$Vw,147:$V8},{30:22,32:$V3,34:$V5,37:134,75:23,147:$V8,148:$V9},{30:98,32:$V3,34:$V5,49:$Vs,53:94,54:139,55:137,59:135,60:136,61:138,67:91,68:92,69:93,70:$Vt,76:95,77:$Vu,78:$Vv,79:$Vw,147:$V8},o($VO,[2,81]),o($VO,[2,82]),o($VP,[2,77],{78:[1,140]}),o($VP,[2,79],{77:[1,141]}),o($Vc,[2,40],{30:22,75:23,37:142,32:$V3,34:$V5,147:$V8,148:$V9}),o($VQ,[2,41]),o($Vc,[2,43],{30:98,53:143,32:$V3,34:$V5,79:$Vw,147:$V8}),o($VR,[2,44]),o($Vb,[2,31]),o($V0,$Vg,{153:52,23:144,74:145,122:$VS}),o([6,29,31,32,33,34,35,39,43,58,63,71,122,125,126,127,128,147,148,150],[2,20],{27:147,28:[1,148]}),o($Vy,[2,84]),o($Vy,[2,87],{103:114,90:149,94:150,102:151,111:152,113:153,105:$VB,107:$VC,108:$VD,109:$VE,110:$VF,116:$VT,117:$VU,118:$VV,119:$VW,120:$VX,121:$VY}),o($Vy,[2,89],{103:114,94:160,105:$VB,107:$VC,108:$VD,109:$VE,110:$VF}),o($Vy,[2,90],{94:113,103:114,85:161,105:$VB,107:$VC,108:$VD,109:$VE,110:$VF}),o($VZ,[2,101]),{104:[1,162]},{106:163,143:$V_,144:$V$,145:$V01,146:$V11},{106:168,143:$V_,144:$V$,145:$V01,146:$V11},{104:[2,116]},{104:[2,117]},{104:[2,118]},o($Vy,[2,92],{103:114,90:149,94:150,102:151,111:152,113:153,105:$VB,107:$VC,108:$VD,109:$VE,110:$VF,116:$VT,117:$VU,118:$VV,119:$VW,120:$VX,121:$VY}),o($VZ,[2,103],{97:169,98:[1,170]}),{30:175,32:$V3,34:$V5,71:[1,171],89:[1,176],104:$V21,106:177,114:$V31,115:$V41,124:174,130:172,131:173,140:178,141:$V51,142:$V61,143:$V_,144:$V$,145:$V01,146:$V11,147:$V8},o($VH,[2,109]),o($VH,[2,32]),o([43,71],[2,48],{57:184,58:$VJ}),o($VK,[2,50]),{30:98,32:$V3,34:$V5,49:$Vs,53:94,54:185,61:90,67:91,68:92,69:93,70:$Vt,76:95,77:$Vu,78:$Vv,79:$Vw,147:$V8},o($VK,[2,54]),o($VK,[2,56],{67:91,68:92,69:93,53:94,76:95,30:98,61:186,32:$V3,34:$V5,49:$Vs,70:$Vt,77:$Vu,78:$Vv,79:$Vw,147:$V8}),o($VK,$V71,{65:187,66:188,63:$V81}),o($VN,[2,62]),o($V91,$Va1,{72:190,73:191,125:$Vb1,126:$Vc1,127:$Vd1,128:$Ve1}),o($Vc,$Vd,{40:37,25:62,80:63,81:65,19:66,84:68,87:69,86:70,88:71,30:76,95:77,38:82,21:196,29:$V1,32:$V3,34:$V5,70:$Vh,78:$Vi,82:$Vj,89:$Vk,91:$Vl,92:$Vm,93:$Vn,99:$Vo,100:$Vp,101:$Vq,147:$V8}),o($VN,[2,72]),{71:[1,197]},{71:[2,52]},{71:[2,53]},{58:$VL,62:128,63:$VM,64:198,66:131},{56:125,57:126,58:$VJ},o($VP,[2,78]),o($VP,[2,80]),o($VQ,[2,42]),o($VR,[2,45]),o($Vb,[2,18]),o($Vf1,[2,71]),{30:98,32:$V3,34:$V5,53:199,79:$Vw,147:$V8},o($Vy,[2,23]),o($Vc,$Vd,{40:37,80:63,81:65,19:66,84:68,87:69,86:70,88:71,30:76,95:77,38:82,25:200,29:$V1,32:$V3,34:$V5,70:$Vh,78:$Vi,82:$Vj,89:$Vk,91:$Vl,92:$Vm,93:$Vn,99:$Vo,100:$Vp,101:$Vq,147:$V8}),o($Vz,[2,97]),o($Vz,[2,111]),o($Vz,[2,112]),{104:[1,202],112:201,114:[1,203],115:[1,204]},{104:[1,205]},o($Vg1,[2,124]),o($Vg1,[2,125]),o($Vg1,[2,126]),o($Vg1,[2,127]),{104:[2,128]},{104:[2,129]},o($VZ,[2,102]),o($Vy,[2,91],{103:114,94:160,105:$VB,107:$VC,108:$VD,109:$VE,110:$VF}),o($Vz,[2,113]),o($Vz,[2,114]),o($Vh1,[2,163]),o($Vh1,[2,164]),o($Vh1,[2,165]),o($Vh1,[2,166]),o($Vz,[2,115]),o($VH,[2,106]),o($Vc,$Vd,{40:37,38:82,95:206,99:$Vo,100:$Vp,101:$Vq}),o($Vy,[2,138]),o($VI,[2,140]),o($VI,[2,141]),o($VI,[2,142]),o($VI,[2,148],{132:207,136:208,107:[1,209]}),{133:210,135:211,137:$Vi1},o($Vj1,[2,154],{138:[1,213],139:[1,214]}),o($Vj1,[2,157]),o($Vj1,[2,158]),o($Vj1,[2,159]),o($Vj1,[2,160]),o($Vj1,[2,161]),o($Vj1,[2,162]),o($VK,[2,51]),o($VK,[2,49]),o($VN,[2,61]),o($VK,$Vk1),o($VN,[2,63]),o($VK,[2,59],{67:91,68:92,69:93,53:94,76:95,30:98,61:186,32:$V3,34:$V5,49:$Vs,70:$Vt,77:$Vu,78:$Vv,79:$Vw,147:$V8}),o($V91,$Vx,{22:215}),o($V91,[2,69]),o($V91,[2,134]),o($V91,[2,135]),o($V91,[2,136]),o($V91,[2,137]),o($V91,$Va1,{73:191,72:216,125:$Vb1,126:$Vc1,127:$Vd1,128:$Ve1}),o($V91,$Va1,{73:191,72:217,125:$Vb1,126:$Vc1,127:$Vd1,128:$Ve1}),o([58,71],$V71,{66:188,65:218,63:$V81}),{30:220,32:$V3,34:$V5,104:$V21,106:177,114:$V31,115:$V41,123:219,124:221,140:178,141:$V51,142:$V61,143:$V_,144:$V$,145:$V01,146:$V11,147:$V8},o($Vy,[2,21]),o($Vz,[2,119]),o($Vz,[2,121]),o($Vz,[2,122]),o($Vz,[2,123]),o($Vz,[2,120]),o($VH,[2,104]),o($VI,[2,143]),o($VI,[2,149]),o($Vl1,[2,145],{134:222}),o($VI,[2,144],{135:223,137:$Vi1}),o($Vl1,[2,150]),{30:224,32:$V3,34:$V5,147:$V8},o($Vj1,[2,155]),{30:76,32:$V3,34:$V5,87:225,147:$V8},o($Vm1,$Vg,{153:52,74:145,23:226,122:$VS}),o($V91,$Vx,{22:227}),o($V91,$Vx,{22:228}),{58:$Vk1,71:[2,60]},o($Vf1,[2,131]),o($Vf1,[2,132]),o($Vf1,[2,133]),o($VI,[2,147],{135:229,137:$Vi1}),o($Vl1,[2,151]),o($Vl1,[2,152],{107:[1,230]}),o($Vj1,[2,156]),o($VN,[2,75]),o($Vm1,$Vg,{153:52,74:145,23:231,122:$VS}),o($Vm1,$Vg,{153:52,74:145,23:232,122:$VS}),o($Vl1,[2,146]),o($Vl1,[2,153]),o($VN,[2,76]),o($VN,[2,67])],
defaultActions: {5:[2,10],30:[2,1],87:[2,39],89:[2,47],117:[2,116],118:[2,117],119:[2,118],136:[2,52],137:[2,53],158:[2,128],159:[2,129]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  /*
    SPARQL parser in the Jison parser generator format.
  */

  // Common namespaces and entities
  var RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
      RDF_TYPE  = RDF + 'type',
      RDF_FIRST = RDF + 'first',
      RDF_REST  = RDF + 'rest',
      RDF_NIL   = RDF + 'nil',
      XSD = 'http://www.w3.org/2001/XMLSchema#',
      XSD_INTEGER  = XSD + 'integer',
      XSD_DECIMAL  = XSD + 'decimal',
      XSD_DOUBLE   = XSD + 'double',
      XSD_BOOLEAN  = XSD + 'boolean',
      XSD_TRUE =  '"true"^^'  + XSD_BOOLEAN,
      XSD_FALSE = '"false"^^' + XSD_BOOLEAN,
      XSD_PATTERN        = XSD + 'pattern',
      XSD_MININCLUSIVE   = XSD + 'minInclusive',
      XSD_MINEXCLUSIVE   = XSD + 'minExclusive',
      XSD_MAXINCLUSIVE   = XSD + 'maxInclusive',
      XSD_MAXEXCLUSIVE   = XSD + 'maxExclusive',
      XSD_LENGTH         = XSD + 'length',
      XSD_MINLENGTH      = XSD + 'minLength',
      XSD_MAXLENGTH      = XSD + 'maxLength',
      XSD_TOTALDIGITS    = XSD + 'totalDigits',
      XSD_FRACTIONDIGITS = XSD + 'fractionDigits';

  var numericDatatypes = [
      XSD + "integer",
      XSD + "decimal",
      XSD + "float",
      XSD + "double",
      XSD + "string",
      XSD + "boolean",
      XSD + "dateTime",
      XSD + "nonPositiveInteger",
      XSD + "negativeInteger",
      XSD + "long",
      XSD + "int",
      XSD + "short",
      XSD + "byte",
      XSD + "nonNegativeInteger",
      XSD + "unsignedLong",
      XSD + "unsignedInt",
      XSD + "unsignedShort",
      XSD + "unsignedByte",
      XSD + "positiveInteger"
  ];

  var numericFacets = ["mininclusive", "minexclusive",
		       "maxinclusive", "maxexclusive"];

  // Returns a lowercase version of the given string
  function lowercase(string) {
    return string.toLowerCase();
  }

  // Appends the item to the array and returns the array
  function appendTo(array, item) {
    return array.push(item), array;
  }

  // Appends the items to the array and returns the array
  function appendAllTo(array, items) {
    return array.push.apply(array, items), array;
  }

  // Extends a base object with properties of other objects
  function extend(base) {
    if (!base) base = {};
    for (var i = 1, l = arguments.length, arg; i < l && (arg = arguments[i] || {}); i++)
      for (var name in arg)
        base[name] = arg[name];
    return base;
  }

  // Creates an array that contains all items of the given arrays
  function unionAll() {
    var union = [];
    for (var i = 0, l = arguments.length; i < l; i++)
      union = union.concat.apply(union, arguments[i]);
    return union;
  }

  // Resolves an IRI against a base path
  function resolveIRI(iri) {
    // Strip off possible angular brackets
    if (iri[0] === '<')
      iri = iri.substring(1, iri.length - 1);
    switch (iri[0]) {
    // An empty relative IRI indicates the base IRI
    case undefined:
      return Parser.base;
    // Resolve relative fragment IRIs against the base IRI
    case '#':
      return Parser.base + iri;
    // Resolve relative query string IRIs by replacing the query string
    case '?':
      return Parser.base.replace(/(?:\?.*)?$/, iri);
    // Resolve root relative IRIs at the root of the base IRI
    case '/':
      return Parser.baseRoot + iri;
    // Resolve all other IRIs at the base IRI's path
    default:
      return /^[a-z]+:/.test(iri) ? iri : Parser.basePath + iri;
    }
  }

  // Creates an expression with the given type and attributes
  function expression(expr, attr) {
    var expression = { expression: expr };
    if (attr)
      for (var a in attr)
        expression[a] = attr[a];
    return expression;
  }

  // Creates a path with the given type and items
  function path(type, items) {
    return { type: 'path', pathType: type, items: items };
  }

  // Creates a literal with the given value and type
  function createLiteral(value, type) {
    return '"' + value + '"^^' + type;
  }

  // Creates a new blank node identifier
  function blank() {
    return '_:b' + blankId++;
  };
  var blankId = 0;
  Parser._resetBlanks = function () { blankId = 0; }
  Parser.reset = function () {
    Parser.prefixes = Parser.valueClasses = Parser.shapes = Parser.start = Parser.startActs = null; // Reset state.
    Parser.base = Parser.basePath = Parser.baseRoot = '';
  }
  var _fileName; // for debugging
  Parser._setFileName = function (fn) { _fileName = fn; }

  // Regular expression and replacement strings to escape strings
  var stringEscapeSequence = /\\u([a-fA-F0-9]{4})|\\U([a-fA-F0-9]{8})|\\(.)/g,
      irirefEscapeSequence = /\\u([a-fA-F0-9]{4})|\\U([a-fA-F0-9]{8})/g,
      stringEscapeReplacements = { '\\': '\\', "'": "'", '"': '"',
                             't': '\t', 'b': '\b', 'n': '\n', 'r': '\r', 'f': '\f' },
      semactEscapeReplacements = { '\\': '\\', '%': '%' },
      fromCharCode = String.fromCharCode;

  function unescape(string, regex, replacements) {
    try {
      string = string.replace(regex, function (sequence, unicode4, unicode8, escapedChar) {
        var charCode;
        if (unicode4) {
          charCode = parseInt(unicode4, 16);
          if (isNaN(charCode)) throw new Error(); // can never happen (regex), but helps performance
          return fromCharCode(charCode);
        }
        else if (unicode8) {
          charCode = parseInt(unicode8, 16);
          if (isNaN(charCode)) throw new Error(); // can never happen (regex), but helps performance
          if (charCode < 0xFFFF) return fromCharCode(charCode);
          return fromCharCode(0xD800 + ((charCode -= 0x10000) >> 10), 0xDC00 + (charCode & 0x3FF));
        }
        else {
          var replacement = replacements[escapedChar];
          if (!replacement) throw new Error();
          return replacement;
        }
      });
      return string;
    }
    catch (error) { return ''; }
  };

  // Translates string escape codes in the string into their textual equivalent
  function unescapeString(string, trimLength) {
    string = string.substring(trimLength, string.length - trimLength);
    return '"' + unescape(string, stringEscapeSequence, stringEscapeReplacements) + '"';
  }

  // Convenience function to return object with p1 key, value p2
  function keyValObject(key, val) {
    var ret = {};
    ret[key] = val;
    return ret;
  }

  // Return object with p1 key, p2 string value
  function unescapeSemanticAction(key, string) {
    string = string.substring(1, string.length - 2);
    return {
      type: "semAct",
      name: key,
      code: unescape(string, stringEscapeSequence, semactEscapeReplacements)
    };
  }

  function error (msg) {
    Parser.prefixes = Parser.valueClasses = Parser.shapes = Parser.start = Parser.startActs = null; // Reset state.
    Parser.base = Parser.basePath = Parser.baseRoot = '';
    throw new Error(msg);
  }

  // Expand declared prefix or throw Error
  function expandPrefix (prefix) {
    if (!(prefix in Parser.prefixes))
      error('Parse error; unknown prefix: ' + prefix);
    return Parser.prefixes[prefix];
  }

  // Add a shape to the map
  function addShape (label, shape) {
    if (!Parser.shapes)
      Parser.shapes = {};
    else if (label in Parser.shapes)
      error("Parse error: "+label+" alread defined");
    Parser.shapes[label] = shape;
  }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/**/
break;
case 1:return 99;
break;
case 2:return 100;
break;
case 3:return 138;
break;
case 4:return 101;
break;
case 5:return 147;
break;
case 6:return 128;
break;
case 7:return 115;
break;
case 8:return 114;
break;
case 9:return 104;
break;
case 10:return 'ANON';
break;
case 11:return 32;
break;
case 12:return 34;
break;
case 13:return 79;
break;
case 14:return 148;
break;
case 15:return 151;
break;
case 16:return 145;
break;
case 17:return 'NON_TERMINATED_STRING_LITERAL_LONG2';
break;
case 18:return 146;
break;
case 19:return 'NON_TERMINATED_STRING_LITERAL_LONG2';
break;
case 20:return 143;
break;
case 21:return 144;
break;
case 22:return 31;
break;
case 23:return 33;
break;
case 24:return 35;
break;
case 25:return 39;
break;
case 26:return 47;
break;
case 27:return 51;
break;
case 28:return 82;
break;
case 29:return 92;
break;
case 30:return 91;
break;
case 31:return 93;
break;
case 32:return 105;
break;
case 33:return 28;
break;
case 34:return 98;
break;
case 35:return 116;
break;
case 36:return 117;
break;
case 37:return 118;
break;
case 38:return 119;
break;
case 39:return 108;
break;
case 40:return 109;
break;
case 41:return 110;
break;
case 42:return 120;
break;
case 43:return 121;
break;
case 44:return 20;
break;
case 45:return 41;
break;
case 46:return 43;
break;
case 47:return 49;
break;
case 48:return '||';
break;
case 49:return 58;
break;
case 50:return 63;
break;
case 51:return 70;
break;
case 52:return 71;
break;
case 53:return 29;
break;
case 54:return 78;
break;
case 55:return 139;
break;
case 56:return 77;
break;
case 57:return 89;
break;
case 58:return 107;
break;
case 59:return 122;
break;
case 60:return 125;
break;
case 61:return 126;
break;
case 62:return 127;
break;
case 63:return 137;
break;
case 64:return 150;
break;
case 65:return 141;
break;
case 66:return 142;
break;
case 67:return 6;
break;
case 68:return 'invalid character '+yy_.yytext;
break;
}
},
rules: [/^(?:\s+|((\/\/|#)[^\u000a\u000d]*))/,/^(?:(@((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:)(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|:|[0-9]|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))*(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%)))))?)))/,/^(?:(@(([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:))/,/^(?:(@([A-Za-z])+((-([0-9A-Za-z])+))*))/,/^(?:@)/,/^(?:(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:)(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|:|[0-9]|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))*(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%)))))?)))/,/^(?:(\{((([+-])?([0-9])+))((,(((([+-])?([0-9])+))|\*)?))?\}))/,/^(?:(([+-])?((([0-9])+\.([0-9])*(([Ee]([+-])?([0-9])+)))|((\.)?([0-9])+(([Ee]([+-])?([0-9])+))))))/,/^(?:(([+-])?([0-9])*\.([0-9])+))/,/^(?:(([+-])?([0-9])+))/,/^(?:{ANON})/,/^(?:(<([^\u0000-\u0020<>\"{}|^`\\]|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*>))/,/^(?:((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:))/,/^(?:a\b)/,/^(?:(_:((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|[0-9])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?))/,/^(?:(\{([^%\\]|\\[%\\]|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*%\}))/,/^(?:('''(('|'')?([^\'\\]|(\\[\"\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*'''))/,/^(?:('''))/,/^(?:("""(("|"")?([^\"\\]|(\\[\"\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*"""))/,/^(?:("""))/,/^(?:('([^\u0027\u005c\u000a\u000d]|(\\[\"\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*'))/,/^(?:("([^\u0022\u005c\u000a\u000d]|(\\[\"\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*"))/,/^(?:([Bb][Aa][Ss][Ee]))/,/^(?:([Pp][Rr][Ee][Ff][Ii][Xx]))/,/^(?:([sS][tT][aA][rR][tT]))/,/^(?:([Vv][Ii][Rr][Tt][Uu][Aa][Ll]))/,/^(?:([Cc][Ll][Oo][Ss][Ee][Dd]))/,/^(?:([Ee][Xx][Tt][Rr][Aa]))/,/^(?:([Ll][Ii][Tt][Ee][Rr][Aa][Ll]))/,/^(?:([Bb][Nn][Oo][Dd][Ee]))/,/^(?:([Ii][Rr][Ii]))/,/^(?:([Nn][Oo][Nn][Ll][Ii][Tt][Ee][Rr][Aa][Ll]))/,/^(?:([Pp][Aa][Tt][Tt][Ee][Rr][Nn]))/,/^(?:([Aa][Nn][Dd]))/,/^(?:([Oo][Rr]))/,/^(?:([Mm][Ii][Nn][Ii][Nn][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Mm][Ii][Nn][Ee][Xx][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Mm][Aa][Xx][Ii][Nn][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Mm][Aa][Xx][Ee][Xx][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Ll][Ee][Nn][Gg][Tt][Hh]))/,/^(?:([Mm][Ii][Nn][Ll][Ee][Nn][Gg][Tt][Hh]))/,/^(?:([Mm][Aa][Xx][Ll][Ee][Nn][Gg][Tt][Hh]))/,/^(?:([Tt][Oo][Tt][Aa][Ll][Dd][Ii][Gg][Ii][Tt][Ss]))/,/^(?:([Ff][Rr][Aa][Cc][Tt][Ii][Oo][Nn][Dd][Ii][Gg][Ii][Tt][Ss]))/,/^(?:=)/,/^(?:\{)/,/^(?:\})/,/^(?:&)/,/^(?:\|\|)/,/^(?:\|)/,/^(?:,)/,/^(?:\()/,/^(?:\))/,/^(?:\$)/,/^(?:!)/,/^(?:\^\^)/,/^(?:\^)/,/^(?:\.)/,/^(?:~)/,/^(?:;)/,/^(?:\*)/,/^(?:\+)/,/^(?:\?)/,/^(?:-)/,/^(?:%)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}