/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ShExJison = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[7,18,19,20,21,23,26,34,184,193,194],$V1=[1,11],$V2=[1,26],$V3=[1,12],$V4=[1,28],$V5=[1,13],$V6=[1,19],$V7=[1,21],$V8=[1,25],$V9=[1,27],$Va=[1,29],$Vb=[7,18,19,20,21,23,26,34,193,194],$Vc=[19,21,37,41,66,68,73,74,75,76,87,88,89,92,93,94,95,103,104,105,106,107,108,110,118,121,153,168,180,193],$Vd=[2,28],$Ve=[7,18,19,20,21,23,26,34,37,41,49,52,66,67,68,73,74,75,76,87,88,89,92,93,94,95,103,104,105,106,107,108,110,112,118,121,129,134,135,148,149,150,151,153,168,180,181,184,193,194],$Vf=[7,18,19,20,21,23,26,34,37,41,49,52,66,67,68,73,74,75,76,87,88,89,91,92,93,94,95,99,100,101,103,104,105,106,107,108,110,112,118,121,129,134,135,148,149,150,151,152,153,155,167,168,179,180,181,184,185,186,189,190,191,193,194],$Vg=[110,118,121,180],$Vh=[2,135],$Vi=[1,49],$Vj=[1,53],$Vk=[1,54],$Vl=[1,71],$Vm=[1,72],$Vn=[1,73],$Vo=[1,57],$Vp=[1,63],$Vq=[1,64],$Vr=[1,65],$Vs=[1,75],$Vt=[1,78],$Vu=[1,79],$Vv=[1,80],$Vw=[1,81],$Vx=[1,82],$Vy=[1,83],$Vz=[1,84],$VA=[1,85],$VB=[1,86],$VC=[1,68],$VD=[19,21,66,68,76,87,88,89,92,93,94,95,103,104,105,106,107,108,110,118,121,153,180,193],$VE=[2,35],$VF=[1,90],$VG=[1,93],$VH=[1,91],$VI=[7,18,19,20,21,23,26,34,67,112,129,134,135,148,149,150,151,181,184,193,194],$VJ=[7,18,19,20,21,23,26,34,49,67,112,129,134,135,148,149,150,151,181,184,193,194],$VK=[7,18,19,20,21,23,26,34,49,52,67,112,129,134,135,148,149,150,151,181,184,193,194],$VL=[7,18,19,20,21,23,26,34,49,52,67,73,74,75,110,112,118,121,129,134,135,148,149,150,151,180,181,184,193,194],$VM=[7,18,19,20,21,23,26,34,49,52,67,92,93,94,95,103,104,105,106,107,108,112,129,134,135,148,149,150,151,181,184,193,194],$VN=[2,98],$VO=[7,18,19,20,21,23,26,34,49,52,67,87,88,89,92,93,94,95,112,129,134,135,148,149,150,151,181,184,193,194],$VP=[7,18,19,20,21,23,26,34,49,52,67,73,74,75,92,93,94,95,110,112,118,121,129,134,135,148,149,150,151,180,181,184,193,194],$VQ=[19,21,68,91,99,100,101,155,179,186,189,190,193],$VR=[7,18,19,20,21,23,26,34,49,52,67,103,104,105,106,107,108,112,129,134,135,148,149,150,151,181,184,193,194],$VS=[1,116],$VT=[1,118],$VU=[1,117],$VV=[7,18,19,20,21,23,26,34,49,52,67,73,74,75,92,93,94,95,103,104,105,106,107,108,110,112,118,121,129,134,135,148,149,150,151,180,181,184,193,194],$VW=[91,99,100,101],$VX=[1,141],$VY=[1,142],$VZ=[7,18,19,20,21,23,26,34,49,52,67,87,88,89,92,93,94,95,112,129,134,135,184,193,194],$V_=[1,167],$V$=[1,168],$V01=[1,169],$V11=[1,162],$V21=[1,166],$V31=[1,161],$V41=[1,164],$V51=[1,165],$V61=[1,183],$V71=[2,137],$V81=[1,176],$V91=[1,179],$Va1=[1,187],$Vb1=[1,184],$Vc1=[1,186],$Vd1=[7,18,19,20,21,23,26,34,67,193,194],$Ve1=[2,37],$Vf1=[7,18,19,20,21,23,26,34,49,52,67,193,194],$Vg1=[7,18,19,20,21,23,26,34,49,67,193,194],$Vh1=[1,208],$Vi1=[1,212],$Vj1=[1,213],$Vk1=[7,18,19,20,21,23,26,34,49,52,67,68,87,88,89,91,92,93,94,95,99,100,101,112,129,134,135,155,167,168,179,181,184,186,189,190,193,194],$Vl1=[1,238],$Vm1=[67,112,129],$Vn1=[2,155],$Vo1=[1,240],$Vp1=[1,241],$Vq1=[67,112,129,134,135],$Vr1=[19,21,41,66,68,73,74,75,76,87,88,89,91,92,93,94,95,99,100,101,103,104,105,106,107,108,110,118,121,153,180,186,189,190,191,193],$Vs1=[19,21,110,118,121,180,193,194],$Vt1=[19,21,110,118,121,180,191,193],$Vu1=[7,18,19,20,21,23,26,34,49,52,67,87,88,89,92,93,94,95,193,194],$Vv1=[1,267],$Vw1=[1,269],$Vx1=[1,271],$Vy1=[19,21,68,91,99,100,101,155,168,179,186,189,190,193],$Vz1=[2,159],$VA1=[1,285],$VB1=[1,286],$VC1=[19,21,66,67,112,129,134,135,152,191,193],$VD1=[67,112,129,134,135,181,184],$VE1=[2,174],$VF1=[1,291],$VG1=[1,292],$VH1=[1,293],$VI1=[1,294],$VJ1=[2,158],$VK1=[2,139],$VL1=[67,112,129,134,135,184],$VM1=[2,228],$VN1=[1,315],$VO1=[7,18,19,20,21,23,26,34,49,52,67,87,88,89,92,93,94,95,112,129,134,135,181,184,193,194];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"shexDoc":3,"initParser":4,"Qdirective_E_Star":5,"Q_O_QnotStartAction_E_Or_QstartActions_E_S_Qstatement_E_Star_C_E_Opt":6,"EOF":7,"directive":8,"O_QnotStartAction_E_Or_QstartActions_E_C":9,"notStartAction":10,"startActions":11,"Qstatement_E_Star":12,"statement":13,"O_QnotStartAction_E_Or_QstartActions_E_S_Qstatement_E_Star_C":14,"baseDecl":15,"prefixDecl":16,"importDecl":17,"IT_BASE":18,"IRIREF":19,"IT_PREFIX":20,"PNAME_NS":21,"iri":22,"IT_IMPORT":23,"start":24,"shapeExprDecl":25,"IT_start":26,"=":27,"inlineShapeExpression":28,"QcodeDecl_E_Plus":29,"codeDecl":30,"shapeExprLabel":31,"Qspecialization_E_Star":32,"O_QshapeExpression_E_Or_QIT_EXTERNAL_E_C":33,"IT_ABSTRACT":34,"specialization":35,"shapeExpression":36,"IT_EXTERNAL":37,"QIT_NOT_E_Opt":38,"shapeAtomNoRef":39,"QshapeOr_E_Opt":40,"IT_NOT":41,"shapeRef":42,"shapeOr":43,"inlineShapeOr":44,"Q_O_QIT_OR_E_S_QshapeAnd_E_C_E_Plus":45,"Q_O_QIT_AND_E_S_QshapeNot_E_C_E_Plus":46,"Q_O_QIT_OR_E_S_QshapeAnd_E_C_E_Star":47,"O_QIT_OR_E_S_QshapeAnd_E_C":48,"IT_OR":49,"shapeAnd":50,"O_QIT_AND_E_S_QshapeNot_E_C":51,"IT_AND":52,"shapeNot":53,"inlineShapeAnd":54,"Q_O_QIT_OR_E_S_QinlineShapeAnd_E_C_E_Star":55,"O_QIT_OR_E_S_QinlineShapeAnd_E_C":56,"Q_O_QIT_AND_E_S_QshapeNot_E_C_E_Star":57,"inlineShapeNot":58,"Q_O_QIT_AND_E_S_QinlineShapeNot_E_C_E_Star":59,"O_QIT_AND_E_S_QinlineShapeNot_E_C":60,"shapeAtom":61,"inlineShapeAtom":62,"nonLitNodeConstraint":63,"shapeOrRef":64,"litNodeConstraint":65,"(":66,")":67,".":68,"QnonLitNodeConstraint_E_Opt":69,"shapeDefinition":70,"inlineShapeOrRef":71,"inlineShapeDefinition":72,"ATPNAME_LN":73,"ATPNAME_NS":74,"@":75,"IT_LITERAL":76,"QxsFacet_E_Star":77,"datatype":78,"valueSet":79,"QnumericFacet_E_Plus":80,"xsFacet":81,"nonLiteralKind":82,"QstringFacet_E_Plus":83,"numericFacet":84,"QstringFacet_E_Star":85,"stringFacet":86,"IT_IRI":87,"IT_BNODE":88,"IT_NONLITERAL":89,"stringLength":90,"INTEGER":91,"REGEXP":92,"IT_LENGTH":93,"IT_MINLENGTH":94,"IT_MAXLENGTH":95,"numericRange":96,"rawNumeric":97,"numericLength":98,"DECIMAL":99,"DOUBLE":100,"STRING":101,"^^":102,"IT_MININCLUSIVE":103,"IT_MINEXCLUSIVE":104,"IT_MAXINCLUSIVE":105,"IT_MAXEXCLUSIVE":106,"IT_TOTALDIGITS":107,"IT_FRACTIONDIGITS":108,"Q_O_Qextensions_E_Or_QextraPropertySet_E_Or_QIT_CLOSED_E_C_E_Star":109,"{":110,"QtripleExpression_E_Opt":111,"}":112,"Qannotation_E_Star":113,"semanticActions":114,"O_Qextensions_E_Or_QextraPropertySet_E_Or_QIT_CLOSED_E_C":115,"extensions":116,"extraPropertySet":117,"IT_CLOSED":118,"tripleExpression":119,"annotation":120,"IT_EXTRA":121,"Qpredicate_E_Plus":122,"predicate":123,"oneOfTripleExpr":124,"groupTripleExpr":125,"multiElementOneOf":126,"Q_O_QGT_PIPE_E_S_QgroupTripleExpr_E_C_E_Plus":127,"O_QGT_PIPE_E_S_QgroupTripleExpr_E_C":128,"|":129,"innerTripleExpr":130,"multiElementGroup":131,"unaryTripleExpr":132,"groupTripleExpr_right":133,",":134,";":135,"Q_O_QGT_COMMA_E_S_QunaryTripleExpr_E_C_E_Plus":136,"QGT_COMMA_E_Opt":137,"O_QGT_COMMA_E_S_QunaryTripleExpr_E_C":138,"$":139,"tripleExprLabel":140,"tripleConstraint":141,"bracketedTripleExpr":142,"valueConstraint":143,"include":144,"Qcardinality_E_Opt":145,"cardinality":146,"senseFlags":147,"*":148,"+":149,"?":150,"REPEAT_RANGE":151,"^":152,"[":153,"QvalueSetValue_E_Star":154,"]":155,"valueSetValue":156,"iriRange":157,"literalRange":158,"languageRange":159,"QiriExclusion_E_Plus":160,"QliteralExclusion_E_Plus":161,"QlanguageExclusion_E_Plus":162,"Q_O_Q_TILDE_E_S_QiriExclusion_E_Star_C_E_Opt":163,"QiriExclusion_E_Star":164,"iriExclusion":165,"O_Q_TILDE_E_S_QiriExclusion_E_Star_C":166,"~":167,"-":168,"literal":169,"Q_O_Q_TILDE_E_S_QliteralExclusion_E_Star_C_E_Opt":170,"QliteralExclusion_E_Star":171,"literalExclusion":172,"O_Q_TILDE_E_S_QliteralExclusion_E_Star_C":173,"language":174,"Q_O_Q_TILDE_E_S_QlanguageExclusion_E_Star_C_E_Opt":175,"QlanguageExclusion_E_Star":176,"languageExclusion":177,"O_Q_TILDE_E_S_QlanguageExclusion_E_Star_C":178,"LANGTAG":179,"&":180,"//":181,"O_Qiri_E_Or_Qliteral_E_C":182,"QcodeDecl_E_Star":183,"%":184,"CODE":185,"LANG_STRING":186,"optDT":187,"numericLiteral":188,"IT_true":189,"IT_false":190,"a":191,"blankNode":192,"PNAME_LN":193,"BLANK_NODE_LABEL":194,"QshapeExprLabel_E_Plus":195,"$accept":0,"$end":1},
terminals_: {2:"error",7:"EOF",18:"IT_BASE",19:"IRIREF",20:"IT_PREFIX",21:"PNAME_NS",23:"IT_IMPORT",26:"IT_start",27:"=",34:"IT_ABSTRACT",37:"IT_EXTERNAL",41:"IT_NOT",49:"IT_OR",52:"IT_AND",66:"(",67:")",68:".",73:"ATPNAME_LN",74:"ATPNAME_NS",75:"@",76:"IT_LITERAL",87:"IT_IRI",88:"IT_BNODE",89:"IT_NONLITERAL",91:"INTEGER",92:"REGEXP",93:"IT_LENGTH",94:"IT_MINLENGTH",95:"IT_MAXLENGTH",99:"DECIMAL",100:"DOUBLE",101:"STRING",102:"^^",103:"IT_MININCLUSIVE",104:"IT_MINEXCLUSIVE",105:"IT_MAXINCLUSIVE",106:"IT_MAXEXCLUSIVE",107:"IT_TOTALDIGITS",108:"IT_FRACTIONDIGITS",110:"{",112:"}",118:"IT_CLOSED",121:"IT_EXTRA",129:"|",134:",",135:";",139:"$",143:"valueConstraint",148:"*",149:"+",150:"?",151:"REPEAT_RANGE",152:"^",153:"[",155:"]",167:"~",168:"-",179:"LANGTAG",180:"&",181:"//",184:"%",185:"CODE",186:"LANG_STRING",189:"IT_true",190:"IT_false",191:"a",193:"PNAME_LN",194:"BLANK_NODE_LABEL"},
productions_: [0,[3,4],[4,0],[5,0],[5,2],[9,1],[9,1],[12,0],[12,2],[14,2],[6,0],[6,1],[8,1],[8,1],[8,1],[15,2],[16,3],[17,2],[10,1],[10,1],[24,3],[11,1],[29,1],[29,2],[13,1],[13,1],[25,3],[25,4],[32,0],[32,2],[33,1],[33,1],[36,3],[36,3],[36,2],[38,0],[38,1],[40,0],[40,1],[28,1],[43,1],[43,2],[48,2],[45,1],[45,2],[51,2],[46,1],[46,2],[47,0],[47,2],[44,2],[56,2],[55,0],[55,2],[50,2],[57,0],[57,2],[54,2],[60,2],[59,0],[59,2],[53,1],[53,2],[58,1],[58,2],[61,1],[61,2],[61,1],[61,1],[61,2],[61,3],[61,1],[69,0],[69,1],[39,1],[39,2],[39,1],[39,1],[39,2],[39,3],[39,1],[62,1],[62,2],[62,1],[62,2],[62,3],[62,1],[64,1],[64,1],[71,1],[71,1],[42,1],[42,1],[42,2],[65,2],[65,2],[65,2],[65,1],[77,0],[77,2],[63,1],[63,2],[63,1],[80,1],[80,2],[85,0],[85,2],[83,1],[83,2],[82,1],[82,1],[82,1],[81,1],[81,1],[86,2],[86,1],[90,1],[90,1],[90,1],[84,2],[84,2],[97,1],[97,1],[97,1],[97,3],[96,1],[96,1],[96,1],[96,1],[98,1],[98,1],[70,6],[115,1],[115,1],[115,1],[109,0],[109,2],[111,0],[111,1],[113,0],[113,2],[72,4],[117,2],[122,1],[122,2],[119,1],[124,1],[124,1],[126,2],[128,2],[127,1],[127,2],[130,1],[130,1],[125,2],[133,0],[133,1],[133,1],[133,2],[137,0],[137,1],[137,1],[131,3],[138,2],[138,2],[136,1],[136,2],[132,3],[132,1],[132,3],[132,1],[132,1],[132,1],[142,6],[145,0],[145,1],[141,5],[141,6],[146,1],[146,1],[146,1],[146,1],[147,1],[79,3],[154,0],[154,2],[156,1],[156,1],[156,1],[156,2],[156,2],[156,2],[157,2],[164,0],[164,2],[166,2],[163,0],[163,1],[160,1],[160,2],[165,2],[165,3],[158,2],[171,0],[171,2],[173,2],[170,0],[170,1],[161,1],[161,2],[172,2],[172,3],[159,2],[176,0],[176,2],[178,2],[175,0],[175,1],[162,1],[162,2],[177,2],[177,3],[174,1],[144,2],[120,3],[182,1],[182,1],[114,1],[183,0],[183,2],[30,3],[30,3],[169,1],[169,2],[169,1],[169,1],[169,1],[187,0],[187,2],[123,1],[123,1],[78,1],[31,1],[31,1],[140,1],[140,1],[188,1],[188,1],[188,1],[22,1],[22,1],[22,1],[192,1],[116,2],[35,2],[195,1],[195,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        var valueExprDefns = Parser.valueExprDefns ? { valueExprDefns: Parser.valueExprDefns } : {};
        var startObj = Parser.start ? { start: Parser.start } : {};
        var startActs = Parser.startActs ? { startActs: Parser.startActs } : {};
        var ret = extend({ type: "Schema"},
                         Object.keys(Parser._prefixes).length ? { prefixes: Parser._prefixes } : {}, // Properties ordered here to
                         Object.keys(Parser._imports).length ? { imports: Parser._imports } : {}, // build return object from
                         valueExprDefns, startActs, startObj,                  // components in parser state
                         Parser.shapes ? {shapes: Parser.shapes} : {},         // maintaining intuitve order.
                         Parser.productions ? {productions: Parser.productions} : {});
        if (Parser._base !== null)
          ret.base = Parser._base;
        Parser.reset();
//console.log(JSON.stringify(ret));
        return ret;
      
break;
case 2:
 yy.parser.yy = { lexer: yy.lexer} ; 
break;
case 15:
 // t: @@
        Parser._setBase(Parser._base === null ||
                    absoluteIRI.test($$[$0].slice(1, -1)) ? $$[$0].slice(1, -1) : _resolveIRI($$[$0].slice(1, -1)));
      
break;
case 16:
 // t: ShExParser-test.js/with pre-defined prefixes
        Parser._prefixes[$$[$0-1].slice(0, -1)] = $$[$0];
      
break;
case 17:
 // t: @@
        Parser._imports.push($$[$0]);
      
break;
case 20:

        if (Parser.start)
          error("Parse error: start already defined");
        Parser.start = $$[$0]; // t: startInline
      
break;
case 21:

        Parser.startActs = $$[$0]; // t: startCode1
      
break;
case 22:
this.$ = [$$[$0]] // t: startCode1;
break;
case 23:
this.$ = appendTo($$[$0-1], $$[$0]) // t: startCode3;
break;
case 26:
 // t: 1dot 1val1vsMinusiri3??
        if ($$[$0-1].length > 0) {
          addShape($$[$0-2], Object.assign({type: "ShapeDecl"},
                                     $$[$0-1].length > 0 ? { specializes: $$[$0-1] } : { },
                                     {shapeExpr: $$[$0]})) // $$[$02]: t: @@
        } else {
          addShape($$[$0-2], $$[$0]);
        }
      
break;
case 27:
 // t: 1dotAbstract
        // sneak "abstract" in after "type"
        addShape($$[$0-2], Object.assign({type: "ShapeDecl", abstract: true},
                                   $$[$0-1].length > 0 ? { specializes: $$[$0-1] } : { },
                                   {shapeExpr: $$[$0]})) // $$[$01]: t: 1dotAbstractShapeCode1
      
break;
case 28: case 139:
this.$ = [] // t: 1dot, 1dotAnnot3;
break;
case 29: case 140:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1dotAnnot3;
break;
case 30:

        this.$ = $$[$0];
      
break;
case 31:
this.$ = { type: "ShapeExternal" };
break;
case 32:

        if ($$[$0-2])
          $$[$0-1] = { type: "ShapeNot", "shapeExpr": $$[$0-1] };
        if ($$[$0]) {
          $$[$0].shapeExprs.unshift($$[$0-1]);
          this.$ = $$[$0];
        } else {
// console.log("shapeAtomNoRef:", $$[$0-1]);
          this.$ = $$[$0-1];
        }
      
break;
case 33:
this.$ = { type: "ShapeNot", "shapeExpr": $$[$0-1] };
break;
case 34:

// console.log("shapeRef_shapeOr:", $$[$0-1], $$[$0]);
        $$[$0].shapeExprs.unshift($$[$0-1]);
        this.$ = $$[$0]; // { type: "ShapeOr", "shapeExprs": [$$[$0-1]].concat($$[$0]) };
    
break;
case 35:
this.$ = false;
break;
case 36:
this.$ = true;
break;
case 37: case 155: case 156: case 157: case 237:
this.$ = null;
break;
case 38: case 42: case 45: case 51: case 58: case 238:
this.$ = $$[$0];
break;
case 40:

        this.$ = { type: "ShapeOr", shapeExprs: $$[$0] };
// console.log("shapeOr_1:", this.$);
      
break;
case 41:

        this.$ = $$[$0].length > 0 ? shapeJunction("ShapeAnd", $$[$0-1], $$[$0]) : { type: "ShapeAnd", shapeExprs:$$[$0-1] };
// console.log("shapeOr_2:", this.$);
      
break;
case 43: case 46:
this.$ = [$$[$0]];
break;
case 44: case 47: case 49: case 53: case 56: case 60:
this.$ = $$[$0-1].concat($$[$0]);
break;
case 48: case 52: case 55: case 59:
this.$ = [];
break;
case 50:
this.$ = shapeJunction("ShapeOr", $$[$0-1], $$[$0]);
break;
case 54: case 57:
this.$ = shapeJunction("ShapeAnd", $$[$0-1], $$[$0]);
break;
case 62: case 64:
this.$ = { type: "ShapeNot", "shapeExpr": $$[$0] };
break;
case 66: case 75: case 82:
this.$ = { type: "ShapeAnd", shapeExprs: [ extend({ type: "NodeConstraint" }, $$[$0-1]), $$[$0] ] };
break;
case 69: case 78:
this.$ = shapeJunction("ShapeAnd", $$[$0-1], [$$[$0]]) // t:@@;
break;
case 70: case 79: case 85:
this.$ = $$[$0-1] // t: 1val1vsMinusiri3;
break;
case 71: case 80: case 86:
this.$ = EmptyShape // t: 1dot;
break;
case 84:
this.$ = $$[$0] ? { type: "ShapeAnd", shapeExprs: [ extend({ type: "NodeConstraint" }, $$[$0-1]), $$[$0] ] } : $$[$0-1] // t: !! look to 1dotRef1;
break;
case 91:
 // t: 1dotRefLNex@@
        $$[$0] = $$[$0].substr(1, $$[$0].length-1);
        var namePos = $$[$0].indexOf(':');
        this.$ = { type: "ShapeRef", reference: expandPrefix($$[$0].substr(0, namePos)) + $$[$0].substr(namePos + 1) };
      
break;
case 92:
 // t: 1dotRefNS1@@
        $$[$0] = $$[$0].substr(1, $$[$0].length-1);
        this.$ = { type: "ShapeRef", reference: expandPrefix($$[$0].substr(0, $$[$0].length - 1)) };
      
break;
case 93:
this.$ = { type: "ShapeRef", reference: $$[$0] } // t: 1dotRef1, 1dotRefSpaceLNex, 1dotRefSpaceNS1;
break;
case 94:
this.$ = extend({ type: "NodeConstraint", nodeKind: "literal" }, $$[$0]) // t: 1literalPattern;
break;
case 95:

        if (numericDatatypes.indexOf($$[$0-1]) === -1)
          numericFacets.forEach(function (facet) {
            if (facet in $$[$0])
              error("Parse error: facet " + facet + " not allowed for unknown datatype " + $$[$0-1]);
          });
        this.$ = extend({ type: "NodeConstraint", datatype: $$[$0-1] }, $$[$0]) // t: 1datatype
      
break;
case 96:
this.$ = { type: "NodeConstraint", values: $$[$0-1] } // t: 1val1IRIREF;
break;
case 97:
this.$ = extend({ type: "NodeConstraint"}, $$[$0]);
break;
case 98:
this.$ = {} // t: 1literalPattern;
break;
case 99:

        if (Object.keys($$[$0-1]).indexOf(Object.keys($$[$0])[0]) !== -1) {
          error("Parse error: facet "+Object.keys($$[$0])[0]+" defined multiple times");
        }
        this.$ = extend($$[$0-1], $$[$0]) // t: 1literalLength
      
break;
case 100:
this.$ = extend({ type: "NodeConstraint" }, $$[$0]) // t: 1iriPattern;
break;
case 101:
this.$ = extend({ type: "NodeConstraint"}, $$[$0-1], $$[$0]) // t: 1iriPattern;
break;
case 102:
this.$ = extend({ type: "NodeConstraint"}, $$[$0]) // t: @@;
break;
case 104: case 108:

        if (Object.keys($$[$0-1]).indexOf(Object.keys($$[$0])[0]) !== -1) {
          error("Parse error: facet "+Object.keys($$[$0])[0]+" defined multiple times");
        }
        this.$ = extend($$[$0-1], $$[$0]) // t: !! look to 1literalLength
      
break;
case 105:
this.$ = {};
break;
case 106:

        if (Object.keys($$[$0-1]).indexOf(Object.keys($$[$0])[0]) !== -1) {
          error("Parse error: facet "+Object.keys($$[$0])[0]+" defined multiple times");
        }
        this.$ = extend($$[$0-1], $$[$0])
      
break;
case 109:
this.$ = { nodeKind: "iri" } // t: 1iriPattern;
break;
case 110:
this.$ = { nodeKind: "bnode" } // t: 1bnodeLength;
break;
case 111:
this.$ = { nodeKind: "nonliteral" } // t: 1nonliteralLength;
break;
case 114:
this.$ = keyValObject($$[$0-1], parseInt($$[$0], 10)) // t: 1literalLength;
break;
case 115:
this.$ = unescapeRegexp($$[$0]) // t: 1literalPattern;
break;
case 116:
this.$ = "length" // t: 1literalLength;
break;
case 117:
this.$ = "minlength" // t: 1literalMinlength;
break;
case 118:
this.$ = "maxlength" // t: 1literalMaxlength;
break;
case 119:
this.$ = keyValObject($$[$0-1], $$[$0]) // t: 1literalMininclusive;
break;
case 120:
this.$ = keyValObject($$[$0-1], parseInt($$[$0], 10)) // t: 1literalTotaldigits;
break;
case 121:
this.$ = parseInt($$[$0], 10);;
break;
case 122: case 123:
this.$ = parseFloat($$[$0]);;
break;
case 124:

        if ($$[$0] === XSD_DECIMAL || $$[$0] === XSD_FLOAT || $$[$0] === XSD_DOUBLE)
          this.$ = parseFloat($$[$0-2].value);
        else if (numericDatatypes.indexOf($$[$0]) !== -1)
          this.$ = parseInt($$[$0-2].value)
        else
          error("Parse error: numeric range facet expected numeric datatype instead of " + $$[$0]);
      
break;
case 125:
this.$ = "mininclusive" // t: 1literalMininclusive;
break;
case 126:
this.$ = "minexclusive" // t: 1literalMinexclusive;
break;
case 127:
this.$ = "maxinclusive" // t: 1literalMaxinclusive;
break;
case 128:
this.$ = "maxexclusive" // t: 1literalMaxexclusive;
break;
case 129:
this.$ = "totaldigits" // t: 1literalTotaldigits;
break;
case 130:
this.$ = "fractiondigits" // t: 1literalFractiondigits;
break;
case 131:
 // t: 1dotExtend3
        var exprObj = $$[$0-3] ? { expression: $$[$0-3] } : EmptyObject; // t: 0, 0Extend1
        this.$ = (exprObj === EmptyObject && $$[$0-5] === EmptyObject) ?
	  EmptyShape :
	  extend({ type: "Shape" }, exprObj, $$[$0-5]);
        if ($$[$0-1].length) { this.$.annotations = $$[$0-1]; } // t: !! look to open3groupdotcloseAnnot3, open3groupdotclosecard23Annot3Code2
        if ($$[$0]) { this.$.semActs = $$[$0].semActs; } // t: !! look to open3groupdotcloseCode1, !open1dotOr1dot
      
break;
case 132:
this.$ = [ "extends", $$[$0] ] // t: 1dotExtend1;
break;
case 133:
this.$ = [ "extra", $$[$0] ] // t: 1dotExtra1, 3groupdot3Extra, 3groupdotExtra3;
break;
case 134:
this.$ = [ "closed", true ] // t: 1dotClosed;
break;
case 135:
this.$ = EmptyObject;
break;
case 136:

      if ($$[$0-1] === EmptyObject)
	$$[$0-1] = {};
      if ($$[$0][0] === "closed")
        $$[$0-1]["closed"] = true; // t: 1dotClosed
      else if ($$[$0][0] in $$[$0-1])
        $$[$0-1][$$[$0][0]] = unionAll($$[$0-1][$$[$0][0]], $$[$0][1]); // t: 1dotExtend3, 3groupdot3Extra, 3groupdotExtra3
      else
        $$[$0-1][$$[$0][0]] = $$[$0][1]; // t: 1dotExtend1
      this.$ = $$[$0-1];
    
break;
case 141:
 // t: 1dotExtend3
        var exprObj = $$[$0-1] ? { expression: $$[$0-1] } : EmptyObject; // t: 0, 0Extend1
        this.$ = (exprObj === EmptyObject && $$[$0-3] === EmptyObject) ?
	  EmptyShape :
	  extend({ type: "Shape" }, exprObj, $$[$0-3]);
      
break;
case 142:
this.$ = $$[$0] // t: 1dotExtra1, 3groupdot3Extra;
break;
case 143:
this.$ = [$$[$0]] // t: 1dotExtra1, 3groupdot3Extra, 3groupdotExtra3;
break;
case 144:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 3groupdotExtra3;
break;
case 148:
this.$ = { type: "OneOf", expressions: unionAll([$$[$0-1]], $$[$0]) } // t: 2oneOfdot;
break;
case 149:
this.$ = $$[$0] // t: 2oneOfdot;
break;
case 150:
this.$ = [$$[$0]] // t: 2oneOfdot;
break;
case 151:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 2oneOfdot;
break;
case 154:
this.$ = $$[$0] ? { type: "EachOf", expressions: unionAll([$$[$0-1]], $$[$0]) } : $$[$0-1] // t: 2groupOfdot;
break;
case 158:
this.$ = $$[$0-1];
break;
case 162:
this.$ = { type: "EachOf", expressions: unionAll([$$[$0-2]], $$[$0-1]) } // t: 2groupOfdot;
break;
case 163: case 164:
this.$ = $$[$0] // t: 2groupOfdot;
break;
case 165:
this.$ = [$$[$0]] // t: 2groupOfdot;
break;
case 166:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 2groupOfdot;
break;
case 167: case 169:

        this.$ = extend({ id: $$[$0-1] }, $$[$0]);
        addProduction($$[$0-1],  this.$);
      
break;
case 173:

        // t: open1dotOr1dot, !openopen1dotcloseCode1closeCode2
        this.$ = $$[$0-4];
        // Copy all of the new attributes into the encapsulated shape.
        if ("min" in $$[$0-2]) { this.$.min = $$[$0-2].min; } // t: open3groupdotclosecard23Annot3Code2
        if ("max" in $$[$0-2]) { this.$.max = $$[$0-2].max; } // t: open3groupdotclosecard23Annot3Code2
        if ($$[$0-1].length) { this.$.annotations = $$[$0-1]; } // t: open3groupdotcloseAnnot3, open3groupdotclosecard23Annot3Code2
        if ($$[$0]) { this.$.semActs = "semActs" in $$[$0-4] ? $$[$0-4].semActs.concat($$[$0].semActs) : $$[$0].semActs; } // t: open3groupdotcloseCode1, !open1dotOr1dot
      
break;
case 174:
this.$ = {} // t: 1dot;
break;
case 176:

        // $$[$0]: t: 1dotCode1
	if ($$[$0-3] !== EmptyShape && false) {
	  var t = blank();
	  addShape(t, $$[$0-3]);
	  $$[$0-3] = { type: "ShapeRef", reference: t };
	}
        this.$ = extend({ type: "TripleConstraint", predicate: $$[$0-4]}, ($$[$0-3] === EmptyShape ? {} : { valueExpr: $$[$0-3] }), $$[$0-2], $$[$0]); // t: 1dot
        if ($$[$0-1].length)
          this.$["annotations"] = $$[$0-1]; // t: 1dotAnnot3
      
break;
case 177:

        // %6: t: 1inversedotCode1
        this.$ = extend({ type: "TripleConstraint" }, $$[$0-5], { predicate: $$[$0-4] }, ($$[$0-3] === EmptyShape ? {} : { valueExpr: $$[$0-3] }), $$[$0-2], $$[$0]); // t: 1inversedot
        if ($$[$0-1].length)
          this.$["annotations"] = $$[$0-1]; // t: 1inversedotAnnot3
      
break;
case 178:
this.$ = { min:0, max:UNBOUNDED } // t: 1cardStar;
break;
case 179:
this.$ = { min:1, max:UNBOUNDED } // t: 1cardPlus;
break;
case 180:
this.$ = { min:0, max:1 } // t: 1cardOpt;
break;
case 181:

        $$[$0] = $$[$0].substr(1, $$[$0].length-2);
        var nums = $$[$0].match(/(\d+)/g);
        this.$ = { min: parseInt(nums[0], 10) }; // t: 1card2blank, 1card2Star
        if (nums.length === 2)
            this.$["max"] = parseInt(nums[1], 10); // t: 1card23
        else if ($$[$0].indexOf(',') === -1) // t: 1card2
            this.$["max"] = parseInt(nums[0], 10);
        else
            this.$["max"] = UNBOUNDED;
      
break;
case 182:
this.$ = { inverse: true } // t: 1inversedot;
break;
case 183:
this.$ = $$[$0-1] // t: 1val1IRIREF;
break;
case 184:
this.$ = [] // t: 1val1IRIREF;
break;
case 185:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1val1IRIREF;
break;
case 189:
this.$ = { type: "IriStemRange", stem: { type: "Wildcard" }, exclusions: $$[$0] } // t:1val1dotMinusiri3, 1val1dotMinusiriStem3;
break;
case 190:
this.$ = { type: "LiteralStemRange", stem: { type: "Wildcard" }, exclusions: $$[$0] } // t:1val1dotMinusliteral3, 1val1dotMinusliteralStem3;
break;
case 191:
this.$ = { type: "LanguageStemRange", stem: { type: "Wildcard" }, exclusions: $$[$0] } // t:1val1dotMinuslanguage3, 1val1dotMinuslanguageStem3;
break;
case 192:

        if ($$[$0]) {
          this.$ = {  // t: 1val1iriStem, 1val1iriStemMinusiri3
            type: $$[$0].length ? "IriStemRange" : "IriStem",
            stem: $$[$0-1]
          };
          if ($$[$0].length)
            this.$["exclusions"] = $$[$0]; // t: 1val1iriStemMinusiri3
        } else {
          this.$ = $$[$0-1]; // t: 1val1IRIREF, 1AvalA
        }
      
break;
case 193:
this.$ = [] // t: 1val1iriStem, 1val1iriStemMinusiri3;
break;
case 194:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1val1iriStemMinusiri3;
break;
case 195: case 200:
this.$ = $$[$0] // t: 1val1iriStemMinusiri3;
break;
case 198:
this.$ = [$$[$0]] // t:1val1dotMinusiri3, 1val1dotMinusiriStem3;
break;
case 199:
this.$ = appendTo($$[$0-1], $$[$0]) // t:1val1dotMinusiri3, 1val1dotMinusiriStem3;
break;
case 201:
this.$ = { type: "IriStem", stem: $$[$0-1] } // t: 1val1iriStemMinusiriStem3;
break;
case 202:

        if ($$[$0]) {
          this.$ = {  // t: 1val1literalStemMinusliteralStem3, 1val1literalStem
            type: $$[$0].length ? "LiteralStemRange" : "LiteralStem",
            stem: $$[$0-1].value
          };
          if ($$[$0].length)
            this.$["exclusions"] = $$[$0]; // t: 1val1literalStemMinusliteral3
        } else {
          this.$ = $$[$0-1]; // t: 1val1LITERAL
        }
      
break;
case 203:
this.$ = [] // t: 1val1literalStem, 1val1literalStemMinusliteral3;
break;
case 204:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1val1literalStemMinusliteral3;
break;
case 205:
this.$ = $$[$0] // t: 1val1literalStemMinusliteral3;
break;
case 208:
this.$ = [$$[$0]] // t:1val1dotMinusliteral3, 1val1dotMinusliteralStem3;
break;
case 209:
this.$ = appendTo($$[$0-1], $$[$0]) // t:1val1dotMinusliteral3, 1val1dotMinusliteralStem3;
break;
case 210:
this.$ = $$[$0].value // t: 1val1literalStemMinusliteral3;
break;
case 211:
this.$ = { type: "LiteralStem", stem: $$[$0-1].value } // t: 1val1literalStemMinusliteralStem3;
break;
case 212:

        if ($$[$0]) {
          this.$ = {  // t: 1val1languageStemMinuslanguage3 1val1languageStemMinuslanguageStem3 : 1val1languageStem
            type: $$[$0].length ? "LanguageStemRange" : "LanguageStem",
            stem: $$[$0-1]
          };
          if ($$[$0].length)
            this.$["exclusions"] = $$[$0]; // t: 1val1languageStemMinuslanguage3, 1val1languageStemMinuslanguageStem3
        } else {
          this.$ = { type: "Language", languageTag: $$[$0-1] }; // t: 1val1language
        }
      
break;
case 213:
this.$ = [] // t: 1val1languageStem, 1val1languageStemMinuslanguage3;
break;
case 214:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1val1languageStemMinuslanguage3;
break;
case 215: case 220:
this.$ = $$[$0] // t: 1val1languageStemMinuslanguage3;
break;
case 218:
this.$ = [$$[$0]] // t:1val1dotMinuslanguage3, 1val1dotMinuslanguageStem3;
break;
case 219:
this.$ = appendTo($$[$0-1], $$[$0]) // t:1val1dotMinuslanguage3, 1val1dotMinuslanguageStem3;
break;
case 221:
this.$ = { type: "LanguageStem", stem: $$[$0-1] } // t: 1val1languageStemMinuslanguageStem3;
break;
case 222:
this.$ = $$[$0].substr(1);
break;
case 223:
this.$ = { type: "Inclusion", "include": $$[$0] } // t: 2groupInclude1;
break;
case 224:
this.$ = { type: "Annotation", predicate: $$[$0-1], object: $$[$0] } // t: 1dotAnnotIRIREF;
break;
case 227:
this.$ = $$[$0].length ? { semActs: $$[$0] } : null; // t: 1dotCode1/2oneOfDot;
break;
case 228:
this.$ = [] // t: 1dot, 1dotCode1;
break;
case 229:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1dotCode1;
break;
case 230:
this.$ = unescapeSemanticAction($$[$0-1], $$[$0]) // t: 1dotCode1;
break;
case 231:
this.$ = { type: "SemAct", name: $$[$0-1] } // t: 1dotNoCode1;
break;
case 233:
this.$ = $$[$0] ? extend($$[$0-1], { type: $$[$0] }) : $$[$0-1]; // t: 1val1Datatype;
break;
case 235:
this.$ = { value: "true", type: XSD_BOOLEAN } // t: 1val1true;
break;
case 236:
this.$ = { value: "false", type: XSD_BOOLEAN } // t: 1val1false;
break;
case 240:
this.$ = RDF_TYPE // t: 1AvalA;
break;
case 246:
this.$ = createLiteral($$[$0], XSD_INTEGER) // t: 1val1INTEGER;
break;
case 247:
this.$ = createLiteral($$[$0], XSD_DECIMAL) // t: 1val1DECIMAL;
break;
case 248:
this.$ = createLiteral($$[$0], XSD_DOUBLE) // t: 1val1DOUBLE;
break;
case 249:
 // t: 1dot
        var unesc = ShExUtil.unescapeText($$[$0].slice(1,-1), {});
        this.$ = Parser._base === null || absoluteIRI.test(unesc) ? unesc : _resolveIRI(unesc)
      
break;
case 250:
 // t:1dotPNex, 1dotPNdefault, ShExParser-test.js/with pre-defined prefixes
        var namePos = $$[$0].indexOf(':');
        this.$ = expandPrefix($$[$0].substr(0, namePos)) + ShExUtil.unescapeText($$[$0].substr(namePos + 1), pnameEscapeReplacements);
    
break;
case 251:
 // t: 1dotNS2, 1dotNSdefault, ShExParser-test.js/PNAME_NS with pre-defined prefixes
        this.$ = expandPrefix($$[$0].substr(0, $$[$0].length - 1));
    
break;
case 253:
this.$ = $$[$0] // t: 1dotExtend1, 1dot3Extend, 1dotExtend3;
break;
case 254:
this.$ = $$[$0] // t: @_$[$0-1]dotSpecialize1, @_$[$0-1]dot3Specialize, @_$[$0-1]dotSpecialize3;
break;
case 255:
this.$ = [$$[$0]] // t: 1dotExtend1, 1dot3Extend, 1dotExtend3;
break;
case 256:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1dotExtend3;
break;
}
},
table: [o($V0,[2,2],{3:1,4:2}),{1:[3]},o($V0,[2,3],{5:3}),{6:4,7:[2,10],8:5,9:10,10:14,11:15,14:6,15:7,16:8,17:9,18:$V1,19:$V2,20:$V3,21:$V4,22:23,23:$V5,24:16,25:17,26:$V6,29:18,30:22,31:20,34:$V7,184:$V8,192:24,193:$V9,194:$Va},{7:[1,30]},o($V0,[2,4]),{7:[2,11]},o($V0,[2,12]),o($V0,[2,13]),o($V0,[2,14]),o($Vb,[2,7],{12:31}),{19:[1,32]},{21:[1,33]},{19:$V2,21:$V4,22:34,193:$V9},o($Vb,[2,5]),o($Vb,[2,6]),o($Vb,[2,18]),o($Vb,[2,19]),o($Vb,[2,21],{30:35,184:$V8}),{27:[1,36]},o($Vc,$Vd,{32:37}),{19:$V2,21:$V4,22:23,31:38,192:24,193:$V9,194:$Va},o($V0,[2,22]),o($Ve,[2,242]),o($Ve,[2,243]),{19:$V2,21:$V4,22:39,193:$V9},o($Vf,[2,249]),o($Vf,[2,250]),o($Vf,[2,251]),o([7,18,19,20,21,23,26,34,37,41,49,52,66,67,68,73,74,75,76,87,88,89,92,93,94,95,103,104,105,106,107,108,110,112,118,121,129,134,135,148,149,150,151,152,153,168,180,181,184,191,193,194],[2,252]),{1:[2,1]},{7:[2,9],8:41,10:42,13:40,15:7,16:8,17:9,18:$V1,19:$V2,20:$V3,21:$V4,22:23,23:$V5,24:16,25:17,26:$V6,31:20,34:$V7,192:24,193:$V9,194:$Va},o($V0,[2,15]),{19:$V2,21:$V4,22:43,193:$V9},o($V0,[2,17]),o($V0,[2,23]),o($Vg,$Vh,{28:44,44:45,54:46,58:47,62:48,63:50,65:51,71:52,82:55,83:56,78:58,79:59,80:60,72:61,42:62,86:66,22:67,84:69,109:70,90:74,96:76,98:77,19:$V2,21:$V4,41:$Vi,66:$Vj,68:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,87:$Vp,88:$Vq,89:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,153:$VC,193:$V9}),o($VD,$VE,{33:87,35:88,36:89,38:92,42:94,37:$VF,41:$VG,73:$Vl,74:$Vm,75:$Vn,168:$VH}),o($Vc,$Vd,{32:95}),{184:[1,97],185:[1,96]},o($Vb,[2,8]),o($Vb,[2,24]),o($Vb,[2,25]),o($V0,[2,16]),o($Vb,[2,20]),o($VI,[2,39]),o($VJ,[2,52],{55:98}),o($VK,[2,59],{59:99}),o($VK,[2,63]),o($Vg,$Vh,{63:50,65:51,71:52,82:55,83:56,78:58,79:59,80:60,72:61,42:62,86:66,22:67,84:69,109:70,90:74,96:76,98:77,62:100,19:$V2,21:$V4,66:$Vj,68:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,87:$Vp,88:$Vq,89:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,153:$VC,193:$V9}),o($VK,[2,81],{72:61,42:62,109:70,71:101,73:$Vl,74:$Vm,75:$Vn,110:$Vh,118:$Vh,121:$Vh,180:$Vh}),o($VK,[2,83]),o($VK,[2,72],{82:55,83:56,86:66,90:74,69:102,63:103,87:$Vp,88:$Vq,89:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv}),o($VD,$VE,{38:92,42:94,36:104,41:$VG,73:$Vl,74:$Vm,75:$Vn}),o($VK,[2,86]),o($VL,[2,100],{86:66,90:74,83:105,92:$Vs,93:$Vt,94:$Vu,95:$Vv}),o($VL,[2,102],{90:74,86:106,92:$Vs,93:$Vt,94:$Vu,95:$Vv}),o($VM,$VN,{77:107}),o($VM,$VN,{77:108}),o($VM,$VN,{77:109}),o($VK,[2,97],{96:76,98:77,84:110,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB}),o($VO,[2,89]),o($VO,[2,90]),o($VP,[2,109]),o($VP,[2,110]),o($VP,[2,111]),o($VP,[2,107]),o([7,18,19,20,21,23,26,34,49,52,67,68,87,88,89,91,92,93,94,95,99,100,101,103,104,105,106,107,108,112,129,134,135,148,149,150,151,155,167,168,179,181,184,186,189,190,193,194],[2,241]),o($VQ,[2,184],{154:111}),o($VR,[2,103]),{110:[1,112],115:113,116:114,117:115,118:$VS,121:$VT,180:$VU},o($VO,[2,91]),o($VO,[2,92]),{19:$V2,21:$V4,22:23,31:119,192:24,193:$V9,194:$Va},{91:[1,120]},o($VV,[2,115]),{91:[1,122],97:121,99:[1,123],100:[1,124],101:[1,125]},{91:[1,126]},{91:[2,116]},{91:[2,117]},{91:[2,118]},o($VW,[2,125]),o($VW,[2,126]),o($VW,[2,127]),o($VW,[2,128]),{91:[2,129]},{91:[2,130]},o($Vb,[2,26]),o($Vc,[2,29]),o($Vb,[2,30]),o($Vb,[2,31]),{19:$V2,21:$V4,22:23,31:127,192:24,193:$V9,194:$Va},o($Vg,$Vh,{82:55,83:56,78:58,79:59,80:60,86:66,22:67,84:69,90:74,96:76,98:77,39:128,63:129,65:130,70:131,109:134,19:$V2,21:$V4,66:[1,132],68:[1,133],76:$Vo,87:$Vp,88:$Vq,89:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,153:$VC,193:$V9}),o($VD,[2,36],{42:135,73:$Vl,74:$Vm,75:$Vn}),{43:136,45:137,46:138,48:139,49:$VX,51:140,52:$VY},o($VD,$VE,{35:88,36:89,38:92,42:94,33:143,37:$VF,41:$VG,73:$Vl,74:$Vm,75:$Vn,168:$VH}),o($VZ,[2,230]),o($VZ,[2,231]),o($VI,[2,50],{56:144,49:[1,145]}),o($VJ,[2,57],{60:146,52:[1,147]}),o($VK,[2,64]),o($VK,[2,82]),o($VK,[2,84]),o($VK,[2,73]),{67:[1,148]},o($VL,[2,101],{90:74,86:106,92:$Vs,93:$Vt,94:$Vu,95:$Vv}),o($VP,[2,108]),o($VK,[2,94],{90:74,96:76,98:77,81:149,86:150,84:151,92:$Vs,93:$Vt,94:$Vu,95:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB}),o($VK,[2,95],{90:74,96:76,98:77,81:149,86:150,84:151,92:$Vs,93:$Vt,94:$Vu,95:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB}),o($VK,[2,96],{90:74,96:76,98:77,81:149,86:150,84:151,92:$Vs,93:$Vt,94:$Vu,95:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB}),o($VR,[2,104]),{19:$V2,21:$V4,22:158,68:[1,157],91:$V_,99:$V$,100:$V01,101:$V11,155:[1,152],156:153,157:154,158:155,159:156,169:159,174:160,179:$V21,186:$V31,188:163,189:$V41,190:$V51,193:$V9},{19:$V2,21:$V4,22:185,66:$V61,111:170,112:$V71,119:171,123:181,124:172,125:173,126:174,132:175,139:$V81,141:177,142:178,143:$V91,144:180,147:182,152:$Va1,180:$Vb1,191:$Vc1,193:$V9},o($Vg,[2,136]),o($Vg,[2,132]),o($Vg,[2,133]),o($Vg,[2,134]),{19:$V2,21:$V4,22:23,31:189,192:24,193:$V9,194:$Va,195:188},{19:$V2,21:$V4,22:185,122:190,123:191,191:$Vc1,193:$V9},o($VO,[2,93]),o($VV,[2,114]),o($VM,[2,119]),o($VM,[2,121]),o($VM,[2,122]),o($VM,[2,123]),{102:[1,192]},o($VM,[2,120]),o($Vc,[2,254]),o($Vd1,$Ve1,{45:137,46:138,48:139,51:140,40:193,43:194,49:$VX,52:$VY}),o($Vf1,[2,74],{109:134,64:195,70:196,42:197,73:$Vl,74:$Vm,75:$Vn,110:$Vh,118:$Vh,121:$Vh,180:$Vh}),o($Vf1,[2,76]),o($Vf1,[2,77],{82:55,83:56,86:66,90:74,63:198,87:$Vp,88:$Vq,89:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv}),o($VD,$VE,{38:92,42:94,36:199,41:$VG,73:$Vl,74:$Vm,75:$Vn}),o($Vf1,[2,80]),{110:[1,200],115:113,116:114,117:115,118:$VS,121:$VT,180:$VU},o($Vd1,$Ve1,{45:137,46:138,48:139,51:140,43:194,40:201,49:$VX,52:$VY}),o($Vd1,[2,34]),o($Vd1,[2,40],{48:202,49:$VX}),o($Vg1,[2,48],{47:203,51:204,52:$VY}),o($Vg1,[2,43]),o($Vf1,[2,46]),o($Vg,$Vh,{82:55,83:56,78:58,79:59,80:60,86:66,22:67,84:69,90:74,96:76,98:77,109:134,70:196,42:197,50:205,53:206,61:207,63:209,65:210,64:211,19:$V2,21:$V4,41:$Vh1,66:$Vi1,68:$Vj1,73:$Vl,74:$Vm,75:$Vn,76:$Vo,87:$Vp,88:$Vq,89:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,153:$VC,193:$V9}),o($Vg,$Vh,{82:55,83:56,78:58,79:59,80:60,86:66,22:67,84:69,90:74,96:76,98:77,109:134,70:196,42:197,61:207,63:209,65:210,64:211,53:214,19:$V2,21:$V4,41:$Vh1,66:$Vi1,68:$Vj1,73:$Vl,74:$Vm,75:$Vn,76:$Vo,87:$Vp,88:$Vq,89:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,153:$VC,193:$V9}),o($Vb,[2,27]),o($VJ,[2,53]),o($Vg,$Vh,{58:47,62:48,63:50,65:51,71:52,82:55,83:56,78:58,79:59,80:60,72:61,42:62,86:66,22:67,84:69,109:70,90:74,96:76,98:77,54:215,19:$V2,21:$V4,41:$Vi,66:$Vj,68:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,87:$Vp,88:$Vq,89:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,153:$VC,193:$V9}),o($VK,[2,60]),o($Vg,$Vh,{62:48,63:50,65:51,71:52,82:55,83:56,78:58,79:59,80:60,72:61,42:62,86:66,22:67,84:69,109:70,90:74,96:76,98:77,58:216,19:$V2,21:$V4,41:$Vi,66:$Vj,68:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,87:$Vp,88:$Vq,89:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,153:$VC,193:$V9}),o($VK,[2,85]),o($VM,[2,99]),o($VM,[2,112]),o($VM,[2,113]),o($VM,[2,183]),o($VQ,[2,185]),o($VQ,[2,186]),o($VQ,[2,187]),o($VQ,[2,188]),{160:217,161:218,162:219,165:220,168:[1,223],172:221,177:222},o($VQ,[2,196],{163:224,166:225,167:[1,226]}),o($VQ,[2,206],{170:227,173:228,167:[1,229]}),o($VQ,[2,216],{175:230,178:231,167:[1,232]}),o($Vk1,[2,232]),o($Vk1,[2,237],{187:233,102:[1,234]}),o($Vk1,[2,234]),o($Vk1,[2,235]),o($Vk1,[2,236]),o([19,21,68,91,99,100,101,155,167,168,179,186,189,190,193],[2,222]),o($Vk1,[2,246]),o($Vk1,[2,247]),o($Vk1,[2,248]),{112:[1,235]},{112:[2,138]},{112:[2,145]},{112:[2,146],127:236,128:237,129:$Vl1},{112:[2,147]},o($Vm1,$Vn1,{133:239,136:242,138:243,134:$Vo1,135:$Vp1}),{19:$V2,21:$V4,22:245,140:244,192:246,193:$V9,194:$Va},o($Vq1,[2,168]),o($Vq1,[2,170]),o($Vq1,[2,171]),o($Vq1,[2,172]),o($Vg,$Vh,{44:45,54:46,58:47,62:48,63:50,65:51,71:52,82:55,83:56,78:58,79:59,80:60,72:61,42:62,86:66,22:67,84:69,109:70,90:74,96:76,98:77,28:247,19:$V2,21:$V4,41:$Vi,66:$Vj,68:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,87:$Vp,88:$Vq,89:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,153:$VC,193:$V9}),{19:$V2,21:$V4,22:185,123:248,191:$Vc1,193:$V9},{19:$V2,21:$V4,22:185,66:$V61,123:181,125:253,126:251,130:249,131:250,132:252,139:$V81,141:177,142:178,143:$V91,144:180,147:182,152:$Va1,180:$Vb1,191:$Vc1,193:$V9},{19:$V2,21:$V4,22:245,140:254,192:246,193:$V9,194:$Va},o($Vr1,[2,239]),o($Vr1,[2,240]),o([19,21,191,193],[2,182]),o($Vg,[2,253],{22:23,192:24,31:255,19:$V2,21:$V4,193:$V9,194:$Va}),o($Vs1,[2,255]),o($Vg,[2,142],{22:185,123:256,19:$V2,21:$V4,191:$Vc1,193:$V9}),o($Vt1,[2,143]),{19:$V2,21:$V4,22:67,78:257,193:$V9},o($Vd1,[2,32]),o($Vd1,[2,38]),o($Vf1,[2,75]),o($Vu1,[2,87]),o($Vu1,[2,88]),o($Vf1,[2,78]),{67:[1,258]},{19:$V2,21:$V4,22:185,66:$V61,111:259,112:$V71,119:171,123:181,124:172,125:173,126:174,132:175,139:$V81,141:177,142:178,143:$V91,144:180,147:182,152:$Va1,180:$Vb1,191:$Vc1,193:$V9},o($Vd1,[2,33]),o($Vg1,[2,44]),o($Vd1,[2,41],{48:260,49:$VX}),o($Vf1,[2,47]),o($Vg1,[2,42]),o($Vf1,[2,55],{57:261}),o($Vf1,[2,61]),o($Vg,$Vh,{82:55,83:56,78:58,79:59,80:60,86:66,22:67,84:69,90:74,96:76,98:77,109:134,70:196,42:197,63:209,65:210,64:211,61:262,19:$V2,21:$V4,66:$Vi1,68:$Vj1,73:$Vl,74:$Vm,75:$Vn,76:$Vo,87:$Vp,88:$Vq,89:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,153:$VC,193:$V9}),o($Vf1,[2,65],{109:134,70:196,42:197,64:263,73:$Vl,74:$Vm,75:$Vn,110:$Vh,118:$Vh,121:$Vh,180:$Vh}),o($Vf1,[2,67]),o($Vf1,[2,68],{82:55,83:56,86:66,90:74,63:264,87:$Vp,88:$Vq,89:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv}),o($VD,$VE,{38:92,42:94,36:265,41:$VG,73:$Vl,74:$Vm,75:$Vn}),o($Vf1,[2,71]),o($Vf1,[2,45]),o($VJ,[2,51]),o($VK,[2,58]),o($VQ,[2,189],{165:266,168:$Vv1}),o($VQ,[2,190],{172:268,168:$Vw1}),o($VQ,[2,191],{177:270,168:$Vx1}),o($Vy1,[2,198]),o($Vy1,[2,208]),o($Vy1,[2,218]),{19:$V2,21:$V4,22:272,91:$V_,99:$V$,100:$V01,101:$V11,169:273,174:274,179:$V21,186:$V31,188:163,189:$V41,190:$V51,193:$V9},o($VQ,[2,192]),o($VQ,[2,197]),o($Vy1,[2,193],{164:275}),o($VQ,[2,202]),o($VQ,[2,207]),o($Vy1,[2,203],{171:276}),o($VQ,[2,212]),o($VQ,[2,217]),o($Vy1,[2,213],{176:277}),o($Vk1,[2,233]),{19:$V2,21:$V4,22:67,78:278,193:$V9},o($VO,[2,141]),o([67,112],[2,148],{128:279,129:$Vl1}),o($Vm1,[2,150]),{19:$V2,21:$V4,22:185,66:$V61,123:181,125:280,132:175,139:$V81,141:177,142:178,143:$V91,144:180,147:182,152:$Va1,180:$Vb1,191:$Vc1,193:$V9},o($Vm1,[2,154]),o($Vm1,[2,156],{141:177,142:178,144:180,123:181,147:182,22:185,132:281,19:$V2,21:$V4,66:$V61,139:$V81,143:$V91,152:$Va1,180:$Vb1,191:$Vc1,193:$V9}),o($Vm1,[2,157],{141:177,142:178,144:180,123:181,147:182,22:185,132:282,19:$V2,21:$V4,66:$V61,139:$V81,143:$V91,152:$Va1,180:$Vb1,191:$Vc1,193:$V9}),o($Vm1,$Vz1,{137:283,138:284,134:$VA1,135:$VB1}),o($Vq1,[2,165]),{19:$V2,21:$V4,22:185,66:$V61,123:181,141:287,142:288,147:182,152:$Va1,191:$Vc1,193:$V9},o($VC1,[2,244]),o($VC1,[2,245]),o($VD1,$VE1,{145:289,146:290,148:$VF1,149:$VG1,150:$VH1,151:$VI1}),o($Vg,$Vh,{44:45,54:46,58:47,62:48,63:50,65:51,71:52,82:55,83:56,78:58,79:59,80:60,72:61,42:62,86:66,22:67,84:69,109:70,90:74,96:76,98:77,28:295,19:$V2,21:$V4,41:$Vi,66:$Vj,68:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,87:$Vp,88:$Vq,89:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,153:$VC,193:$V9}),{67:[1,296]},{67:[2,152]},{67:[2,153]},{129:$Vn1,133:239,134:$Vo1,135:$Vp1,136:297,138:243},{127:236,128:237,129:$Vl1},o($Vq1,[2,223]),o($Vs1,[2,256]),o($Vt1,[2,144]),o($VM,[2,124]),o($Vf1,[2,79]),{112:[1,298]},o($Vg1,[2,49]),o($Vg1,[2,54],{51:299,52:$VY}),o($Vf1,[2,62]),o($Vf1,[2,66]),o($Vf1,[2,69]),{67:[1,300]},o($Vy1,[2,199]),{19:$V2,21:$V4,22:272,193:$V9},o($Vy1,[2,209]),{91:$V_,99:$V$,100:$V01,101:$V11,169:273,186:$V31,188:163,189:$V41,190:$V51},o($Vy1,[2,219]),{174:274,179:$V21},o($Vy1,[2,200],{167:[1,301]}),o($Vy1,[2,210],{167:[1,302]}),o($Vy1,[2,220],{167:[1,303]}),o($VQ,[2,195],{165:304,168:$Vv1}),o($VQ,[2,205],{172:305,168:$Vw1}),o($VQ,[2,215],{177:306,168:$Vx1}),o($Vk1,[2,238]),o($Vm1,[2,151]),o($Vm1,[2,149]),o($Vq1,[2,163]),o($Vq1,[2,164]),o($Vm1,$VJ1),o($Vq1,[2,166]),o($Vm1,[2,160],{141:177,142:178,144:180,123:181,147:182,22:185,132:281,19:$V2,21:$V4,66:$V61,139:$V81,143:$V91,152:$Va1,180:$Vb1,191:$Vc1,193:$V9}),o($Vm1,[2,161],{141:177,142:178,144:180,123:181,147:182,22:185,132:282,19:$V2,21:$V4,66:$V61,139:$V81,143:$V91,152:$Va1,180:$Vb1,191:$Vc1,193:$V9}),o($Vq1,[2,167]),o($Vq1,[2,169]),o($VD1,$VK1,{113:307}),o($VD1,[2,175]),o($VD1,[2,178]),o($VD1,[2,179]),o($VD1,[2,180]),o($VD1,[2,181]),o($VD1,$VE1,{146:290,145:308,148:$VF1,149:$VG1,150:$VH1,151:$VI1}),o($VD1,$VE1,{146:290,145:309,148:$VF1,149:$VG1,150:$VH1,151:$VI1}),o([67,129],$Vz1,{138:284,137:310,134:$VA1,135:$VB1}),o([7,18,19,20,21,23,26,34,49,52,67,87,88,89,92,93,94,95,181,184,193,194],$VK1,{113:311}),o($Vf1,[2,56]),o($Vf1,[2,70]),o($Vy1,[2,201]),o($Vy1,[2,211]),o($Vy1,[2,221]),o($Vy1,[2,194]),o($Vy1,[2,204]),o($Vy1,[2,214]),o($VL1,$VM1,{114:312,120:313,183:314,181:$VN1}),o($VD1,$VK1,{113:316}),o($VD1,$VK1,{113:317}),{67:[2,162],129:$VJ1},o([7,18,19,20,21,23,26,34,49,52,67,87,88,89,92,93,94,95,184,193,194],$VM1,{120:313,183:314,114:318,181:$VN1}),o($Vq1,[2,176]),o($VO1,[2,140]),o([7,18,19,20,21,23,26,34,49,52,67,87,88,89,92,93,94,95,112,129,134,135,193,194],[2,227],{30:319,184:$V8}),{19:$V2,21:$V4,22:185,123:320,191:$Vc1,193:$V9},o($VL1,$VM1,{120:313,183:314,114:321,181:$VN1}),o($VL1,$VM1,{120:313,183:314,114:322,181:$VN1}),o($Vu1,[2,131]),o($VZ,[2,229]),{19:$V2,21:$V4,22:324,91:$V_,99:$V$,100:$V01,101:$V11,169:325,182:323,186:$V31,188:163,189:$V41,190:$V51,193:$V9},o($Vq1,[2,177]),o($Vq1,[2,173]),o($VO1,[2,224]),o($VO1,[2,225]),o($VO1,[2,226])],
defaultActions: {6:[2,11],30:[2,1],78:[2,116],79:[2,117],80:[2,118],85:[2,129],86:[2,130],171:[2,138],172:[2,145],174:[2,147],250:[2,152],251:[2,153]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  /*
    ShEx parser in the Jison parser generator format.
  */

  var UNBOUNDED = -1;

  var ShExUtil = require("./ShExUtil");

  // Common namespaces and entities
  var RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
      RDF_TYPE  = RDF + 'type',
      RDF_FIRST = RDF + 'first',
      RDF_REST  = RDF + 'rest',
      RDF_NIL   = RDF + 'nil',
      XSD = 'http://www.w3.org/2001/XMLSchema#',
      XSD_INTEGER  = XSD + 'integer',
      XSD_DECIMAL  = XSD + 'decimal',
      XSD_FLOAT   = XSD + 'float',
      XSD_DOUBLE   = XSD + 'double',
      XSD_BOOLEAN  = XSD + 'boolean',
      XSD_TRUE =  '"true"^^'  + XSD_BOOLEAN,
      XSD_FALSE = '"false"^^' + XSD_BOOLEAN,
      XSD_PATTERN        = XSD + 'pattern',
      XSD_MININCLUSIVE   = XSD + 'minInclusive',
      XSD_MINEXCLUSIVE   = XSD + 'minExclusive',
      XSD_MAXINCLUSIVE   = XSD + 'maxInclusive',
      XSD_MAXEXCLUSIVE   = XSD + 'maxExclusive',
      XSD_LENGTH         = XSD + 'length',
      XSD_MINLENGTH      = XSD + 'minLength',
      XSD_MAXLENGTH      = XSD + 'maxLength',
      XSD_TOTALDIGITS    = XSD + 'totalDigits',
      XSD_FRACTIONDIGITS = XSD + 'fractionDigits';

  var numericDatatypes = [
      XSD + "integer",
      XSD + "decimal",
      XSD + "float",
      XSD + "double",
      XSD + "string",
      XSD + "boolean",
      XSD + "dateTime",
      XSD + "nonPositiveInteger",
      XSD + "negativeInteger",
      XSD + "long",
      XSD + "int",
      XSD + "short",
      XSD + "byte",
      XSD + "nonNegativeInteger",
      XSD + "unsignedLong",
      XSD + "unsignedInt",
      XSD + "unsignedShort",
      XSD + "unsignedByte",
      XSD + "positiveInteger"
  ];

  var absoluteIRI = /^[a-z][a-z0-9+.-]*:/i,
    schemeAuthority = /^(?:([a-z][a-z0-9+.-]*:))?(?:\/\/[^\/]*)?/i,
    dotSegments = /(?:^|\/)\.\.?(?:$|[\/#?])/;

  var numericFacets = ["mininclusive", "minexclusive",
                       "maxinclusive", "maxexclusive"];

  // Returns a lowercase version of the given string
  function lowercase(string) {
    return string.toLowerCase();
  }

  // Appends the item to the array and returns the array
  function appendTo(array, item) {
    return array.push(item), array;
  }

  // Appends the items to the array and returns the array
  function appendAllTo(array, items) {
    return array.push.apply(array, items), array;
  }

  // Extends a base object with properties of other objects
  function extend(base) {
    if (!base) base = {};
    for (var i = 1, l = arguments.length, arg; i < l && (arg = arguments[i] || {}); i++)
      for (var name in arg)
        base[name] = arg[name];
    return base;
  }

  // Creates an array that contains all items of the given arrays
  function unionAll() {
    var union = [];
    for (var i = 0, l = arguments.length; i < l; i++)
      union = union.concat.apply(union, arguments[i]);
    return union;
  }

  // N3.js:lib/N3Parser.js<0.4.5>:58 with
  //   s/this\./Parser./g
  // ### `_setBase` sets the base IRI to resolve relative IRIs.
  Parser._setBase = function (baseIRI) {
    if (!baseIRI)
      baseIRI = null;

    // baseIRI '#' check disabled to allow -x 'data:text/shex,...#'
    // else if (baseIRI.indexOf('#') >= 0)
    //   throw new Error('Invalid base IRI ' + baseIRI);

    // Set base IRI and its components
    if (Parser._base = baseIRI) {
      Parser._basePath   = baseIRI.replace(/[^\/?]*(?:\?.*)?$/, '');
      baseIRI = baseIRI.match(schemeAuthority);
      Parser._baseRoot   = baseIRI[0];
      Parser._baseScheme = baseIRI[1];
    }
  }

  // N3.js:lib/N3Parser.js<0.4.5>:576 with
  //   s/this\./Parser./g
  //   s/token/iri/
  // ### `_resolveIRI` resolves a relative IRI token against the base path,
  // assuming that a base path has been set and that the IRI is indeed relative.
  function _resolveIRI (iri) {
    switch (iri[0]) {
    // An empty relative IRI indicates the base IRI
    case undefined: return Parser._base;
    // Resolve relative fragment IRIs against the base IRI
    case '#': return Parser._base + iri;
    // Resolve relative query string IRIs by replacing the query string
    case '?': return Parser._base.replace(/(?:\?.*)?$/, iri);
    // Resolve root-relative IRIs at the root of the base IRI
    case '/':
      // Resolve scheme-relative IRIs to the scheme
      return (iri[1] === '/' ? Parser._baseScheme : Parser._baseRoot) + _removeDotSegments(iri);
    // Resolve all other IRIs at the base IRI's path
    default: {
      return _removeDotSegments(Parser._basePath + iri);
    }
    }
  }

  // ### `_removeDotSegments` resolves './' and '../' path segments in an IRI as per RFC3986.
  function _removeDotSegments (iri) {
    // Don't modify the IRI if it does not contain any dot segments
    if (!dotSegments.test(iri))
      return iri;

    // Start with an imaginary slash before the IRI in order to resolve trailing './' and '../'
    var result = '', length = iri.length, i = -1, pathStart = -1, segmentStart = 0, next = '/';

    while (i < length) {
      switch (next) {
      // The path starts with the first slash after the authority
      case ':':
        if (pathStart < 0) {
          // Skip two slashes before the authority
          if (iri[++i] === '/' && iri[++i] === '/')
            // Skip to slash after the authority
            while ((pathStart = i + 1) < length && iri[pathStart] !== '/')
              i = pathStart;
        }
        break;
      // Don't modify a query string or fragment
      case '?':
      case '#':
        i = length;
        break;
      // Handle '/.' or '/..' path segments
      case '/':
        if (iri[i + 1] === '.') {
          next = iri[++i + 1];
          switch (next) {
          // Remove a '/.' segment
          case '/':
            result += iri.substring(segmentStart, i - 1);
            segmentStart = i + 1;
            break;
          // Remove a trailing '/.' segment
          case undefined:
          case '?':
          case '#':
            return result + iri.substring(segmentStart, i) + iri.substr(i + 1);
          // Remove a '/..' segment
          case '.':
            next = iri[++i + 1];
            if (next === undefined || next === '/' || next === '?' || next === '#') {
              result += iri.substring(segmentStart, i - 2);
              // Try to remove the parent path from result
              if ((segmentStart = result.lastIndexOf('/')) >= pathStart)
                result = result.substr(0, segmentStart);
              // Remove a trailing '/..' segment
              if (next !== '/')
                return result + '/' + iri.substr(i + 1);
              segmentStart = i + 1;
            }
          }
        }
      }
      next = iri[++i];
    }
    return result + iri.substring(segmentStart);
  }

  // Creates an expression with the given type and attributes
  function expression(expr, attr) {
    var expression = { expression: expr };
    if (attr)
      for (var a in attr)
        expression[a] = attr[a];
    return expression;
  }

  // Creates a path with the given type and items
  function path(type, items) {
    return { type: 'path', pathType: type, items: items };
  }

  // Creates a literal with the given value and type
  function createLiteral(value, type) {
    return { value: value, type: type };
  }

  // Creates a new blank node identifier
  function blank() {
    return '_:b' + blankId++;
  };
  var blankId = 0;
  Parser._resetBlanks = function () { blankId = 0; }
  Parser.reset = function () {
    Parser._prefixes = Parser._imports = Parser.valueExprDefns = Parser.shapes = Parser.productions = Parser.start = Parser.startActs = null; // Reset state.
    Parser._base = Parser._baseIRI = Parser._baseIRIPath = Parser._baseIRIRoot = null;
  }
  var _fileName; // for debugging
  Parser._setFileName = function (fn) { _fileName = fn; }

  // Regular expression and replacement strings to escape strings
  var stringEscapeReplacements = { '\\': '\\', "'": "'", '"': '"',
                                   't': '\t', 'b': '\b', 'n': '\n', 'r': '\r', 'f': '\f' },
      semactEscapeReplacements = { '\\': '\\', '%': '%' },
      pnameEscapeReplacements = {
        '\\': '\\', "'": "'", '"': '"',
        'n': '\n', 'r': '\r', 't': '\t', 'f': '\f', 'b': '\b',
        '_': '_', '~': '~', '.': '.', '-': '-', '!': '!', '$': '$', '&': '&',
        '(': '(', ')': ')', '*': '*', '+': '+', ',': ',', ';': ';', '=': '=',
        '/': '/', '?': '?', '#': '#', '@': '@', '%': '%',
      };


  // Translates string escape codes in the string into their textual equivalent
  function unescapeString(string, trimLength) {
    string = string.substring(trimLength, string.length - trimLength);
    return { value: ShExUtil.unescapeText(string, stringEscapeReplacements) };
  }

  function unescapeLangString(string, trimLength) {
    var at = string.lastIndexOf("@");
    var lang = string.substr(at);
    string = string.substr(0, at);
    var u = unescapeString(string, trimLength);
    return extend(u, { language: lowercase(lang.substr(1)) });
  }

  // Translates regular expression escape codes in the string into their textual equivalent
  function unescapeRegexp (regexp) {
    var end = regexp.lastIndexOf("/");
    var s = regexp.substr(1, end-1);
    var regexpEscapeReplacements = {
      '.': "\\.", '\\': "\\\\", '?': "\\?", '*': "\\*", '+': "\\+",
      '{': "\\{", '}': "\\}", '(': "\\(", ')': "\\)", '|': "\\|",
      '^': "\\^", '$': "\\$", '[': "\\[", ']': "\\]", '/': "\\/",
      't': '\\t', 'n': '\\n', 'r': '\\r', '-': "\\-", '/': '/'
    };
    s = ShExUtil.unescapeText(s, regexpEscapeReplacements)
    var ret = {
      pattern: s
    };
    if (regexp.length > end+1)
      ret.flags = regexp.substr(end+1);
    return ret;
  }

  // Convenience function to return object with p1 key, value p2
  function keyValObject(key, val) {
    var ret = {};
    ret[key] = val;
    return ret;
  }

  // Return object with p1 key, p2 string value
  function unescapeSemanticAction(key, string) {
    string = string.substring(1, string.length - 2);
    return {
      type: "SemAct",
      name: key,
      code: ShExUtil.unescapeText(string, semactEscapeReplacements)
    };
  }

  function error (msg) {
    Parser.reset();
    throw new Error(msg);
  }

  // Expand declared prefix or throw Error
  function expandPrefix (prefix) {
    if (!(prefix in Parser._prefixes))
      error('Parse error; unknown prefix: ' + prefix);
    return Parser._prefixes[prefix];
  }

  // Add a shape to the map
  function addShape (label, shape) {
    if (Parser.productions && label in Parser.productions)
      error("Structural error: "+label+" is a shape");
    if (!Parser.shapes)
      Parser.shapes = {};
    if (label in Parser.shapes) {
      if (Parser.options.duplicateShape === "replace")
        Parser.shapes[label] = shape;
      else if (Parser.options.duplicateShape !== "ignore")
        error("Parse error: "+label+" already defined");
    } else
      Parser.shapes[label] = shape;
  }

  // Add a production to the map
  function addProduction (label, production) {
    if (Parser.shapes && label in Parser.shapes)
      error("Structural error: "+label+" is a shape");
    if (!Parser.productions)
      Parser.productions = {};
    if (label in Parser.productions) {
      if (Parser.options.duplicateShape === "replace")
        Parser.productions[label] = production;
      else if (Parser.options.duplicateShape !== "ignore")
        error("Parse error: "+label+" already defined");
    } else
      Parser.productions[label] = production;
  }

  function shapeJunction (type, container, elts) {
    if (elts.length === 0) {
      return container;
    } else if (container.type === type) {
      container.shapeExprs = container.shapeExprs.concat(elts);
      return container;
    } else {
      return { type: type, shapeExprs: [container].concat(elts) };
    }
  }

  var EmptyObject = {  };
  var EmptyShape = { type: "Shape" };
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/**/
break;
case 1:return 73;
break;
case 2:return 74;
break;
case 3:return 179;
break;
case 4:return 75;
break;
case 5:return 193;
break;
case 6:return 151;
break;
case 7:return 100;
break;
case 8:return 99;
break;
case 9:return 91;
break;
case 10:return 'ANON';
break;
case 11:return 19;
break;
case 12:return 21;
break;
case 13:return 191;
break;
case 14:return 92;
break;
case 15:return 194;
break;
case 16:return 185;
break;
case 17: yy_.yytext = unescapeLangString(yy_.yytext, 3); return 186; 
break;
case 18: yy_.yytext = unescapeLangString(yy_.yytext, 3); return 186; 
break;
case 19: yy_.yytext = unescapeLangString(yy_.yytext, 1); return 186; 
break;
case 20: yy_.yytext = unescapeLangString(yy_.yytext, 1); return 186; 
break;
case 21: yy_.yytext = unescapeString(yy_.yytext, 3); return 101; 
break;
case 22: yy_.yytext = unescapeString(yy_.yytext, 3); return 101; 
break;
case 23: yy_.yytext = unescapeString(yy_.yytext, 1); return 101; 
break;
case 24: yy_.yytext = unescapeString(yy_.yytext, 1); return 101; 
break;
case 25:return 18;
break;
case 26:return 20;
break;
case 27:return 23;
break;
case 28:return 26;
break;
case 29:return 37;
break;
case 30:return 34;
break;
case 31:return 118;
break;
case 32:return 121;
break;
case 33:return 76;
break;
case 34:return 88;
break;
case 35:return 87;
break;
case 36:return 89;
break;
case 37:return 52;
break;
case 38:return 49;
break;
case 39:return 41;
break;
case 40:return 103;
break;
case 41:return 104;
break;
case 42:return 105;
break;
case 43:return 106;
break;
case 44:return 93;
break;
case 45:return 94;
break;
case 46:return 95;
break;
case 47:return 107;
break;
case 48:return 108;
break;
case 49:return 27;
break;
case 50:return 181;
break;
case 51:return 110;
break;
case 52:return 112;
break;
case 53:return 180;
break;
case 54:return '||';
break;
case 55:return 129;
break;
case 56:return 134;
break;
case 57:return 66;
break;
case 58:return 67;
break;
case 59:return 153;
break;
case 60:return 155;
break;
case 61:return 139;
break;
case 62:return '!';
break;
case 63:return 102;
break;
case 64:return 152;
break;
case 65:return 68;
break;
case 66:return 167;
break;
case 67:return 135;
break;
case 68:return 148;
break;
case 69:return 149;
break;
case 70:return 150;
break;
case 71:return 168;
break;
case 72:return 184;
break;
case 73:return 189;
break;
case 74:return 190;
break;
case 75:return 7;
break;
case 76:return 'unexpected word "'+yy_.yytext+'"';
break;
case 77:return 'invalid character '+yy_.yytext;
break;
}
},
rules: [/^(?:\s+|(#[^\u000a\u000d]*))/,/^(?:(@(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:)(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|:|[0-9]|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))*))))/,/^(?:(@((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:)))/,/^(?:(@([A-Za-z])+((-([0-9A-Za-z])+))*))/,/^(?:@)/,/^(?:(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:)(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|:|[0-9]|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))*)))/,/^(?:(\{((([+-])?([0-9])+))((,(((([+-])?([0-9])+))|\*)?))?\}))/,/^(?:(([+-])?((([0-9])+\.([0-9])*(([Ee]([+-])?([0-9])+)))|((\.)?([0-9])+(([Ee]([+-])?([0-9])+))))))/,/^(?:(([+-])?([0-9])*\.([0-9])+))/,/^(?:(([+-])?([0-9])+))/,/^(?:{ANON})/,/^(?:(<([^\u0000-\u0020<>\"{}|^`\\]|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*>))/,/^(?:((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:))/,/^(?:a\b)/,/^(?:(\/([^\u002f\u005C\u000A\u000D]|\\[nrt\\|.?*+(){}$\u002D\u005B\u005D\u005E\/]|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))+\/[smix]*))/,/^(?:(_:((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|[0-9])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?))/,/^(?:(\{([^%\\]|\\[%\\]|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*%\}))/,/^(?:('''(('|'')?([^\'\\]|(\\[\"\'\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*'''(@([A-Za-z])+((-([0-9A-Za-z])+))*)))/,/^(?:("""(("|"")?([^\"\\]|(\\[\"\'\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*"""(@([A-Za-z])+((-([0-9A-Za-z])+))*)))/,/^(?:('([^\u0027\u005c\u000a\u000d]|(\\[\"\'\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*'(@([A-Za-z])+((-([0-9A-Za-z])+))*)))/,/^(?:("([^\u0022\u005c\u000a\u000d]|(\\[\"\'\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*"(@([A-Za-z])+((-([0-9A-Za-z])+))*)))/,/^(?:('''(('|'')?([^\'\\]|(\\[\"\'\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*'''))/,/^(?:("""(("|"")?([^\"\\]|(\\[\"\'\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*"""))/,/^(?:('([^\u0027\u005c\u000a\u000d]|(\\[\"\'\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*'))/,/^(?:("([^\u0022\u005c\u000a\u000d]|(\\[\"\'\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*"))/,/^(?:([Bb][Aa][Ss][Ee]))/,/^(?:([Pp][Rr][Ee][Ff][Ii][Xx]))/,/^(?:([iI][mM][pP][oO][rR][tT]))/,/^(?:([sS][tT][aA][rR][tT]))/,/^(?:([eE][xX][tT][eE][rR][nN][aA][lL]))/,/^(?:([Aa][Bb][Ss][Tt][Rr][Aa][Cc][Tt]))/,/^(?:([Cc][Ll][Oo][Ss][Ee][Dd]))/,/^(?:([Ee][Xx][Tt][Rr][Aa]))/,/^(?:([Ll][Ii][Tt][Ee][Rr][Aa][Ll]))/,/^(?:([Bb][Nn][Oo][Dd][Ee]))/,/^(?:([Ii][Rr][Ii]))/,/^(?:([Nn][Oo][Nn][Ll][Ii][Tt][Ee][Rr][Aa][Ll]))/,/^(?:([Aa][Nn][Dd]))/,/^(?:([Oo][Rr]))/,/^(?:([No][Oo][Tt]))/,/^(?:([Mm][Ii][Nn][Ii][Nn][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Mm][Ii][Nn][Ee][Xx][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Mm][Aa][Xx][Ii][Nn][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Mm][Aa][Xx][Ee][Xx][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Ll][Ee][Nn][Gg][Tt][Hh]))/,/^(?:([Mm][Ii][Nn][Ll][Ee][Nn][Gg][Tt][Hh]))/,/^(?:([Mm][Aa][Xx][Ll][Ee][Nn][Gg][Tt][Hh]))/,/^(?:([Tt][Oo][Tt][Aa][Ll][Dd][Ii][Gg][Ii][Tt][Ss]))/,/^(?:([Ff][Rr][Aa][Cc][Tt][Ii][Oo][Nn][Dd][Ii][Gg][Ii][Tt][Ss]))/,/^(?:=)/,/^(?:\/\/)/,/^(?:\{)/,/^(?:\})/,/^(?:&)/,/^(?:\|\|)/,/^(?:\|)/,/^(?:,)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\$)/,/^(?:!)/,/^(?:\^\^)/,/^(?:\^)/,/^(?:\.)/,/^(?:~)/,/^(?:;)/,/^(?:\*)/,/^(?:\+)/,/^(?:\?)/,/^(?:-)/,/^(?:%)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:$)/,/^(?:[a-zA-Z0-9_-]+)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = ShExJison;
exports.Parser = ShExJison.Parser;
exports.parse = function () { return ShExJison.parse.apply(ShExJison, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}