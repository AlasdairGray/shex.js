/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[6,23,25,26,27,28,29,33,137,138,140],$V1=[1,22],$V2=[1,9],$V3=[1,24],$V4=[1,10],$V5=[1,26],$V6=[1,15],$V7=[1,17],$V8=[1,25],$V9=[1,27],$Va=[1,28],$Vb=[6,23,25,26,27,28,29,33,137,138],$Vc=[35,41,43,45],$Vd=[2,33],$Ve=[6,23,25,26,27,28,29,33,35,37,41,43,45,51,55,60,64,90,95,97,100,101,102,111,114,115,116,117,137,138,140],$Vf=[6,19,22,23,25,26,27,28,29,33,35,37,41,43,45,51,55,60,63,64,74,75,81,83,84,85,90,91,92,93,95,97,99,100,101,102,105,106,107,108,109,110,111,114,115,116,117,126,129,130,131,132,133,134,135,136,137,138,140,141],$Vg=[2,162],$Vh=[1,73],$Vi=[1,63],$Vj=[1,68],$Vk=[1,69],$Vl=[1,70],$Vm=[1,71],$Vn=[1,74],$Vo=[1,75],$Vp=[1,76],$Vq=[6,23,25,26,27,28,29,33,37,51,55,60,64,137,138,140],$Vr=[1,91],$Vs=[1,88],$Vt=[1,94],$Vu=[1,95],$Vv=[1,93],$Vw=[6,23,25,26,27,28,29,33,37,51,55,60,64,95,97,100,101,102,105,106,107,108,109,110,111,114,115,116,117,137,138,140],$Vx=[2,86],$Vy=[6,23,25,26,27,28,29,33,37,51,55,60,64,111,114,115,116,117,137,138,140],$Vz=[1,106],$VA=[1,107],$VB=[1,109],$VC=[1,110],$VD=[1,111],$VE=[6,23,25,26,27,28,29,33,35,37,41,43,45,51,55,60,64,91,92,93,95,97,100,101,102,111,114,115,116,117,137,138,140],$VF=[6,23,25,26,27,28,29,33,37,51,55,60,64,90,95,97,100,101,102,111,114,115,116,117,137,138,140],$VG=[26,28,64,81,99,129,130,131,132,133,134,135,136,137],$VH=[37,51,64],$VI=[37,51,55,64],$VJ=[37,51,55,60,64],$VK=[23,26,28,35,41,43,45,63,74,75,81,83,84,85,91,92,93,99,129,130,131,132,133,134,135,136,137],$VL=[26,28,74,137],$VM=[26,28,35,41,43,45,137,138],$VN=[26,28,35,41,43,45,74,137],$VO=[1,135],$VP=[1,136],$VQ=[1,137],$VR=[1,138],$VS=[1,139],$VT=[1,140],$VU=[6,23,25,26,27,28,29,33,37,51,55,60,64,95,97,100,101,102,111,114,115,116,117,137,138,140],$VV=[1,144],$VW=[1,145],$VX=[1,146],$VY=[1,147],$VZ=[1,159],$V_=[1,160],$V$=[1,161],$V01=[1,162],$V11=[1,163],$V21=[37,51,55,60,64,111,114,115,116,117,140],$V31=[2,62],$V41=[6,23,25,26,27,28,29,33,37,51,55,60,64,81,95,97,99,100,101,102,105,106,107,108,109,110,111,114,115,116,117,127,128,129,130,131,132,133,134,135,136,137,138,140],$V51=[1,182],$V61=[26,28,37,51,55,60,64,81,99,111,114,115,116,117,129,130,131,132,133,134,135,136,137,140],$V71=[37,51,55,60,64,111,140],$V81=[2,60],$V91=[1,190],$Va1=[1,191],$Vb1=[1,192],$Vc1=[1,193],$Vd1=[37,51,55,60,64,140],$Ve1=[1,196],$Vf1=[26,28,64,81,99,126,129,130,131,132,133,134,135,136,137];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"shexDoc":3,"Qdirective_E_Star":4,"Q_O_Qstart_E_Or_Qshape_E_Or_QvalueClassDefinition_E_Or_QstartActions_E_S_Qstatement_E_Star_C_E_Opt":5,"EOF":6,"directive":7,"O_Qstart_E_Or_Qshape_E_Or_QvalueClassDefinition_E_Or_QstartActions_E_C":8,"start":9,"shape":10,"valueClassDefinition":11,"startActions":12,"Qstatement_E_Star":13,"statement":14,"O_Qstart_E_Or_Qshape_E_Or_QvalueClassDefinition_E_Or_QstartActions_E_S_Qstatement_E_Star_C":15,"baseDecl":16,"prefixDecl":17,"valueClassLabel":18,"=":19,"valueClass":20,"semanticActions":21,"EXTERN":22,"$":23,"iri":24,"IT_BASE":25,"IRIREF":26,"IT_PREFIX":27,"PNAME_NS":28,"IT_start":29,"O_QshapeLabel_E_Or_QshapeDefinition_E_S_QsemanticActions_E_C":30,"shapeLabel":31,"shapeDefinition":32,"IT_VIRTUAL":33,"Q_O_QincludeSet_E_Or_QinclPropertySet_E_Or_QIT_CLOSED_E_C_E_Star":34,"{":35,"QoneOfShape_E_Opt":36,"}":37,"O_QincludeSet_E_Or_QinclPropertySet_E_Or_QIT_CLOSED_E_C":38,"includeSet":39,"inclPropertySet":40,"IT_CLOSED":41,"oneOfShape":42,"&":43,"QshapeLabel_E_Plus":44,"IT_EXTRA":45,"Qpredicate_E_Plus":46,"predicate":47,"someOfShape":48,"Q_O_QGT_PIPE_E_S_QsomeOfShape_E_C_E_Star":49,"O_QGT_PIPE_E_S_QsomeOfShape_E_C":50,"|":51,"groupShape":52,"Q_O_QGT_OR_E_S_QgroupShape_E_C_E_Star":53,"O_QGT_OR_E_S_QgroupShape_E_C":54,"||":55,"unaryShape":56,"Q_O_QGT_COMMA_E_S_QunaryShape_E_C_E_Star":57,"QGT_COMMA_E_Opt":58,"O_QGT_COMMA_E_S_QunaryShape_E_C":59,",":60,"tripleConstraint":61,"include":62,"(":63,")":64,"Qcardinality_E_Opt":65,"Qannotation_E_Star":66,"cardinality":67,"annotation":68,"blankNode":69,"valueClassOrRef":70,"senseFlags":71,"^":72,"!":73,"a":74,"IT_LITERAL":75,"QxsFacet_E_Star":76,"O_QIT_IRI_E_Or_QIT_BNODE_E_Or_QIT_NONLITERAL_E_C":77,"QstringFacet_E_Plus":78,"groupShapeConstr":79,"valueSet":80,".":81,"xsFacet":82,"IT_IRI":83,"IT_BNODE":84,"IT_NONLITERAL":85,"stringFacet":86,"shapeOrRef":87,"Q_O_QIT_OR_E_S_QshapeOrRef_E_C_E_Star":88,"O_QIT_OR_E_S_QshapeOrRef_E_C":89,"IT_OR":90,"ATPNAME_LN":91,"ATPNAME_NS":92,"@":93,"numericFacet":94,"IT_PATTERN":95,"string":96,"~":97,"stringLength":98,"INTEGER":99,"IT_LENGTH":100,"IT_MINLENGTH":101,"IT_MAXLENGTH":102,"numericRange":103,"numericLength":104,"IT_MININCLUSIVE":105,"IT_MINEXCLUSIVE":106,"IT_MAXINCLUSIVE":107,"IT_MAXEXCLUSIVE":108,"IT_TOTALDIGITS":109,"IT_FRACTIONDIGITS":110,";":111,"O_Qiri_E_Or_Qliteral_E_C":112,"literal":113,"*":114,"+":115,"?":116,"REPEAT_RANGE":117,"Qvalue_E_Star":118,"value":119,"iriRange":120,"Q_O_Q_TILDE_E_S_Qexclusion_E_Star_C_E_Opt":121,"Qexclusion_E_Plus":122,"Qexclusion_E_Star":123,"exclusion":124,"O_Q_TILDE_E_S_Qexclusion_E_Star_C":125,"-":126,"LANGTAG":127,"^^":128,"DECIMAL":129,"DOUBLE":130,"IT_true":131,"IT_false":132,"STRING_LITERAL1":133,"STRING_LITERAL2":134,"STRING_LITERAL_LONG1":135,"STRING_LITERAL_LONG2":136,"PNAME_LN":137,"BLANK_NODE_LABEL":138,"codeDecl":139,"%":140,"CODE":141,"QcodeDecl_E_Plus":142,"QcodeDecl_E_Star":143,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",19:"=",22:"EXTERN",23:"$",25:"IT_BASE",26:"IRIREF",27:"IT_PREFIX",28:"PNAME_NS",29:"IT_start",33:"IT_VIRTUAL",35:"{",37:"}",41:"IT_CLOSED",43:"&",45:"IT_EXTRA",51:"|",55:"||",60:",",63:"(",64:")",72:"^",73:"!",74:"a",75:"IT_LITERAL",81:".",83:"IT_IRI",84:"IT_BNODE",85:"IT_NONLITERAL",90:"IT_OR",91:"ATPNAME_LN",92:"ATPNAME_NS",93:"@",95:"IT_PATTERN",97:"~",99:"INTEGER",100:"IT_LENGTH",101:"IT_MINLENGTH",102:"IT_MAXLENGTH",105:"IT_MININCLUSIVE",106:"IT_MINEXCLUSIVE",107:"IT_MAXINCLUSIVE",108:"IT_MAXEXCLUSIVE",109:"IT_TOTALDIGITS",110:"IT_FRACTIONDIGITS",111:";",114:"*",115:"+",116:"?",117:"REPEAT_RANGE",126:"-",127:"LANGTAG",128:"^^",129:"DECIMAL",130:"DOUBLE",131:"IT_true",132:"IT_false",133:"STRING_LITERAL1",134:"STRING_LITERAL2",135:"STRING_LITERAL_LONG1",136:"STRING_LITERAL_LONG2",137:"PNAME_LN",138:"BLANK_NODE_LABEL",140:"%",141:"CODE"},
productions_: [0,[3,3],[4,0],[4,2],[8,1],[8,1],[8,1],[8,1],[13,0],[13,2],[15,2],[5,0],[5,1],[14,1],[14,1],[14,1],[14,1],[7,1],[7,1],[11,4],[11,2],[18,2],[16,2],[17,3],[9,3],[30,1],[30,2],[10,3],[10,4],[32,4],[38,1],[38,1],[38,1],[34,0],[34,2],[36,0],[36,1],[39,2],[44,1],[44,2],[40,2],[46,1],[46,2],[42,2],[50,2],[49,0],[49,2],[48,2],[54,2],[53,0],[53,2],[52,3],[59,2],[57,0],[57,2],[58,0],[58,1],[56,1],[56,1],[56,6],[65,0],[65,1],[66,0],[66,2],[62,2],[31,1],[31,1],[61,5],[61,6],[71,1],[71,2],[71,1],[71,2],[47,1],[47,1],[70,1],[70,1],[20,2],[20,1],[20,2],[20,2],[20,3],[20,2],[20,1],[20,1],[20,1],[76,0],[76,2],[77,1],[77,1],[77,1],[78,1],[78,2],[79,2],[89,2],[88,0],[88,2],[87,1],[87,1],[87,2],[87,1],[82,1],[82,1],[86,2],[86,2],[86,2],[98,1],[98,1],[98,1],[94,2],[94,2],[103,1],[103,1],[103,1],[103,1],[104,1],[104,1],[68,3],[112,1],[112,1],[67,1],[67,1],[67,1],[67,1],[80,3],[118,0],[118,2],[119,1],[119,1],[120,2],[120,2],[123,0],[123,2],[125,2],[121,0],[121,1],[122,1],[122,2],[124,2],[124,3],[113,1],[113,2],[113,3],[113,1],[113,1],[113,1],[113,1],[113,1],[96,1],[96,1],[96,1],[96,1],[24,1],[24,1],[24,1],[69,1],[139,2],[139,3],[12,1],[142,1],[142,2],[21,1],[143,0],[143,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        var valueClasses = Parser.valueClasses ? { valueClasses: Parser.valueClasses } : {};
        var startObj = Parser.start ? { start: Parser.start } : {};
        var startAct = Parser.startAct ? { startAct: Parser.startAct } : {};
        var ret = extend({ type: 'schema', prefixes: Parser.prefixes || {} }, // Build return object from
                         valueClasses, startAct, startObj,                    // components in parser state
                         {shapes: Parser.shapes});                            // maintaining intuitve order.
        Parser.prefixes = Parser.valueClasses = Parser.shapes = Parser.start = Parser.startAct = null; // Reset state.
        base = basePath = baseRoot = '';
        return ret;
      
break;
case 19:
 // t: 1val1vsMinusiri3
        if (Parser.valueClasses === null || Parser.valueClasses === undefined)
          Parser.valueClasses = {  };
        Parser.valueClasses[$$[$0-3]] = $$[$0-1];
      
break;
case 20:
 // t: @@
        if (Parser.valueClasses === null || Parser.valueClasses === undefined)
          Parser.valueClasses = {  };
        Parser.valueClasses[$$[$0-1]] = null;
      
break;
case 21:
this.$ = $$[$0] // t: 1val1vsMinusiri3;
break;
case 22:
 // t: @@
        base = resolveIRI($$[$0])
        basePath = base.replace(/[^\/]*$/, '');
        baseRoot = base.match(/^(?:[a-z]+:\/*)?[^\/]*/)[0];
      
break;
case 23:
 // t: ShExParser-test.js/with pre-defined prefixes
        if (!Parser.prefixes) Parser.prefixes = {};
        $$[$0-1] = $$[$0-1].substr(0, $$[$0-1].length - 1);
        $$[$0] = resolveIRI($$[$0]);
        Parser.prefixes[$$[$0-1]] = $$[$0];
      
break;
case 24:

        if (Parser.start)
	  error("Parse error: start alread defined as " + Parser.start);
        Parser.start = $$[$0]; // t: startInline
      
break;
case 26:
 // t: startInline / startInline
        addShape(this.$ = blank(), extend($$[$0-1], $$[$0]));
    
break;
case 27:
 // t: 1dot
	addShape($$[$0-2], extend($$[$0-1], $$[$0]));
    
break;
case 28:
 // t: 1dotVirtual
        // sneak 'virtual' in after 'type'
        // Type will be overwritten.
        addShape($$[$0-2], extend({type: null, virtual: true}, $$[$0-1], $$[$0])) // $$[$0]: t: 1dotVirtualShapeCode1
    
break;
case 29:
 // t: 1dotInherit3
	var exprObj = $$[$0-1] ? { expression: $$[$0-1] } : {}; // t: 0, 0Inherit1
        this.$ = extend({ type: "shape"}, exprObj, $$[$0-3]);
      
break;
case 30:
this.$ = [ 'inherit', $$[$0] ] // t: 1dotInherit1;
break;
case 31:
this.$ = [ 'extra', $$[$0] ] // t: 1dotExtra1, 3groupdot3Extra, 3groupdotExtra3;
break;
case 32:
this.$ = [ 'closed', true ] // t: 1dotClosed;
break;
case 33:
this.$ = {};
break;
case 34:

      if ($$[$0][0] === 'closed')
        $$[$0-1]['closed'] = true; // t: 1dotClosed
      else if ($$[$0][0] in $$[$0-1])
        $$[$0-1][$$[$0][0]] = unionAll($$[$0-1][$$[$0][0]], $$[$0][1]); // t: 1dotInherit3, 3groupdot3Extra, 3groupdotExtra3
      else
        $$[$0-1][$$[$0][0]] = $$[$0][1]; // t: 1dotInherit1
      this.$ = $$[$0-1];
    
break;
case 37:
this.$ = $$[$0] // t: 1dotInherit1, 1dot3Inherit, 1dotInherit3;
break;
case 38:
this.$ = [$$[$0]] // t: 1dotInherit1, 1dot3Inherit, 1dotInherit3;
break;
case 39:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1dotInherit3;
break;
case 40:
this.$ = $$[$0] // t: 1dotExtra1, 3groupdot3Extra;
break;
case 41:
this.$ = [$$[$0]] // t: 1dotExtra1, 3groupdot3Extra, 3groupdotExtra3;
break;
case 42:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 3groupdotExtra3;
break;
case 43:
this.$ = $$[$0].length ? { type: "oneOf", expressions: unionAll([$$[$0-1]], $$[$0]) } : $$[$0-1] // t: 2oneOfdot;
break;
case 44:
this.$ = $$[$0] // t: 2oneOfdot;
break;
case 45:
this.$ = [] //  t: 2oneOfdot;
break;
case 46:
this.$ = appendTo($$[$0-1], $$[$0]) //  t: 2oneOfdot;
break;
case 47:
this.$ = $$[$0].length ? { type: "someOf", expressions: unionAll([$$[$0-1]], $$[$0]) } : $$[$0-1] // t: 2someOfdot;
break;
case 48:
this.$ = $$[$0] // t: 2someOfdot;
break;
case 49:
this.$ = [] // t: 2someOfdot;
break;
case 50:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 2someOfdot;
break;
case 51:
this.$ = $$[$0-1].length ? { type: "group", expressions: unionAll([$$[$0-2]], $$[$0-1]) } : $$[$0-2] // t: 2groupOfdot;
break;
case 52:
this.$ = $$[$0] // t: 2groupOfdot;
break;
case 53:
this.$ = [] // t: 2groupOfdot;
break;
case 54:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 2groupOfdot;
break;
case 59:

        var hasCard = Object.keys($$[$0-2]).length;
        var annot = $$[$0-1].length ? { annotations: $$[$0-1] } : {}; // t: open3groupdotcloseAnnot3
        if ($$[$0-4].type === 'group') {
          if (hasCard && ('min' in $$[$0-4] || 'max' in $$[$0-4])
              || $$[$0] && 'semAct' in $$[$0-4]) {
            this.$ = extend({ type: "group" }, $$[$0-2], { expressions: [$$[$0-4]] }, annot, $$[$0]); // t: openopen1dotcloseCode1closeCode2
          } else {
            this.$ = extend($$[$0-4], $$[$0-2], annot, $$[$0]); // t: open3groupdotclose
          }
        // simplifying } else if ($$[$0-4].type !== 'tripleConstraint' && (hasCard || $$[$0-1].length || $$[$0])) {
        } else if (hasCard || $$[$0-1].length || $$[$0]) {
          this.$ = extend({ type: "group" }, $$[$0-2], { expressions: [$$[$0-4]] }, annot, $$[$0]); // t: open1dotcloseCode1
        } else {
          this.$ = $$[$0-4]; // t: open1dotclose
          if ($$[$0-1].length) // !!! when does this happen?
            this.$['annotations'] = $$[$0-1]; // t: @@
        }
     
break;
case 60:
this.$ = {} // t: 1dot;
break;
case 62:
this.$ = [] // t: 1dot, 1dotAnnot3;
break;
case 63:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1dotAnnot3;
break;
case 64:
this.$ = { type: "include", "include": $$[$0] } // t: 2groupInclude1;
break;
case 67:

        // $$[$0]: t: 1dotCode1
        this.$ = extend({ type: "tripleConstraint", predicate: $$[$0-4]}, $$[$0-3], $$[$0-1], $$[$0]); // t: 1dot
        if ($$[$0-2].length)
          this.$['annotations'] = $$[$0-2]; // t: 1dotAnnot3
      
break;
case 68:

        // %6: t: 1inversedotCode1
        this.$ = extend({ type: "tripleConstraint" }, $$[$0-5], { predicate: $$[$0-4] }, $$[$0-3], $$[$0-2], $$[$0]); // t: 1inversedot, 1negatedinversedot
        if ($$[$0-1].length)
          this.$['annotations'] = $$[$0-1]; // t: 1inversedotAnnot3
      
break;
case 69:
this.$ = { inverse: true } // t: 1inversedot;
break;
case 70:
this.$ = { inverse: true, negated: true } // t: 1negatedinversedot;
break;
case 71:
this.$ = { negated: true } // t: 1negateddot;
break;
case 72:
this.$ = { inverse: true, negated: true } // t: 1inversenegateddot;
break;
case 74:
this.$ = RDF_TYPE // t: 1AvalA;
break;
case 75:
this.$ = { value: $$[$0] } // t: 1dot;
break;
case 76:
this.$ = { valueClassRef: $$[$0] } // t: 1val1vsMinusiri3;
break;
case 77:
this.$ = extend({ type: "valueClass", nodeKind: "literal" }, $$[$0]) // t: 1literalPattern;
break;
case 78:
this.$ = { type: "valueClass", nodeKind: $$[$0] } // t: 1iriPattern;
break;
case 79:
this.$ = extend({ type: "valueClass", nodeKind: $$[$0-1] }, $$[$0]) // t: 1iriPattern;
break;
case 80:
this.$ = { type: "valueClass", nodeKind: $$[$0-1], reference: $$[$0] } // t: 1iriRef1;
break;
case 81:
this.$ = extend({ type: "valueClass", nodeKind: $$[$0-2], reference: $$[$0-1] }, $$[$0]) // t: 1iriRefLength1;
break;
case 82:

        if (numericDatatypes.indexOf($$[$0-1]) === -1)
          numericFacets.forEach(function (facet) {
            if (facet in $$[$0])
	      error("Parse error: facet "+facet+" not allowed for unknown datatype " + $$[$0-1]);
	  });
        this.$ = extend({ type: "valueClass", datatype: $$[$0-1] }, $$[$0]) // t: 1datatype
      
break;
case 83:
this.$ = { type: "valueClass", reference: $$[$0] } // t: 1dotRef1;
break;
case 84:
this.$ = { type: "valueClass", values: $$[$0] } // t: 1val1IRIREF;
break;
case 85:
this.$ = { type: "valueClass" } // t: 1dot;
break;
case 86:
this.$ = {} // t: 1literalPattern;
break;
case 87:

        if (Object.keys($$[$0-1]).indexOf(Object.keys($$[$0])[0]) !== -1) {
          error("Parse error: facet "+Object.keys($$[$0])[0]+" defined multiple times");
        }
        this.$ = extend($$[$0-1], $$[$0]) // t: 1literalLength
      
break;
case 88:
this.$ = 'iri' // t: 1iriPattern;
break;
case 89:
this.$ = 'bnode' // t: 1bnodeLength;
break;
case 90:
this.$ = 'nonliteral' // t: 1nonliteralLength;
break;
case 92:

        if (Object.keys($$[$0-1]).indexOf(Object.keys($$[$0])[0]) !== -1) {
          error("Parse error: facet "+Object.keys($$[$0])[0]+" defined multiple times");
        }
        this.$ = extend($$[$0-1], $$[$0])
      
break;
case 93:
this.$ = $$[$0].length ? { type: "or", disjuncts: unionAll([$$[$0-1]], $$[$0]) } : $$[$0-1] // t: 1dotRefOr3/1dotRef1;
break;
case 94:
this.$ = $$[$0] // t: 1dotRefOr3;
break;
case 95:
this.$ = [] // t: 1dotRefOr3;
break;
case 96:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1dotRefOr3;
break;
case 97:
 // t: 1dotRefLNex
        $$[$0] = $$[$0].substr(1, $$[$0].length-1);
        var namePos = $$[$0].indexOf(':');
        this.$ = resolveIRI(expandPrefix($$[$0].substr(0, namePos)) + $$[$0].substr(namePos + 1));
      
break;
case 98:
 // t: 1dotRefNS1
        $$[$0] = $$[$0].substr(1, $$[$0].length-1);
        this.$ = resolveIRI(expandPrefix($$[$0].substr(0, $$[$0].length - 1)));
      
break;
case 99:
 this.$ = $$[$0]; 
break;
case 100:
 // t: 1dotInline1
        addShape(this.$ = blank(), $$[$0]);
      
break;
case 103: case 104:
this.$ = { pattern: $$[$0].substr(1, $$[$0].length-2) } // t: 1literalPattern;
break;
case 105:
this.$ = keyInt($$[$0-1], $$[$0]) // t: 1literalLength;
break;
case 106:
this.$ = "length" // t: 1literalLength;
break;
case 107:
this.$ = "minlength" // t: 1literalMinlength;
break;
case 108:
this.$ = "maxlength" // t: 1literalMaxlength;
break;
case 109:
this.$ = keyInt($$[$0-1], $$[$0]) // t: 1literalMininclusive;
break;
case 110:
this.$ = keyInt($$[$0-1], $$[$0]) // t: 1literalTotaldigits;
break;
case 111:
this.$ = "mininclusive" // t: 1literalMininclusive;
break;
case 112:
this.$ = "minexclusive" // t: 1literalMinexclusive;
break;
case 113:
this.$ = "maxinclusive" // t: 1literalMaxinclusive;
break;
case 114:
this.$ = "maxexclusive" // t: 1literalMaxexclusive;
break;
case 115:
this.$ = "totaldigits" // t: 1literalTotaldigits;
break;
case 116:
this.$ = "fractiondigits" // t: 1literalFractiondigits;
break;
case 117:
this.$ = [$$[$0-1], $$[$0]] // t: 1dotAnnotIRIREF;
break;
case 120:
this.$ = { min:0 } // t: 1cardStar;
break;
case 121:
this.$ = { min:1 } // t: 1cardPlus;
break;
case 122:
this.$ = { min:0, max:1 } // t: 1cardOpt;
break;
case 123:

        $$[$0] = $$[$0].substr(1, $$[$0].length-2);
        var nums = $$[$0].match(/(\d+)/g);
        this.$ = { min: parseInt(nums[0], 10) }; // t: 1card2blank, 1card2Star
        if (nums.length === 2)
            this.$["max"] = parseInt(nums[1], 10); // t: 1card23
        else if ($$[$0].indexOf(',') === -1) // t: 1card2
            this.$["max"] = parseInt(nums[0], 10);
      
break;
case 124:
this.$ = $$[$0-1] // t: 1val1IRIREF;
break;
case 125:
this.$ = [] // t: 1val1IRIREF;
break;
case 126:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1val1IRIREF;
break;
case 129:

        if ($$[$0]) {
          this.$ = {  // t: 1val1iriStem, 1val1iriStemMinusiri3
            type: "stemRange",
            stem: $$[$0-1]
          };
          if ($$[$0].length)
            this.$["exclusions"] = $$[$0]; // t: 1val1iriStemMinusiri3
        } else {
          this.$ = $$[$0-1]; // t: 1val1IRIREF, 1AvalA
        }
      
break;
case 130:
this.$ = { type: "stemRange", stem: { type: "wildcard" }, exclusions: $$[$0] } // t:1val1dotMinusiri3, 1val1dotMinusiriStem3;
break;
case 131:
this.$ = [] // t: 1val1iriStem, 1val1iriStemMinusiri3;
break;
case 132:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1val1iriStemMinusiri3;
break;
case 133: case 138:
this.$ = $$[$0] // t: 1val1iriStemMinusiri3;
break;
case 136:
this.$ = [$$[$0]] // t:1val1dotMinusiri3, 1val1dotMinusiriStem3;
break;
case 137:
this.$ = appendTo($$[$0-1], $$[$0]) // t:1val1dotMinusiri3, 1val1dotMinusiriStem3;
break;
case 139:
this.$ = { type: "stem", stem: $$[$0-1] } // t: 1val1iriStemMinusiriStem3;
break;
case 141:
this.$ = $$[$0-1] + lowercase($$[$0]) // t: 1val1LANGTAG;
break;
case 142:
this.$ = $$[$0-2] + '^^' + $$[$0] // t: 1val1Datatype;
break;
case 143:
this.$ = createLiteral($$[$0], XSD_INTEGER) // t: 1val1INTEGER;
break;
case 144:
this.$ = createLiteral($$[$0], XSD_DECIMAL) // t: 1val1DECIMAL;
break;
case 145:
this.$ = createLiteral($$[$0].toLowerCase(), XSD_DOUBLE) // t: 1val1DOUBLE;
break;
case 146:
this.$ = XSD_TRUE // t: 1val1true;
break;
case 147:
this.$ = XSD_FALSE // t: 1val1false;
break;
case 148:
this.$ = unescapeString($$[$0], 1) // t: 1val1STRING_LITERAL1;
break;
case 149:
this.$ = unescapeString($$[$0], 1) // t: 1val1STRING_LITERAL2;
break;
case 150:
this.$ = unescapeString($$[$0], 3) // t: 1val1STRING_LITERAL_LONG1;
break;
case 151:
this.$ = unescapeString($$[$0], 3) // t: 1val1STRING_LITERAL_LONG2;
break;
case 152:
this.$ = resolveIRI(unescape($$[$0], irirefEscapeSequence)) // t: 1dot;
break;
case 153:
 // t:1dotPNex, 1dotPNdefault, ShExParser-test.js/with pre-defined prefixes
        var namePos = $$[$0].indexOf(':');
        this.$ = resolveIRI(expandPrefix($$[$0].substr(0, namePos)) + $$[$0].substr(namePos + 1));
    
break;
case 154:
 // t: 1dotNS2, 1dotNSdefault, ShExParser-test.js/PNAME_NS with pre-defined prefixes
        this.$ = resolveIRI(expandPrefix($$[$0].substr(0, $$[$0].length - 1)));
    
break;
case 156:
this.$ = unescapeSemanticAction('', $$[$0]) // t: 1dotUnlabeledCode1;
break;
case 157:
this.$ = unescapeSemanticAction($$[$0-1], $$[$0]) // t: 1dotCode1;
break;
case 158:

        Parser.startAct = $$[$0]; // t: startCode1
      
break;
case 160:
this.$ = extend($$[$0-1], $$[$0]) // t: startCode3;
break;
case 161:
this.$ = Object.keys($$[$0]).length ? { semAct: $$[$0] } : null; // t: 1dotCode1/2oneOfDot;
break;
case 162:
this.$ = {} // t: 1dot, 1dotCode1;
break;
case 163:
this.$ = extend($$[$0-1], $$[$0]) // t: 1dotCode1;
break;
}
},
table: [o($V0,[2,2],{3:1,4:2}),{1:[3]},{5:3,6:[2,11],7:4,8:8,9:11,10:12,11:13,12:14,15:5,16:6,17:7,18:18,23:$V1,24:20,25:$V2,26:$V3,27:$V4,28:$V5,29:$V6,31:16,33:$V7,69:21,137:$V8,138:$V9,139:23,140:$Va,142:19},{6:[1,29]},o($V0,[2,3]),{6:[2,12]},o($V0,[2,17]),o($V0,[2,18]),o($Vb,[2,8],{13:30}),{26:[1,31]},{28:[1,32]},o($Vb,[2,4]),o($Vb,[2,5]),o($Vb,[2,6]),o($Vb,[2,7]),{19:[1,33]},o($Vc,$Vd,{32:34,34:35}),{24:20,26:$V3,28:$V5,31:36,69:21,137:$V8,138:$V9},{19:[1,37],22:[1,38]},o($Vb,[2,158],{139:39,140:$Va}),o($Ve,[2,65]),o($Ve,[2,66]),{24:40,26:$V3,28:$V5,137:$V8},o($V0,[2,159]),o($Vf,[2,152]),o($Vf,[2,153]),o($Vf,[2,154]),o($Ve,[2,155]),{24:42,26:$V3,28:$V5,137:$V8,141:[1,41]},{1:[2,1]},{6:[2,10],7:44,9:45,10:46,11:47,14:43,16:6,17:7,18:18,23:$V1,24:20,25:$V2,26:$V3,27:$V4,28:$V5,29:$V6,31:16,33:$V7,69:21,137:$V8,138:$V9},o($V0,[2,22]),{26:[1,48]},o($Vc,$Vd,{24:20,69:21,34:35,30:49,31:50,32:51,26:$V3,28:$V5,137:$V8,138:$V9}),o($V0,$Vg,{21:52,143:53}),{35:[1,54],38:55,39:56,40:57,41:[1,58],43:[1,59],45:[1,60]},o($Vc,$Vd,{34:35,32:61}),o($Vc,$Vd,{34:35,20:62,77:64,24:65,79:66,80:67,87:72,32:77,26:$V3,28:$V5,63:$Vh,75:$Vi,81:$Vj,83:$Vk,84:$Vl,85:$Vm,91:$Vn,92:$Vo,93:$Vp,137:$V8}),o($Vb,[2,20]),o($V0,[2,160]),o([19,22,37,51,55,60,64,111,114,115,116,117,140],[2,21]),o($Vq,[2,156]),{141:[1,78]},o($Vb,[2,9]),o($Vb,[2,13]),o($Vb,[2,14]),o($Vb,[2,15]),o($Vb,[2,16]),o($V0,[2,23]),o($Vb,[2,24]),o($Vb,[2,25]),o($V0,$Vg,{143:53,21:79}),o($Vb,[2,27]),o([6,23,25,26,27,28,29,33,37,51,55,60,64,137,138],[2,161],{139:80,140:$Va}),{24:92,26:$V3,28:$V5,36:81,37:[2,35],42:82,43:$Vr,47:89,48:83,52:84,56:85,61:86,62:87,63:$Vs,71:90,72:$Vt,73:$Vu,74:$Vv,137:$V8},o($Vc,[2,34]),o($Vc,[2,30]),o($Vc,[2,31]),o($Vc,[2,32]),{24:20,26:$V3,28:$V5,31:97,44:96,69:21,137:$V8,138:$V9},{24:92,26:$V3,28:$V5,46:98,47:99,74:$Vv,137:$V8},o($V0,$Vg,{143:53,21:100}),o($V0,$Vg,{143:53,21:101}),o($Vw,$Vx,{76:102}),o($Vy,[2,78],{34:35,87:72,32:77,78:103,79:104,86:105,98:108,35:$Vd,41:$Vd,43:$Vd,45:$Vd,91:$Vn,92:$Vo,93:$Vp,95:$Vz,97:$VA,100:$VB,101:$VC,102:$VD}),o($Vw,$Vx,{76:112}),o($Vy,[2,83]),o($Vy,[2,84]),o($Vy,[2,85]),o($VE,[2,88]),o($VE,[2,89]),o($VE,[2,90]),o($VF,[2,95],{88:113}),o($VG,[2,125],{118:114}),o($VF,[2,97]),o($VF,[2,98]),{24:20,26:$V3,28:$V5,31:115,69:21,137:$V8,138:$V9},o($VF,[2,100]),o($Vq,[2,157]),o($Vb,[2,26]),o($Vq,[2,163]),{37:[1,116]},{37:[2,36]},o($VH,[2,45],{49:117}),o($VI,[2,49],{53:118}),o($VJ,[2,53],{57:119}),o($VJ,[2,57]),o($VJ,[2,58]),{24:92,26:$V3,28:$V5,42:120,43:$Vr,47:89,48:83,52:84,56:85,61:86,62:87,63:$Vs,71:90,72:$Vt,73:$Vu,74:$Vv,137:$V8},o($Vc,$Vd,{34:35,77:64,24:65,79:66,80:67,87:72,32:77,70:121,20:122,18:123,23:$V1,26:$V3,28:$V5,63:$Vh,75:$Vi,81:$Vj,83:$Vk,84:$Vl,85:$Vm,91:$Vn,92:$Vo,93:$Vp,137:$V8}),{24:92,26:$V3,28:$V5,47:124,74:$Vv,137:$V8},{24:20,26:$V3,28:$V5,31:125,69:21,137:$V8,138:$V9},o($VK,[2,73]),o($VK,[2,74]),o($VL,[2,69],{73:[1,126]}),o($VL,[2,71],{72:[1,127]}),o($Vc,[2,37],{24:20,69:21,31:128,26:$V3,28:$V5,137:$V8,138:$V9}),o($VM,[2,38]),o($Vc,[2,40],{24:92,47:129,26:$V3,28:$V5,74:$Vv,137:$V8}),o($VN,[2,41]),o($Vb,[2,28]),o($Vb,[2,19]),o($Vy,[2,77],{98:108,82:130,86:131,94:132,103:133,104:134,95:$Vz,97:$VA,100:$VB,101:$VC,102:$VD,105:$VO,106:$VP,107:$VQ,108:$VR,109:$VS,110:$VT}),o($Vy,[2,79],{98:108,86:141,95:$Vz,97:$VA,100:$VB,101:$VC,102:$VD}),o($Vy,[2,80],{86:105,98:108,78:142,95:$Vz,97:$VA,100:$VB,101:$VC,102:$VD}),o($VU,[2,91]),{96:143,133:$VV,134:$VW,135:$VX,136:$VY},{96:148,133:$VV,134:$VW,135:$VX,136:$VY},{99:[1,149]},{99:[2,106]},{99:[2,107]},{99:[2,108]},o($Vy,[2,82],{98:108,82:130,86:131,94:132,103:133,104:134,95:$Vz,97:$VA,100:$VB,101:$VC,102:$VD,105:$VO,106:$VP,107:$VQ,108:$VR,109:$VS,110:$VT}),o($VU,[2,93],{89:150,90:[1,151]}),{24:156,26:$V3,28:$V5,64:[1,152],81:[1,157],96:158,99:$VZ,113:155,119:153,120:154,129:$V_,130:$V$,131:$V01,132:$V11,133:$VV,134:$VW,135:$VX,136:$VY,137:$V8},o($VF,[2,99]),o($VF,[2,29]),o([37,64],[2,43],{50:164,51:[1,165]}),o($VH,[2,47],{54:166,55:[1,167]}),o($VI,[2,55],{58:168,59:169,60:[1,170]}),{64:[1,171]},o($V21,$V31,{66:172}),o($V21,[2,75]),o($V21,[2,76]),o($Vc,$Vd,{34:35,77:64,24:65,79:66,80:67,87:72,32:77,20:122,18:123,70:173,23:$V1,26:$V3,28:$V5,63:$Vh,75:$Vi,81:$Vj,83:$Vk,84:$Vl,85:$Vm,91:$Vn,92:$Vo,93:$Vp,137:$V8}),o($VJ,[2,64]),o($VL,[2,70]),o($VL,[2,72]),o($VM,[2,39]),o($VN,[2,42]),o($Vw,[2,87]),o($Vw,[2,101]),o($Vw,[2,102]),{99:[1,174]},{99:[1,175]},{99:[2,111]},{99:[2,112]},{99:[2,113]},{99:[2,114]},{99:[2,115]},{99:[2,116]},o($VU,[2,92]),o($Vy,[2,81],{98:108,86:141,95:$Vz,97:$VA,100:$VB,101:$VC,102:$VD}),o($Vw,[2,103]),o($V41,[2,148]),o($V41,[2,149]),o($V41,[2,150]),o($V41,[2,151]),o($Vw,[2,104]),o($Vw,[2,105]),o($VF,[2,96]),o($Vc,$Vd,{34:35,32:77,87:176,91:$Vn,92:$Vo,93:$Vp}),o($Vy,[2,124]),o($VG,[2,126]),o($VG,[2,127]),o($VG,[2,128]),o($VG,[2,134],{121:177,125:178,97:[1,179]}),{122:180,124:181,126:$V51},o($V61,[2,140],{127:[1,183],128:[1,184]}),o($V61,[2,143]),o($V61,[2,144]),o($V61,[2,145]),o($V61,[2,146]),o($V61,[2,147]),o($VH,[2,46]),{24:92,26:$V3,28:$V5,43:$Vr,47:89,48:185,52:84,56:85,61:86,62:87,63:$Vs,71:90,72:$Vt,73:$Vu,74:$Vv,137:$V8},o($VI,[2,50]),{24:92,26:$V3,28:$V5,43:$Vr,47:89,52:186,56:85,61:86,62:87,63:$Vs,71:90,72:$Vt,73:$Vu,74:$Vv,137:$V8},o($VI,[2,51]),o($VJ,[2,54]),o($VI,[2,56],{61:86,62:87,47:89,71:90,24:92,56:187,26:$V3,28:$V5,43:$Vr,63:$Vs,72:$Vt,73:$Vu,74:$Vv,137:$V8}),o($V71,$V81,{65:188,67:189,114:$V91,115:$Va1,116:$Vb1,117:$Vc1}),o($Vd1,$V81,{67:189,65:194,68:195,111:$Ve1,114:$V91,115:$Va1,116:$Vb1,117:$Vc1}),o($V71,$V81,{67:189,65:197,114:$V91,115:$Va1,116:$Vb1,117:$Vc1}),o($Vw,[2,109]),o($Vw,[2,110]),o($VF,[2,94]),o($VG,[2,129]),o($VG,[2,135]),o($Vf1,[2,131],{123:198}),o($VG,[2,130],{124:199,126:$V51}),o($Vf1,[2,136]),{24:200,26:$V3,28:$V5,137:$V8},o($V61,[2,141]),{24:201,26:$V3,28:$V5,137:$V8},o($VH,[2,44]),o($VI,[2,48]),o($VJ,[2,52]),o($V71,$V31,{66:202}),o($V71,[2,61]),o($V71,[2,120]),o($V71,[2,121]),o($V71,[2,122]),o($V71,[2,123]),o($Vd1,$Vg,{143:53,21:203}),o($V21,[2,63]),{24:92,26:$V3,28:$V5,47:204,74:$Vv,137:$V8},o($V71,$V31,{66:205}),o($VG,[2,133],{124:206,126:$V51}),o($Vf1,[2,137]),o($Vf1,[2,138],{97:[1,207]}),o($V61,[2,142]),o($Vd1,$Vg,{143:53,68:195,21:208,111:$Ve1}),o($VJ,[2,67]),{24:210,26:$V3,28:$V5,96:158,99:$VZ,112:209,113:211,129:$V_,130:$V$,131:$V01,132:$V11,133:$VV,134:$VW,135:$VX,136:$VY,137:$V8},o($Vd1,$Vg,{143:53,68:195,21:212,111:$Ve1}),o($Vf1,[2,132]),o($Vf1,[2,139]),o($VJ,[2,59]),o($V21,[2,117]),o($V21,[2,118]),o($V21,[2,119]),o($VJ,[2,68])],
defaultActions: {5:[2,12],29:[2,1],82:[2,36],109:[2,106],110:[2,107],111:[2,108],135:[2,111],136:[2,112],137:[2,113],138:[2,114],139:[2,115],140:[2,116]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  /*
    SPARQL parser in the Jison parser generator format.
  */

  // Common namespaces and entities
  var RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
      RDF_TYPE  = RDF + 'type',
      RDF_FIRST = RDF + 'first',
      RDF_REST  = RDF + 'rest',
      RDF_NIL   = RDF + 'nil',
      XSD = 'http://www.w3.org/2001/XMLSchema#',
      XSD_INTEGER  = XSD + 'integer',
      XSD_DECIMAL  = XSD + 'decimal',
      XSD_DOUBLE   = XSD + 'double',
      XSD_BOOLEAN  = XSD + 'boolean',
      XSD_TRUE =  '"true"^^'  + XSD_BOOLEAN,
      XSD_FALSE = '"false"^^' + XSD_BOOLEAN,
      XSD_PATTERN        = XSD + 'pattern',
      XSD_MININCLUSIVE   = XSD + 'minInclusive',
      XSD_MINEXCLUSIVE   = XSD + 'minExclusive',
      XSD_MAXINCLUSIVE   = XSD + 'maxInclusive',
      XSD_MAXEXCLUSIVE   = XSD + 'maxExclusive',
      XSD_LENGTH         = XSD + 'length',
      XSD_MINLENGTH      = XSD + 'minLength',
      XSD_MAXLENGTH      = XSD + 'maxLength',
      XSD_TOTALDIGITS    = XSD + 'totalDigits',
      XSD_FRACTIONDIGITS = XSD + 'fractionDigits';

  var numericDatatypes = [
      XSD + "integer",
      XSD + "decimal",
      XSD + "float",
      XSD + "double",
      XSD + "string",
      XSD + "boolean",
      XSD + "dateTime",
      XSD + "nonPositiveInteger",
      XSD + "negativeInteger",
      XSD + "long",
      XSD + "int",
      XSD + "short",
      XSD + "byte",
      XSD + "nonNegativeInteger",
      XSD + "unsignedLong",
      XSD + "unsignedInt",
      XSD + "unsignedShort",
      XSD + "unsignedByte",
      XSD + "positiveInteger"
  ];

  var numericFacets = ["mininclusive", "minexclusive",
		       "maxinclusive", "maxexclusive"];

  var base = '', basePath = '', baseRoot = '';

  // Returns a lowercase version of the given string
  function lowercase(string) {
    return string.toLowerCase();
  }

  // Appends the item to the array and returns the array
  function appendTo(array, item) {
    return array.push(item), array;
  }

  // Appends the items to the array and returns the array
  function appendAllTo(array, items) {
    return array.push.apply(array, items), array;
  }

  // Extends a base object with properties of other objects
  function extend(base) {
    if (!base) base = {};
    for (var i = 1, l = arguments.length, arg; i < l && (arg = arguments[i] || {}); i++)
      for (var name in arg)
        base[name] = arg[name];
    return base;
  }

  // Creates an array that contains all items of the given arrays
  function unionAll() {
    var union = [];
    for (var i = 0, l = arguments.length; i < l; i++)
      union = union.concat.apply(union, arguments[i]);
    return union;
  }

  // Resolves an IRI against a base path
  function resolveIRI(iri) {
    // Strip off possible angular brackets
    if (iri[0] === '<')
      iri = iri.substring(1, iri.length - 1);
    switch (iri[0]) {
    // An empty relative IRI indicates the base IRI
    case undefined:
      return base;
    // Resolve relative fragment IRIs against the base IRI
    case '#':
      return base + iri;
    // Resolve relative query string IRIs by replacing the query string
    case '?':
      return base.replace(/(?:\?.*)?$/, iri);
    // Resolve root relative IRIs at the root of the base IRI
    case '/':
      return baseRoot + iri;
    // Resolve all other IRIs at the base IRI's path
    default:
      return /^[a-z]+:/.test(iri) ? iri : basePath + iri;
    }
  }

  // Creates an expression with the given type and attributes
  function expression(expr, attr) {
    var expression = { expression: expr };
    if (attr)
      for (var a in attr)
        expression[a] = attr[a];
    return expression;
  }

  // Creates a path with the given type and items
  function path(type, items) {
    return { type: 'path', pathType: type, items: items };
  }

  // Creates a literal with the given value and type
  function createLiteral(value, type) {
    return '"' + value + '"^^' + type;
  }

  // Creates a new blank node identifier
  function blank() {
    return '_:b' + blankId++;
  };
  var blankId = 0;
  Parser._resetBlanks = function () { blankId = 0; }

  // Regular expression and replacement strings to escape strings
  var stringEscapeSequence = /\\u([a-fA-F0-9]{4})|\\U([a-fA-F0-9]{8})|\\(.)/g,
      irirefEscapeSequence = /\\u([a-fA-F0-9]{4})|\\U([a-fA-F0-9]{8})/g,
      stringEscapeReplacements = { '\\': '\\', "'": "'", '"': '"',
                             't': '\t', 'b': '\b', 'n': '\n', 'r': '\r', 'f': '\f' },
      semactEscapeReplacements = { '\\': '\\', '%': '%' },
      fromCharCode = String.fromCharCode;

  function unescape(string, regex, replacements) {
    try {
      string = string.replace(regex, function (sequence, unicode4, unicode8, escapedChar) {
        var charCode;
        if (unicode4) {
          charCode = parseInt(unicode4, 16);
          if (isNaN(charCode)) throw new Error(); // can never happen (regex), but helps performance
          return fromCharCode(charCode);
        }
        else if (unicode8) {
          charCode = parseInt(unicode8, 16);
          if (isNaN(charCode)) throw new Error(); // can never happen (regex), but helps performance
          if (charCode < 0xFFFF) return fromCharCode(charCode);
          return fromCharCode(0xD800 + ((charCode -= 0x10000) >> 10), 0xDC00 + (charCode & 0x3FF));
        }
        else {
          var replacement = replacements[escapedChar];
          if (!replacement) throw new Error();
          return replacement;
        }
      });
      return string;
    }
    catch (error) { return ''; }
  };

  // Translates string escape codes in the string into their textual equivalent
  function unescapeString(string, trimLength) {
    string = string.substring(trimLength, string.length - trimLength);
    return '"' + unescape(string, stringEscapeSequence, stringEscapeReplacements) + '"';
  }

  // Return object with p1 key, p2 integer value
  function keyInt(key, val) {
    var ret = {};
    ret[key] = parseInt(val, 10);
    return ret;
  }

  // Return object with p1 key, p2 string value
  function unescapeSemanticAction(key, string) {
    var ret = {};
    string = string.substring(1, string.length - 2);
    ret[key] = unescape(string, stringEscapeSequence, semactEscapeReplacements);
    return ret;
  }

  function error (msg) {
    Parser.prefixes = Parser.valueClasses = Parser.shapes = Parser.start = Parser.startAct = null; // Reset state.
    base = basePath = baseRoot = '';
    throw new Error(msg);
  }

  // Expand declared prefix or throw Error
  function expandPrefix (prefix) {
    if (!(prefix in Parser.prefixes))
      error('Parse error; unknown prefix: ' + prefix);
    return Parser.prefixes[prefix];
  }

  // Add a shape to the map
  function addShape (label, shape) {
    if (!Parser.shapes)
      Parser.shapes = {};
    else if (label in Parser.shapes)
      error("Parse error: "+label+" alread defined");
    Parser.shapes[label] = shape;
  }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/**/
break;
case 1:return 91;
break;
case 2:return 92;
break;
case 3:return 127;
break;
case 4:return 93;
break;
case 5:return 137;
break;
case 6:return 117;
break;
case 7:return 130;
break;
case 8:return 129;
break;
case 9:return 99;
break;
case 10:return 'ANON';
break;
case 11:return 26;
break;
case 12:return 28;
break;
case 13:return 74;
break;
case 14:return 138;
break;
case 15:return 141;
break;
case 16:return 135;
break;
case 17:return 'NON_TERMINATED_STRING_LITERAL_LONG2';
break;
case 18:return 136;
break;
case 19:return 'NON_TERMINATED_STRING_LITERAL_LONG2';
break;
case 20:return 133;
break;
case 21:return 134;
break;
case 22:return 25;
break;
case 23:return 27;
break;
case 24:return 29;
break;
case 25:return 33;
break;
case 26:return 41;
break;
case 27:return 45;
break;
case 28:return 75;
break;
case 29:return 84;
break;
case 30:return 83;
break;
case 31:return 85;
break;
case 32:return 95;
break;
case 33:return 90;
break;
case 34:return 105;
break;
case 35:return 106;
break;
case 36:return 107;
break;
case 37:return 108;
break;
case 38:return 100;
break;
case 39:return 101;
break;
case 40:return 102;
break;
case 41:return 109;
break;
case 42:return 110;
break;
case 43:return 19;
break;
case 44:return 35;
break;
case 45:return 37;
break;
case 46:return 43;
break;
case 47:return 55;
break;
case 48:return 51;
break;
case 49:return 60;
break;
case 50:return 63;
break;
case 51:return 64;
break;
case 52:return 23;
break;
case 53:return 73;
break;
case 54:return 128;
break;
case 55:return 72;
break;
case 56:return 81;
break;
case 57:return 97;
break;
case 58:return 111;
break;
case 59:return 114;
break;
case 60:return 115;
break;
case 61:return 116;
break;
case 62:return 126;
break;
case 63:return 140;
break;
case 64:return 131;
break;
case 65:return 132;
break;
case 66:return 6;
break;
case 67:return 'invalid character '+yy_.yytext;
break;
}
},
rules: [/^(?:\s+|((\/\/|#)[^\u000a\u000d]*))/,/^(?:(@((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:)(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|:|[0-9]|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))*(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%)))))?)))/,/^(?:(@(([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:))/,/^(?:(@([A-Za-z])+((-([0-9A-Za-z])+))*))/,/^(?:@)/,/^(?:(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:)(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|:|[0-9]|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))*(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%)))))?)))/,/^(?:(\{((([+-])?([0-9])+))((,(((([+-])?([0-9])+))|\*)?))?\}))/,/^(?:(([+-])?((([0-9])+\.([0-9])*(([Ee]([+-])?([0-9])+)))|((\.)?([0-9])+(([Ee]([+-])?([0-9])+))))))/,/^(?:(([+-])?([0-9])*\.([0-9])+))/,/^(?:(([+-])?([0-9])+))/,/^(?:{ANON})/,/^(?:(<([^\u0000-\u0020<>\"{}|^`\\]|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*>))/,/^(?:((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:))/,/^(?:a\b)/,/^(?:(_:((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|[0-9])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?))/,/^(?:(\{([^%\\]|\\[%\\]|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*%\}))/,/^(?:('''(('|'')?([^\'\\]|(\\[\"\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*'''))/,/^(?:('''))/,/^(?:("""(("|"")?([^\"\\]|(\\[\"\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*"""))/,/^(?:("""))/,/^(?:('([^\u0027\u005c\u000a\u000d]|(\\[\"\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*'))/,/^(?:("([^\u0022\u005c\u000a\u000d]|(\\[\"\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*"))/,/^(?:([Bb][Aa][Ss][Ee]))/,/^(?:([Pp][Rr][Ee][Ff][Ii][Xx]))/,/^(?:([sS][tT][aA][rR][tT]))/,/^(?:([Vv][Ii][Rr][Tt][Uu][Aa][Ll]))/,/^(?:([Cc][Ll][Oo][Ss][Ee][Dd]))/,/^(?:([Ee][Xx][Tt][Rr][Aa]))/,/^(?:([Ll][Ii][Tt][Ee][Rr][Aa][Ll]))/,/^(?:([Bb][Nn][Oo][Dd][Ee]))/,/^(?:([Ii][Rr][Ii]))/,/^(?:([Nn][Oo][Nn][Ll][Ii][Tt][Ee][Rr][Aa][Ll]))/,/^(?:([Pp][Aa][Tt][Tt][Ee][Rr][Nn]))/,/^(?:([Oo][Rr]))/,/^(?:([Mm][Ii][Nn][Ii][Nn][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Mm][Ii][Nn][Ee][Xx][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Mm][Aa][Xx][Ii][Nn][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Mm][Aa][Xx][Ee][Xx][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Ll][Ee][Nn][Gg][Tt][Hh]))/,/^(?:([Mm][Ii][Nn][Ll][Ee][Nn][Gg][Tt][Hh]))/,/^(?:([Mm][Aa][Xx][Ll][Ee][Nn][Gg][Tt][Hh]))/,/^(?:([Tt][Oo][Tt][Aa][Ll][Dd][Ii][Gg][Ii][Tt][Ss]))/,/^(?:([Ff][Rr][Aa][Cc][Tt][Ii][Oo][Nn][Dd][Ii][Gg][Ii][Tt][Ss]))/,/^(?:=)/,/^(?:\{)/,/^(?:\})/,/^(?:&)/,/^(?:\|\|)/,/^(?:\|)/,/^(?:,)/,/^(?:\()/,/^(?:\))/,/^(?:\$)/,/^(?:!)/,/^(?:\^\^)/,/^(?:\^)/,/^(?:\.)/,/^(?:~)/,/^(?:;)/,/^(?:\*)/,/^(?:\+)/,/^(?:\?)/,/^(?:-)/,/^(?:%)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}