#!/usr/bin/env node

// shex-to-json http://tracker.example/schemas/Issue.shex

let Path = require('path');
var ShExUtil = require("../lib/ShExUtil"); // translate back and forth to AS
var ShExLoader = require("../lib/ShExLoader"); // for verbose output
var ShExRWriter = require('../lib/ShExRWriter');
var Jsonld = require("jsonld");

// Generate command line interface
var CommandLineOptions = [
    { name: "help",  alias: "h", type: Boolean },
    { name: "shex",  alias: "x", type: String, multiple:  true, defaultValue:   [], defaultOption:  true },
    { name: "json",  alias: "j", type: String, multiple:    true, defaultValue:   [] },
    { name: "schema-iri-append", type: String, multiple:    false, defaultValue: undefined },
    { name: "schema-keep-imports", type: Boolean, multiple: false, defaultValue: false },
    { name: "schema-base",       type: String, multiple:    false, defaultValue: undefined },
    { name: "abbreviate", alias: "a", type: Boolean, multiple:  false, defaultValue:   false }
];
var CLI = require("command-line-args")(CommandLineOptions);
function abort (msg) {
  console.error(msg);
  console.error(require('command-line-usage')([
    {
      header: "shex-to-json",
      content: "load some number of schema files from web or filesystem and display as JSON (ShExJ), for example:\n    shex-to-json http://tracker.example/schemas/Issue.shex" },
    {
      header: 'Options',
      optionList: CommandLineOptions
    },
    {
      content: "Project home: " + require('chalk').underline("https://github.com/shexSpec/shex.js")
    }
  ]));
  process.exit(1);
}

// Extract user commands
var cmds = CLI;
if (cmds.help)
    abort("");
if (cmds.shex.length === 0 && cmds.json.length === 0) abort("no shex specified");

let schemaOptions = {}
if (cmds['schema-iri-append']) {
  schemaOptions.iriTransform = i => i + cmds['schema-iri-append']
}
if (cmds['schema-keep-imports']) {
  schemaOptions.keepImports = cmds['schema-keep-imports']
}

ShExLoader.load(cmds.shex, cmds.json, [], [], schemaOptions).then(function (loaded) {
  if (true) {
    var w;
    new ShExRWriter({ base: cmds['schema-base'] || loaded.schemaMeta[0].base }).
      writeSchema(loaded.schema, function (error, text, prefixes) {
        if (error) throw error;
        else w = text;
      });
    console.log(w);
  } else {
  let struct = ShExUtil.AStoShExJ(loaded.schema, cmds.abbreviate);
  struct['@context'] = 'file://' + Path.resolve(process.argv[1], '../../doc/shex.jsonld');
  Jsonld.toRDF(struct, {format: "application/nquads"}, function (lderr, nquads) {
    if (lderr) {
      throw Error("error parsing JSON-ld " + loaded.schemaMeta[0].url + ": " + lderr);
    } else {
      console.log('%s', nquads)
    }
  });
  }
}).catch(function (e) {
  console.error("aborting:", e.stack || e);
  process.exit(1);
})
