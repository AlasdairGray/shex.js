#!/usr/bin/env node

// validate -n http://a.example/Issue1 -d issues.ttl -s http://b.example/IssueShape -x http://tracker.example/schemas/Issue.shex
// Validate node in data as shape in schema.

var ShExLoader = require("../lib/ShExLoader"); // for verbose output
var ShExWriter = require("../lib/ShExWriter"); // for verbose output
var ShExValidator = require("../lib/ShExValidator");

// Generate command line interface
var CLI = require("command-line-args")([
    { name: "verbose", alias: "v", type: Boolean },
    { name: "quiet", alias: "q", type: Boolean },
    { name: "help",  alias: "h", type: Boolean },
    { name: "node",  alias: "n", type: String, multiple: false, defaultValue: null, defaultOption: false },
    { name: "shape", alias: "s", type: String, multiple: false, defaultValue: null, defaultOption: false },
    { name: "shex",  alias: "x", type: String, multiple:  true, defaultValue:   [], defaultOption:  true },
    { name: "json",  alias: "j", type: String, multiple:  true, defaultValue:   [], defaultOption:  true },
    { name: "data",  alias: "d", type: String, multiple:  true, defaultValue:   [], defaultOption:  true }
]);
function abort (msg) {
  console.error(msg);
  console.error(CLI.getUsage({
    title: "validate",
    description: "validate Turtle files with respect to ShEx schemas, for example:\n    validate -n http://a.example/Issue1 -d issues.ttl -s http://b.example/IssueShape -x http://tracker.example/schemas/Issue.shex",
    footer: "Project home: [underline]{https://github.com/shexSpec/shex.js}"
  }));
  process.exit(1);
}

// Extract user commands
var cmds = CLI.parse();
if (cmds.help)
    abort("");
if (cmds.shex.length > 1 && cmds.data.length === 0) {
  cmds.data = cmds.shex.splice(1); // push all but one into data
}
if (cmds.json.length > 1 && cmds.data.length === 0) {
  cmds.data = cmds.json.splice(1); // push all but one into data
}
if (cmds.data.length === 0) abort("no data specified");
if (cmds.shex.length === 0) abort("no shex specified");
if (cmds.node === undefined) abort("no starting node specified");


ShExLoader(cmds.shex, cmds.json, cmds.data).then(function (loaded) {

  // Make sure we have a start node.
  if (cmds.shape === undefined && !("start" in loaded.schema))
    abort("no shape specified on command line or in shex");
  
  if (cmds.verbose) {
    var w;
    new ShExWriter({simplifyParentheses: false }).
      writeSchema(loaded.schema, function (error, text, prefixes) {
        if (error) throw error;
        else w = text;
      });
    var shapeIn = cmds.shape ? cmds.shape + " in" : "";
    console.log("validating", cmds.node, "in", loaded.data.size, "triples against", shapeIn, w);
  }

  // validate
  var res = ShExValidator(loaded.schema).validate(loaded.data, cmds.node, cmds.shape);
  if (!cmds.quiet)
    console.log(JSON.stringify(res, null, "  "));

  // Exit status 2 means no dice.
  process.exit(res === null ? 2 : 0);
}).catch(function (e) {
  console.error("aborting:", e);
})
