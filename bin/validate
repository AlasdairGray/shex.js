#!/usr/bin/env node

/*
validate -n <node> -d <data> -s <shape> -x <schema>
Validate node in data as shape in schema.

example invocations:
 from teh interwebs:
  validate -n http://a.example/Issue1 -d issues.ttl -s http://b.example/IssueShape -x http://tracker.example/schemas/Issue.shex

 from shex.js co with neighboring shexTest:
  ./bin/validate -x ../shexTest/schemas/1dotCode3.shex -s http://a.example/S1 -d ../shexTest/validation/IIssue1_Ip1_Io1.ttl -n http://a.example/Issue1


Extensions are loaded from ../extensions/*.js .
Running the test extension <http://shex.io/extensions/Test/> adorns the results with:
  "semActResults": {
    "extension": "http://shex.io/extensions/Test/",
    "effects": [
      "http://a.example/Issue1",
      "http://a.example/p1",
      "http://a.example/o1"
    ]
  }

*/

var ShExLoader = require("../lib/ShExLoader"); // for verbose output
var ShExWriter = require("../lib/ShExWriter"); // for verbose output
var ShExValidator = require("../lib/ShExValidator");
var TestExt = "http://shex.io/extensions/Test/";

// Generate command line interface
var CLI = require("command-line-args")([
    { name: "verbose", alias: "v", type: Boolean },
    { name: "quiet", alias: "q", type: Boolean },
    { name: "help",  alias: "h", type: Boolean },
    { name: "node",  alias: "n", type: String, multiple: false, defaultValue: null, defaultOption: false },
    { name: "shape", alias: "s", type: String, multiple: false, defaultValue: null, defaultOption: false },
    { name: "shex",  alias: "x", type: String, multiple:  true, defaultValue:   [], defaultOption:  true },
    { name: "json",  alias: "j", type: String, multiple:  true, defaultValue:   [], defaultOption:  true },
    { name: "data",  alias: "d", type: String, multiple:  true, defaultValue:   [], defaultOption:  true }
]);
function abort (msg) {
  console.error(msg);
  console.error(CLI.getUsage({
    title: "validate",
    description: "validate Turtle files with respect to ShEx schemas, for example:\n    validate -n http://a.example/Issue1 -d issues.ttl -s http://b.example/IssueShape -x http://tracker.example/schemas/Issue.shex",
    footer: "Project home: [underline]{https://github.com/shexSpec/shex.js}"
  }));
  process.exit(1);
}

// Extract user commands
var cmds = CLI.parse();
if (cmds.help)
    abort("");
if (cmds.shex.length > 1 && cmds.data.length === 0) {
  cmds.data = cmds.shex.splice(1); // push all but one into data
}
if (cmds.json.length > 1 && cmds.data.length === 0) {
  cmds.data = cmds.json.splice(1); // push all but one into data
}
if (cmds.data.length === 0) abort("No data specified");
if (cmds.shex.length === 0 && cmds.json.length === 0) abort("No shex specified");

ShExLoader.load(cmds.shex, cmds.json, cmds.data).then(function (loaded) {

  if (cmds.node === undefined || (cmds.shape === undefined && !("start" in loaded.schema))) {
    var msgs = [];
    if (cmds.node === undefined) {
      var subjectNodes = loaded.data.count() < 50 ? Object.keys(loaded.data.findByIRI(null, null, null).reduce(function (r, t) { r[t.subject] = t.subject; return r; }, {})) : 0;
      msgs.push("No starting node specified" +
                (subjectNodes.length ?
                 "; try -n with one of: " + subjectNodes.join(", ") :
                 "")
               );
    }
    // Make sure we have a start node.
    if (cmds.shape === undefined && !("start" in loaded.schema)) {
      var schemaKeys = Object.keys(loaded.schema.shapes);
      schemaKeys.join(", ")
      msgs.push("No shape specified on command line or in shex" +
                (schemaKeys.length < 50 ?
                 "; try -n with one of: " + schemaKeys.join(", ") :
                 "")
               );
      }
    abort(msgs.join("\n"));
  }
  
  if (cmds.verbose) {
    var w;
    new ShExWriter({simplifyParentheses: false }).
      writeSchema(loaded.schema, function (error, text, prefixes) {
        if (error) throw error;
        else w = text;
      });
    var shapeIn = cmds.shape ? cmds.shape + " in" : "";
    console.log("validating", cmds.node, "in", loaded.data.size, "triples against", shapeIn, w);
  }

  // prepare validator
  var validator = ShExValidator(loaded.schema);
  var extensions = ShExLoader.loadExtensions();
  Object.keys(extensions).forEach(function (ext) {
    extensions[ext].register(validator);
  });

  // run validator
  var res = validator.validate(loaded.data, cmds.node, cmds.shape);

  // display results
  if (!cmds.quiet) {
    if (Object.keys(validator.semActHandler.results).length) {
      res.semActResults = validator.semActHandler.results;
    }
    console.log(JSON.stringify(res, null, "  "));
  }
  // Exit status 2 means no dice.
  process.exit(res === null ? 2 : 0);
}).catch(function (e) {
  console.error("aborting:", e);
})
