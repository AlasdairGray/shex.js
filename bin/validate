#!/usr/bin/env node

/*
validate -n <node> -d <data> -s <shape> -x <schema>
Validate node in data as shape in schema.

example invocations:
 from teh interwebs:
  validate -n http://a.example/Issue1 -d issues.ttl -s http://b.example/IssueShape -x http://tracker.example/schemas/Issue.shex

 from shex.js co with neighboring shexTest:
  ./bin/validate -x ../shexTest/schemas/1dotCode3.shex -s http://a.example/S1 -d ../shexTest/validation/IIssue1_Ip1_Io1.ttl -n http://a.example/Issue1


Extensions are loaded from ../extensions/*.js .
Running the test extension <http://shex.io/extensions/Test/> adorns the results with:
  "semActResults": {
    "extension": "http://shex.io/extensions/Test/",
    "effects": [
      "http://a.example/Issue1",
      "http://a.example/p1",
      "http://a.example/o1"
    ]
  }

The regular expression engine is loaded from either:
  absolute path, e.g. if you git cloned shex.js into /tmp:
    --regex-module /tmp/shex.js/lib/regex/nfax-val-1err
    --regex-module /tmp/shex.js/lib/regex/threaded-val-nerr
  or relative path to bin/validate directory:
    --regex-module ../lib/regex/nfax-val-1err
    --regex-module ../lib/regex/threaded-val-nerr
  or a module name in lib/regex:
    --regex-module nfax-val-1err
    --regex-module threaded-val-nerr

*/

var ShExUtil = require("../lib/ShExUtil");
var ShExLoader = require("../lib/ShExLoader");
var ShExWriter = require("../lib/ShExWriter"); // for verbose output
var ShExValidator = require("../lib/ShExValidator");
var Path = require("path");
var ValidatorOptions = { diagnose: true };
// var RunMode = { NORMAL: 0, ERROR: 1, DRYRUN: 2, USAGE: 4, HELP: 6 };

// Generate command line interface
var CLI = require("command-line-args")([
    { name: "verbose", alias: "v", type: Boolean },
    { name: "quiet", alias: "q", type: Boolean },
    { name: "help",  alias: "h", type: Boolean },
    { name: "node",  alias: "n", type: String, multiple: false, defaultValue: null },
    { name: "node-type", alias: "t", type: String, multiple: false, defaultValue: null },
    { name: "shape", alias: "s", type: String, multiple: false, defaultValue: null },
    { name: "shex",  alias: "x", type: String, multiple:  true, defaultValue:   [] },
    { name: "json",  alias: "j", type: String, multiple:  true, defaultValue:   [] },
    { name: "data",  alias: "d", type: String, multiple:  true, defaultValue:   [], defaultOption: true },
    { name: "jsonld",alias: "l", type: String, multiple:  true, defaultValue:   [] },
    { name: "serve", alias: "S", type: String, multiple: false, defaultValue: null },
    { name: "exec",  alias: "e", type: String,                  defaultValue: null },
    { name: "or",                type: String, multiple: false, defaultValue: null },
    { name: "partition",         type: String, multiple: false, defaultValue: null },
    { name: "json-manifest",     type: String, multiple:  true, defaultValue:   [] },
    { name: "turtle-manifest",   type: String, multiple:  true, defaultValue:   [] },
    { name: "jsonld-manifest",   type: String, multiple:  true, defaultValue:   [] },
    { name: "test-name",         type: String, multiple:  true, defaultValue:   [] },
    { name: "invocation", alias: "i", type: Boolean },
    { name: "dry-run", alias: "N", type: Boolean },
    { name: "regex-module", type: String },
]);
function abort (msg) {
  console.error(msg);
  console.error(CLI.getUsage({
    title: "validate",
    description: "validate Turtle files with respect to ShEx schemas, for example:\n    validate -n http://a.example/Issue1 -d issues.ttl -s http://b.example/IssueShape -x http://tracker.example/schemas/Issue.shex",
    footer: "Project home: [underline]{https://github.com/shexSpec/shex.js}"
  }));
  process.exit(1);
}

/* Leverage N3.js's relative IRI parsing.
 * !! requires intimate (so intimate it makes me blush) knowledge of N3.js.
 */
var N3 = require("n3");
function resolveRelativeIRI (baseIri, relativeIri) {
  if (!N3.Util.isIRI(relativeIri))
    return relativeIri; // not really an IRI
  var p = N3.Parser({ documentIRI: baseIri });
  p._readSubject({type: "IRI", value: relativeIri});
  return p._subject;
}

function resolvePrefixedIRI (prefixedIri, prefixes) {
  var colon = prefixedIri.indexOf(":");
  if (colon === -1)
    return null;
  var prefix = prefixes[prefixedIri.substr(0, colon)];
  return prefix === undefined ? null : prefix + prefixedIri.substr(colon+1);
}

function parsePassedNode (passedValue, meta, deflt, known) {
  if (!meta)
    return known(passedValue) ? passedValue : UnknownIRI;
  if (passedValue === undefined || passedValue.length === 0)
    return known && known(meta.base) ? meta.base : deflt ? deflt() : NotSupplied;
  var relIRI = passedValue[0] === "<" && passedValue[passedValue.length-1] === ">";
  if (relIRI)
    passedValue = passedValue.substr(1, passedValue.length-2);
  var t = resolveRelativeIRI(meta.base, passedValue);
  if (known(t))
    return t;
  if (!relIRI) {
    t = resolvePrefixedIRI(passedValue, meta.prefixes);
    if (t !== null && known(t))
      return t;
  }
  return UnknownIRI;
}

var NotSupplied = "-- not supplied --",
    UnknownIRI = "-- not found --";

function findNodesAndValidate (loaded, parms, options) {
  function knownShape (label) {
    return label in loaded.schema.shapes;
  }
  function someShape () {
    return Object.keys(loaded.schema.shapes)[0];
  }
  function knownNode (label) {
    return (loaded.data.findByIRI(label, null, null).length > 0 ||
            loaded.data.findByIRI(null, null, label).length > 0);
  }
  function knownType (label) {
    return (loaded.data.findByIRI(null, RDF_TYPE, label).length > 0);
  }
  function someIRInode () {
    var triples = loaded.data.findByIRI(null, null, null);
    for (var i = 0; i < triples.length; ++i)
      if (N3.Util.isIRI(triples[i].subject))
        return triples[i].subject;
    return triples.length > 0 ? triples[0].subject : NotSupplied;
  };
  function someNodeWithType (type) {
    var triples = loaded.data.findByIRI(null, RDF_TYPE, type)
    return triples.length > 0 ? triples[0].subject : NotSupplied;
  };

  // resolve relative shape and focus node names against the first schema and data source respectively.
  var node = parms["node-type"] ?
      someNodeWithType(parsePassedNode(parms["node-type"], loaded.dataMeta[0],
                                       null, knownType, loaded.data.prefixes)) :
      parsePassedNode(parms.node, loaded.dataMeta[0], someIRInode,
                      knownNode, loaded.data.prefixes);
  var shape = (!parms.shape && loaded.schema.start) ?
      loaded.schema.start :
      parsePassedNode(parms.shape, loaded.schemaMeta[0],
                      someShape, knownShape, loaded.schema.prefixes);
  var ret = {
    node: node, shape: shape
  };
  if (node !== NotSupplied && node !== UnknownIRI &&
      shape !== NotSupplied && shape !== UnknownIRI)
    ret.results = runValidator(loaded.data, node, loaded.schema, shape, options);
  return ret;
}

function loadSchemaAndData (valParms, options) {
  if (valParms.shex.length > 1 && valParms.data.length === 0) {
    valParms.data = valParms.shex.splice(1); // push all but one into data
  }
  if (valParms.json.length > 1 && valParms.data.length === 0) {
    valParms.data = valParms.json.splice(1); // push all but one into data
  }
  if (valParms.data.length === 0 && valParms.jsonld.length === 0 && !valParms.serve) abort("No data specified");
  if (valParms.shex.length === 0 && valParms.json.length === 0 && !valParms.serve) abort("No shex specified");
  return Promise.all([
    // Loaded schema and data.
    ShExLoader.load(valParms.shex, valParms.json, valParms.data, valParms.jsonld),

    // Expected results if provided.
    !("result" in valParms) ? Promise.resolve(undefined) :
      typeof valParms.result === "boolean" ? Promise.resolve(valParms.result) :
      ShExLoader.GET(valParms.result).then(function (body) { 
        return ShExUtil.absolutizeResults(JSON.parse(body.text), body.url);
      })
  ]).then(function (loadedAndResults) {
    if (valParms.serve)
      runServer(loadedAndResults[0], valParms, options)
    else {
      var res = findNodesAndValidate(loadedAndResults[0], valParms, options).results;
      if (cmds["dry-run"])
        return res;
      var expectedResults = loadedAndResults[1];
      // display results
      if (!valParms.quiet) {
        if (expectedResults !== undefined) {
          var match =
              typeof expectedResults === "boolean" && expectedResults !== "errors" in res ||
              JSON.stringify(expectedResults) == JSON.stringify(res);
          console.log(match);
          // Exit status 3 means match failure.
          return Promise.resolve(match ? 0 : 3);
        } else {
          console.log(JSON.stringify(res, null, "  "));
          // Exit status 2 means validation failure.
          return Promise.resolve(res === null ? 2 : 0);
        }
      }
    }
  }).catch(function (e) {
    console.error("aborting:", typeof e === "object" && "stack" in e ? e.stack : e);
    return 1;
  })
}

// Extract user commands
var arg0 = process.argv[1];
function getInvocation (parms) {
  function shortenFile (u) {
    var m = u.match(/file:\/\/(\/.*)$/);
    if (m)
      u = Path.relative(process.cwd(), m[1])
    return "'"+u+"'";
  }
  function shexFileArg (u) { return "-x "+shortenFile(u); }
  function jsonFileArg (u) { return "-j "+shortenFile(u); }
  function dataFileArg (u) { return "-d "+shortenFile(u); }
  function jsonldFileArg (u) { return "-l "+shortenFile(u); }
  return [Path.relative(process.cwd(), arg0),
          parms.shex.map(shexFileArg).join(' '),
          parms.json.map(jsonFileArg).join(' '),
          parms.data.map(dataFileArg).join(' '),
          parms.jsonld.map(jsonldFileArg).join(' '),
          "-s " + parms.shape,
          "-n " + parms.node
         ].join(' ');
}

var cmds = CLI.parse();

if (cmds.help)
  abort("");

if (cmds.or) {
  if (!(cmds.or in ShExValidator.options.or))
    throw Error("unknown or option \"" + cmds.or + "\" - expected one of " + Object.keys(ShExValidator.options.or).join(", ") + "\".");
  ValidatorOptions.or = cmds.or;
}

if (cmds.partition) {
  if (!(cmds.partition in ShExValidator.options.partition))
    throw Error("unknown partition option \"" + cmds.partition + "\" - expected one of " + Object.keys(ShExValidator.options.partition).join(", ") + "\".");
  ValidatorOptions.partition = cmds.partition;
}

if ("regex-module" in cmds)
  ValidatorOptions.regexModule = cmds["regex-module"];

var TraitToOption = { eachOf: "or", oneOf: "or", someOf: "or", exhaustive: "partition", greedy: "partition" };
if (cmds["turtle-manifest"].length || cmds["jsonld-manifest"].length) {
  loadRDFmanifest(cmds["turtle-manifest"], cmds["jsonld-manifest"]).then(function (exitCode) {
    process.on('exit', function() { process.exit(exitCode); });
  });
} else if (cmds["json-manifest"].length) {
  Promise.all(loadJSONmanifest(cmds["json-manifest"])).then(function (results) {
    // exit with a 0 if all returned 0, else a failure code.
    process.on('exit', function() { process.exit(results.reduce(function (soFar, result) {
      return soFar ? soFar : result;
    }, 0)); });
  });
} else {
  loadCommandLine(cmds).then(function (ret) {
    process.on('exit', function() { process.exit(ret); });
  });
}

/* queueTests - take a structure like
[ { json: [],
    options: {},
    shex: [ 'file:///tmp/t/t.shex' ],
    shape: 'http://www.w3.org/fhir-rdf-shapes/MedicationOrder',
    data: [ 'file:///tmp/t/t.ttl' ],
    node: 'file:///tmp/t/MedicationOrder/12345-67' } ]
and some constructor args like {or: "someOf", partition: "exhaustive"}
*/
function queueTests (tests, cmds) {
  return Promise.all(tests.map(function (test) {
    // run each test and return the result (0 or 2, so far)
    if (cmds.invocation) {
      console.log(getInvocation(test));
    }
    return loadSchemaAndData(test, test.options);
  })).then(function (results) {
    // exit with a 0 if all returned 0, else a failure code.
    return results.reduce(function (soFar, result) {
      return soFar ? soFar : result;
    }, 0);
  });
}

function runValidator (graph, focusNode, schema, shape, options) {
  // console.log("runValidator ("+graph+", "+focusNode+", "+schema+", "+shape+")");
  if (focusNode === undefined || (shape === undefined && !("start" in schema))) {
    var msgs = [];
    if (focusNode === undefined) {
      var subjectNodes = graph.count() < 50 ? Object.keys(graph.findByIRI(null, null, null).reduce(function (r, t) { r[t.subject] = t.subject; return r; }, {})) : 0;
      msgs.push("No starting node specified" +
                (subjectNodes.length ?
                 "; try -n with one of: " + subjectNodes.join(", ") :
                 "")
               );
    }
    // Make sure we have a start node.
    if (shape === undefined && !("start" in schema)) {
      var schemaKeys = Object.keys(schema.shapes);
      schemaKeys.join(", ")
      msgs.push("No shape specified on command line or in shex" +
                (schemaKeys.length < 50 ?
                 "; try -n with one of: " + schemaKeys.join(", ") :
                 "")
               );
      }
    abort(msgs.join("\n"));
  }
  
  if (cmds.verbose) {
    var w;
    new ShExWriter({simplifyParentheses: false }).
      writeSchema(schema, function (error, text, prefixes) {
        if (error) throw error;
        else w = text;
      });
    var shapeIn = shape ? shape + " in" : "";
    console.log("validating", focusNode, "in", graph.size, "triples against", shapeIn, w);
  }

  // prepare validator
  if ("regexModule" in options) {
    try {
      options.regexModule = require(options.regexModule);
    } catch (e1) {
      try {
	options.regexModule = require("../lib/regex/" + options.regexModule);
      } catch (e2) {
	throw e1;
      }
    }
  }
  var validator = ShExValidator.construct(schema, options);
  var extensions = ShExLoader.loadExtensions();
  Object.keys(extensions).forEach(function (ext) {
    extensions[ext].register(validator);
  });

  function optsStr (key, dict) {
    var r = RegExp(key.substr(key.lastIndexOf("/")).toLowerCase(), "i");
    var opts = Object.keys(dict).reduce(function (ret, k) {
      if (k.match(r))
        ret.push(k);
      return ret;
    }, []);
    return opts.length === 0 ? "" :
      opts.length === 1 ? ": try " + opts[0] :
      ": try one of " + opts.join(" , ");
  }
  if (shape === undefined)
    shape = validator.schema.start;
  if (!(shape in validator.schema.shapes))
    throw Error("shape " + shape + " not defined" + optsStr(shape, validator.schema.shapes));
  if (!(focusNode in graph._entities) && !("serve" in cmds))
    console.warn(Error("node " + focusNode + " not defined" + optsStr(focusNode, graph._entities)));

  if (cmds["dry-run"])
    return 0;

  // run validator
  var res = validator.validate(graph, focusNode, shape);

  Object.keys(extensions).forEach(function (ext) {
    extensions[ext].done(validator);
  });

  // display results
  if (cmds.exec) {
    /* example usage:
       ./bin/validate -x test/Map/BPFHIR.shex -d test/Map/BPFHIR.ttl -n tag:BPfhir123 -e '
       return require("../lib/ShExLoader").load(["test/Map/BPunitsDAM.shex"], [], []).
       then(function (loaded) {
       var db = require("../extensions/shex:Map").materializer(loaded.schema).
       materialize(validator.semActHandler.results["http://shex.io/extensions/Map/#"], "tag:b0").
       find(null, null, null);
       var w = require("n3").Writer({ prefixes: { map: "http://shex.io/extensions/Map/#" } });
       w.addTriples(db); w.end(function (error, result) { console.log(result); });
       });'
    */
    return eval("function (validator) {\n" + cmds.exec + "}")(validator);
  } else {
    if (!cmds.quiet)
      if ("errors" in res && Object.keys(validator.semActHandler.results).length) {
        res.semActResults = validator.semActHandler.results;
      }
    return res;
  }
}

function loadRDFmanifest (turtleManifests, jsonldManifests) {

  // from a manifest supplied on the command line
  var mf = "http://www.w3.org/2001/sw/DataAccess/tests/test-manifest#"; // mf: namespace in the manifest file.
  var sht = "http://www.w3.org/ns/shacl/test-suite#";
  return ShExLoader.load([], [], turtleManifests || [], jsonldManifests || []).then(function (loaded) {

    var testNodes = cmds["test-name"].length ?
        cmds["test-name"].reduce((ret, testName) => {
          var pattern = RegExp(testName);
          loaded.data.find(null, mf+"name", null).filter(function (triple) {
            if (N3.Util.getLiteralValue(triple.object).match(pattern))
              ret.push(triple.subject);
          })
          return ret;
        }, []) :
        loaded.data.find(null, mf+"action", null).map(function (t) {
          return t.subject;
        });
    var tests = testNodes.map(function (subject) {
      var action = loaded.data.find(subject, mf+"action", null)[0].object;
      var options = Object.assign({}, ValidatorOptions);
      var traits = loaded.data.find(subject, sht+"trait", null);
      traits.forEach(function (t) {
        var tStr = t.object.substr(sht.length);
        tStr = tStr.substr(0, 1).toLowerCase() + tStr.substr(1);
        if (tStr in TraitToOption)
          options[TraitToOption[tStr]] = tStr;
      });

      return [["shex" , "schema", true ],
              ["shape", "shape" , false],
              ["data" , "data"  , true ],
              ["node" , "focus" , false]].reduce(function (ret, elt) {
                var m = loaded.data.find(action, sht+elt[1], null);
                if (m.length > 0) {
                  var v = m[0].object;
                  ret[elt[0]] = elt[2] ? [v] : v;
                }
                return ret;
              }, {json: [], jsonld: [], options: options}); // @@ no way to specify jsonld in manifest
    });
    return queueTests(tests, cmds);
  }).catch(function (e) {
    console.error("failed to load manifest file \"" +
                  ((cmds["turtle-manifest"] || []).concat(cmds["jsonld-manifest"] || [])) +
                  "\":", e, e.stack);
    return 1;
  });
}

function loadJSONmanifest (jsonManifests) {
  return jsonManifests.map(function (jm) {
    return ShExLoader.GET(jm).then(function (p) {
      try {
        var d = JSON.parse(p.text);

        // normalize the input
        if (d.constructor !== Array) {
          if ("@graph" in d) // Extract from the JSON-LD manifest format.
            d = d["@graph"][0].entries.map(function (t) {
              var options = Object.assign({}, ValidatorOptions);
              t.trait.forEach(function (tStr) {
                tStr = tStr.substr(0, 1).toLowerCase() + tStr.substr(1);
                if (tStr in TraitToOption)
                  options[TraitToOption[tStr]] = tStr;
              });
              return {
                name: t.name,
                shex: t.action.schema,
                shape: t.action.shape,
                data: t.action.data,
                node: t.action.focus,
                options: options
              };
            })
          else // Hopefully an object like { shex: "t.shex" , shape: "S", data: "t.ttl", "node": "s" }
            d = [d];
        }
        if (cmds["test-name"].length) // Include only tests listed in --test-name.
          d = d.filter(function (elt) {
            return cmds["test-name"].reduce(function (ret, n) {
              var pattern = RegExp(n);
              return ret || ("name" in elt && elt.name.match(pattern) !== -1);
            }, false);
          });
        d.forEach(function (elt) {
          // FileURL parameters are lists of URLs relative to the manifest file.
          ["shex", "json", "data", "jsonld"].forEach(function (attr) {
            if (!(attr in elt))
              elt[attr] = [];
            else if (elt[attr].constructor !== Array)
              elt[attr] = [elt[attr]];
            elt[attr] = elt[attr].map(function (url) {
              return resolveRelativeIRI(p.url, url); // note that these don't permit prefixes (for now).
            });
          });
          if (!("options" in elt))
            elt.options = ValidatorOptions;
          if ("result" in elt && elt.result !== null)
            elt.result = resolveRelativeIRI(p.url, elt.result);
          elt.jsonld = []; // @@ no way to specify jsonld in manifest
        });
        return queueTests(d, cmds);
      } catch (e) {
        console.error("failed to process json manifest: " + (e.stack || e));
        return 1;
      }
    }).catch(function (e) {
      console.error("failed to load json manifest: ", e.stack || e);
      return 1;
    });
  });
}

function loadCommandLine (cmds) {
  // from the command line directly
  if (cmds.invocation) {
    console.log(getInvocation(cmds));
  }
  return loadSchemaAndData(cmds, ValidatorOptions);
}

function runServer (serverLoaded, serverParms, serverOptions) {
  var match = serverParms.serve.match(/^(?:http:\/\/)?([a-zA-Z0-9.]+)(?::([0-9]+))?(\/.*)/);
  if (!match)
    throw Error("server parameter expected to be a URL");

  var log     = console.log,
      app     = require("koa")(),
      koaBody = require("koa-body"),
      port    = match[2] || 80,
      host    = "http://" + match[1],
      fs      = require("fs"),
      RDF_TYPE= "http://www.w3.org/1999/02/22-rdf-syntax-ns#type";

  app.
    use(koaBody({
      multipart: true,
      formLimit: 15,
      formidable: {
        uploadDir: Path.resolve(__dirname, "../rest/uploads")
      }
    })).
    use(function *(next) {
      switch (this.originalUrl) {
      case match[3]:
        var parms = {
          schemaName:null, schemaFile:null, shape:null,
          dataName:null,   dataFile:null,   node:null, nodeType:null
        };
        if (this.request.method !== "POST")
          this.throw(500, "only supports POST now");
        var body = this.request.body;
        function makeArray (key) {
          if (!(key in body.files))
            return [];
          return (body.files[key].constructor === Array ?
                  body.files[key] :
                  [body.files[key]]
                 ).map(pair => {
                   return pair.path; // should ShExLoader accept [.name, .path]?
                 });
        }
        var schemaFiles = makeArray("schema");
        parms.shape      = body.fields.shape;
        var dataFiles = makeArray("data");
        parms.node      = body.fields.node;
        parms["node-type"] = body.fields.nodeType;

        var _this = this;
        yield ShExLoader
          .load(schemaFiles, [], dataFiles, [])
          .then(function (loaded) {
            // add server-loaded (meta)data
            serverLoaded.data.find().forEach(t => { loaded.data.addTriple(t); });
            loaded.dataMeta = loaded.dataMeta.concat(serverLoaded.dataMeta);

            // add server-loaded schema
            ShExUtil.merge(loaded.schema, serverLoaded.schema, false, true);
            loaded.schemaMeta = loaded.schemaMeta.concat(serverLoaded.schemaMeta);

            var result = findNodesAndValidate(loaded, parms, {diagnose:true});
            if ("results" in result)
              result = result.results; // otherwise just report the invoked parms.
            if (body.fields.output === "html") {
              _this.body = Object.keys(parms).reduce((r, p) => {
                return r.replace("["+p+"]", parms[p]);
              }, fs.readFileSync("./validate.template", "utf-8")).
                replace(/\[result\]/, JSON.stringify(result, null, 2));
            } else {
              _this.body = JSON.stringify(result, null, 2)+"\n";
            }
            schemaFiles.forEach(path => { fs.unlink(path) });
            dataFiles.forEach(path => { fs.unlink(path) });
            return next;
          }).catch(e => {
            var stack = typeof e === "object" && "stack" in e ? e.stack : e;
            var msg = typeof e === "object" && "message" in e ? e.message : e;
            console.warn(stack);
            _this.body = {
              type: "ParsingError",
              errors: [msg]
            };
          })
            break;
      case "/":
        this.body = fs.readFileSync(Path.resolve(__dirname, "../rest/index.html"), "utf-8");
        break;
      default:
        this.throw(404, "whazzat?");
      }
    }).
    listen(port);

  log('Visit %s:%s/ in browser.', host, port);
  log();
  log('Test with executing this commands:');
  log('  curl -i %s:%s/validate -F "schema=@../test/cli/1dotOr2dot.shex" -F "shape=http://a.example/S1" -F "data=@../test/cli/p2p3.ttl" -F "node=x"', host, port);
  log('or preload schema:');
  log("  " + Path.relative("", process.argv[1]) + " -x cli/1dotOr2dot.shex -s http://a.example/S1 -S " + serverParms.serve);
  log('and pass only the data parameters:');
  log('  curl -i %s:%s/validate -F "data=@../test/cli/p2p3.ttl" -F "node=x"', host, port);
  log('Note that shape and node can be relative or prefixed URLs.');
  log();
  log('Press CTRL+C to stop...');
}

